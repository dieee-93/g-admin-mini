
 RUN  v3.2.4 I:/Programacion/Proyectos/g-mini

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should create unique isolated instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044822_dt2igrgss'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should create unique isolated instances
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'test-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044822_dt2igrgss'[39m,
  instanceId: [32m'test-1'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044822_dt2igrgss'[39m,
  instanceId: [32m'test-1'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'test-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044822_dt2igrgss'[39m,
  instanceId: [32m'test-2'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044822_dt2igrgss'[39m,
  instanceId: [32m'test-2'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'2'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should create unique isolated instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044822_dt2igrgss'[39m,
  instancesToDestroy: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'test-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'test-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'test-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'test-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044822_dt2igrgss'[39m,
  instanceId: [32m'test-1'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044822_dt2igrgss'[39m,
  instanceId: [32m'test-2'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should create unique isolated instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044822_dt2igrgss'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should prevent duplicate instance IDs
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044856_1wt2mn3fv'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should prevent duplicate instance IDs
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'duplicate-test'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044856_1wt2mn3fv'[39m,
  instanceId: [32m'duplicate-test'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044856_1wt2mn3fv'[39m,
  instanceId: [32m'duplicate-test'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should prevent duplicate instance IDs
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044856_1wt2mn3fv'[39m,
  instancesToDestroy: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'duplicate-test'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'duplicate-test'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should prevent duplicate instance IDs
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044856_1wt2mn3fv'[39m,
  instanceId: [32m'duplicate-test'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should prevent duplicate instance IDs
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044856_1wt2mn3fv'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should prevent duplicate instance IDs
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:04) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'7eeeb064...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should prevent duplicate instance IDs
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (06:14:04) { reason: [32m'No valid existing ID found'[39m, newId: [32m'7eeeb064...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should prevent duplicate instance IDs
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:04) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'0c86656a...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should prevent duplicate instance IDs
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (06:14:04) { reason: [32m'No valid existing ID found'[39m, newId: [32m'0c86656a...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should prevent duplicate instance IDs
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:04) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'0d816f8c...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should prevent duplicate instance IDs
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (06:14:04) { reason: [32m'No valid existing ID found'[39m, newId: [32m'0d816f8c...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should retrieve existing instances by ID
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044873_fcqr2d1sv'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should retrieve existing instances by ID
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'retrieve-test'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044873_fcqr2d1sv'[39m,
  instanceId: [32m'retrieve-test'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044873_fcqr2d1sv'[39m,
  instanceId: [32m'retrieve-test'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should retrieve existing instances by ID
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044873_fcqr2d1sv'[39m,
  instancesToDestroy: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'retrieve-test'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'retrieve-test'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should retrieve existing instances by ID
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044873_fcqr2d1sv'[39m,
  instanceId: [32m'retrieve-test'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should retrieve existing instances by ID
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044873_fcqr2d1sv'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should return null for non-existent instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044876_fm3ulgmc7'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should return null for non-existent instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044876_fm3ulgmc7'[39m,
  instancesToDestroy: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should return null for non-existent instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044876_fm3ulgmc7'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should track instance metadata correctly
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044877_kjjoxgnvl'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should track instance metadata correctly
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'metadata-test'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044877_kjjoxgnvl'[39m,
  instanceId: [32m'metadata-test'[39m,
  namespace: [32m'test-namespace'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044877_kjjoxgnvl'[39m,
  instanceId: [32m'metadata-test'[39m,
  namespace: [32m'test-namespace'[39m,
  totalInstances: [32m'1'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should track instance metadata correctly
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044877_kjjoxgnvl'[39m,
  instancesToDestroy: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'metadata-test'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'metadata-test'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should track instance metadata correctly
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044877_kjjoxgnvl'[39m,
  instanceId: [32m'metadata-test'[39m,
  namespace: [32m'test-namespace'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should track instance metadata correctly
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044877_kjjoxgnvl'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should destroy instances properly
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044879_770l67qas'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should destroy instances properly
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'destroy-test'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044879_770l67qas'[39m,
  instanceId: [32m'destroy-test'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044879_770l67qas'[39m,
  instanceId: [32m'destroy-test'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'destroy-test'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'destroy-test'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should destroy instances properly
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044879_770l67qas'[39m,
  instanceId: [32m'destroy-test'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should destroy instances properly
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044879_770l67qas'[39m,
  instancesToDestroy: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should destroy instances properly
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044879_770l67qas'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should pause and resume instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044882_djzjutriv'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should pause and resume instances
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'pause-test'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044882_djzjutriv'[39m,
  instanceId: [32m'pause-test'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044882_djzjutriv'[39m,
  instanceId: [32m'pause-test'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance paused (06:14:04) {
  factoryId: [32m'factory_1757798044882_djzjutriv'[39m,
  instanceId: [32m'pause-test'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance resumed (06:14:04) {
  factoryId: [32m'factory_1757798044882_djzjutriv'[39m,
  instanceId: [32m'pause-test'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should pause and resume instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044882_djzjutriv'[39m,
  instancesToDestroy: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'pause-test'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'pause-test'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should pause and resume instances
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044882_djzjutriv'[39m,
  instanceId: [32m'pause-test'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should pause and resume instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044882_djzjutriv'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should handle invalid lifecycle operations
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044884_yckw9wrjl'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should handle invalid lifecycle operations
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044884_yckw9wrjl'[39m,
  instancesToDestroy: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should handle invalid lifecycle operations
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044884_yckw9wrjl'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should handle invalid lifecycle operations
Promise returned by `expect(actual).resolves.toBe(expected)` was not awaited. Vitest currently auto-awaits hanging assertions at the end of the test, but this will cause the test to fail in Vitest 3. Please remember to await the assertion.
    at I:/Programacion/Proyectos/g-mini/src/lib/events/__tests__/integration/EventBusFactory.test.ts:121:38

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate events between instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044887_hxp7mewzo'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate events between instances
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'isolation-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044887_hxp7mewzo'[39m,
  instanceId: [32m'isolation-1'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044887_hxp7mewzo'[39m,
  instanceId: [32m'isolation-1'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'isolation-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044887_hxp7mewzo'[39m,
  instanceId: [32m'isolation-2'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044887_hxp7mewzo'[39m,
  instanceId: [32m'isolation-2'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'2'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate events between instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044887_hxp7mewzo'[39m,
  instancesToDestroy: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'isolation-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'isolation-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'isolation-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'isolation-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044887_hxp7mewzo'[39m,
  instanceId: [32m'isolation-1'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044887_hxp7mewzo'[39m,
  instanceId: [32m'isolation-2'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate events between instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044887_hxp7mewzo'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate storage between instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044891_u29qnq58n'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate storage between instances
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'storage-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044891_u29qnq58n'[39m,
  instanceId: [32m'storage-1'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044891_u29qnq58n'[39m,
  instanceId: [32m'storage-1'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'storage-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044891_u29qnq58n'[39m,
  instanceId: [32m'storage-2'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044891_u29qnq58n'[39m,
  instanceId: [32m'storage-2'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'2'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate storage between instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044891_u29qnq58n'[39m,
  instancesToDestroy: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'storage-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'storage-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'storage-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'storage-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044891_u29qnq58n'[39m,
  instanceId: [32m'storage-1'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044891_u29qnq58n'[39m,
  instanceId: [32m'storage-2'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate storage between instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044891_u29qnq58n'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate module registries between instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044894_g3qme2sqi'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate module registries between instances
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'modules-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044894_g3qme2sqi'[39m,
  instanceId: [32m'modules-1'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044894_g3qme2sqi'[39m,
  instanceId: [32m'modules-1'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'modules-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044894_g3qme2sqi'[39m,
  instanceId: [32m'modules-2'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044894_g3qme2sqi'[39m,
  instanceId: [32m'modules-2'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'2'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate module registries between instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044894_g3qme2sqi'[39m,
  instancesToDestroy: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'modules-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'modules-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'modules-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'modules-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044894_g3qme2sqi'[39m,
  instanceId: [32m'modules-1'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044894_g3qme2sqi'[39m,
  instanceId: [32m'modules-2'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate module registries between instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044894_g3qme2sqi'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should provide accurate factory metrics
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044897_b1cc6tdzo'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should provide accurate factory metrics
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'active-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044897_b1cc6tdzo'[39m,
  instanceId: [32m'active-1'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044897_b1cc6tdzo'[39m,
  instanceId: [32m'active-1'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'active-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044897_b1cc6tdzo'[39m,
  instanceId: [32m'active-2'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044897_b1cc6tdzo'[39m,
  instanceId: [32m'active-2'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'paused-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044897_b1cc6tdzo'[39m,
  instanceId: [32m'paused-1'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044897_b1cc6tdzo'[39m,
  instanceId: [32m'paused-1'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'3'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance paused (06:14:04) {
  factoryId: [32m'factory_1757798044897_b1cc6tdzo'[39m,
  instanceId: [32m'paused-1'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should provide accurate factory metrics
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044897_b1cc6tdzo'[39m,
  instancesToDestroy: [32m'3'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'active-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'active-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'active-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'active-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'paused-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'paused-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044897_b1cc6tdzo'[39m,
  instanceId: [32m'active-1'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044897_b1cc6tdzo'[39m,
  instanceId: [32m'active-2'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044897_b1cc6tdzo'[39m,
  instanceId: [32m'paused-1'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should provide accurate factory metrics
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044897_b1cc6tdzo'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should list instances correctly
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044901_g2qvtycwj'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should list instances correctly
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'list-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044901_g2qvtycwj'[39m,
  instanceId: [32m'list-1'[39m,
  namespace: [32m'ns1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044901_g2qvtycwj'[39m,
  instanceId: [32m'list-1'[39m,
  namespace: [32m'ns1'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'list-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044901_g2qvtycwj'[39m,
  instanceId: [32m'list-2'[39m,
  namespace: [32m'ns2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044901_g2qvtycwj'[39m,
  instanceId: [32m'list-2'[39m,
  namespace: [32m'ns2'[39m,
  totalInstances: [32m'2'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should list instances correctly
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044901_g2qvtycwj'[39m,
  instancesToDestroy: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'list-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'list-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'list-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'list-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044901_g2qvtycwj'[39m,
  instanceId: [32m'list-1'[39m,
  namespace: [32m'ns1'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044901_g2qvtycwj'[39m,
  instanceId: [32m'list-2'[39m,
  namespace: [32m'ns2'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should list instances correctly
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044901_g2qvtycwj'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should group instances by namespace
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044905_txmgkps69'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should group instances by namespace
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'ns-test-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044905_txmgkps69'[39m,
  instanceId: [32m'ns-test-1'[39m,
  namespace: [32m'group-a'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044905_txmgkps69'[39m,
  instanceId: [32m'ns-test-1'[39m,
  namespace: [32m'group-a'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'ns-test-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044905_txmgkps69'[39m,
  instanceId: [32m'ns-test-2'[39m,
  namespace: [32m'group-a'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044905_txmgkps69'[39m,
  instanceId: [32m'ns-test-2'[39m,
  namespace: [32m'group-a'[39m,
  totalInstances: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'ns-test-3'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044905_txmgkps69'[39m,
  instanceId: [32m'ns-test-3'[39m,
  namespace: [32m'group-b'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044905_txmgkps69'[39m,
  instanceId: [32m'ns-test-3'[39m,
  namespace: [32m'group-b'[39m,
  totalInstances: [32m'3'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should group instances by namespace
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044905_txmgkps69'[39m,
  instancesToDestroy: [32m'3'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'ns-test-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'ns-test-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'ns-test-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'ns-test-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'ns-test-3'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'ns-test-3'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044905_txmgkps69'[39m,
  instanceId: [32m'ns-test-1'[39m,
  namespace: [32m'group-a'[39m,
  remainingInstances: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044905_txmgkps69'[39m,
  instanceId: [32m'ns-test-2'[39m,
  namespace: [32m'group-a'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044905_txmgkps69'[39m,
  instanceId: [32m'ns-test-3'[39m,
  namespace: [32m'group-b'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should group instances by namespace
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044905_txmgkps69'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should create microfrontend-ready instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044909_mrewrlmhj'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should create microfrontend-ready instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044909_jnegfemz7'[39m,
  namespace: [32m'mf-test'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'mf-instance-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044909_jnegfemz7'[39m,
  instanceId: [32m'mf-instance-1'[39m,
  namespace: [32m'mf-test'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Microfrontend support setup (06:14:04) {
  factoryId: [32m'factory_1757798044909_jnegfemz7'[39m,
  instanceId: [32m'mf-instance-1'[39m,
  crossInstanceCommunication: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044909_jnegfemz7'[39m,
  instanceId: [32m'mf-instance-1'[39m,
  namespace: [32m'mf-test'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044909_jnegfemz7'[39m,
  instancesToDestroy: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'mf-instance-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'mf-instance-1'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should create microfrontend-ready instances
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044909_jnegfemz7'[39m,
  instanceId: [32m'mf-instance-1'[39m,
  namespace: [32m'mf-test'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should create microfrontend-ready instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044909_jnegfemz7'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should create microfrontend-ready instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044909_mrewrlmhj'[39m,
  instancesToDestroy: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should create microfrontend-ready instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044909_mrewrlmhj'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should support cross-instance communication when enabled
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044911_mxew8kkrd'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should support cross-instance communication when enabled
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044911_671jmqx6z'[39m,
  namespace: [32m'cross-comm'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'comm-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044911_671jmqx6z'[39m,
  instanceId: [32m'comm-1'[39m,
  namespace: [32m'cross-comm'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Microfrontend support setup (06:14:04) {
  factoryId: [32m'factory_1757798044911_671jmqx6z'[39m,
  instanceId: [32m'comm-1'[39m,
  crossInstanceCommunication: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044911_671jmqx6z'[39m,
  instanceId: [32m'comm-1'[39m,
  namespace: [32m'cross-comm'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'comm-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044911_671jmqx6z'[39m,
  instanceId: [32m'comm-2'[39m,
  namespace: [32m'cross-comm'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Microfrontend support setup (06:14:04) {
  factoryId: [32m'factory_1757798044911_671jmqx6z'[39m,
  instanceId: [32m'comm-2'[39m,
  crossInstanceCommunication: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044911_671jmqx6z'[39m,
  instanceId: [32m'comm-2'[39m,
  namespace: [32m'cross-comm'[39m,
  totalInstances: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044911_671jmqx6z'[39m,
  instancesToDestroy: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'comm-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'comm-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'comm-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'comm-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044911_671jmqx6z'[39m,
  instanceId: [32m'comm-1'[39m,
  namespace: [32m'cross-comm'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044911_671jmqx6z'[39m,
  instanceId: [32m'comm-2'[39m,
  namespace: [32m'cross-comm'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should support cross-instance communication when enabled
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044911_671jmqx6z'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should support cross-instance communication when enabled
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044911_mxew8kkrd'[39m,
  instancesToDestroy: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should support cross-instance communication when enabled
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044911_mxew8kkrd'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should manage global factory registry
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044913_8vyyuk3af'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should manage global factory registry
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044914_uktdg9qb7'[39m,
  namespace: [32m'default'[39m,
  isolated: [32m'false'[39m,
  microfrontendMode: [32m'false'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044914_erct7jfo0'[39m,
  namespace: [32m'default'[39m,
  isolated: [32m'false'[39m,
  microfrontendMode: [32m'false'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044914_uktdg9qb7'[39m,
  instancesToDestroy: [32m'0'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044914_erct7jfo0'[39m,
  instancesToDestroy: [32m'0'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044914_uktdg9qb7'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044914_erct7jfo0'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should manage global factory registry
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044913_8vyyuk3af'[39m,
  instancesToDestroy: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should manage global factory registry
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044913_8vyyuk3af'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should destroy all factories
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044915_q92ng6tqq'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should destroy all factories
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044915_r8m206dhm'[39m,
  namespace: [32m'default'[39m,
  isolated: [32m'false'[39m,
  microfrontendMode: [32m'false'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044915_1f32rer9n'[39m,
  namespace: [32m'default'[39m,
  isolated: [32m'false'[39m,
  microfrontendMode: [32m'false'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044915_r8m206dhm'[39m,
  instancesToDestroy: [32m'0'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044915_r8m206dhm'[39m,
  instancesToDestroy: [32m'0'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044915_1f32rer9n'[39m,
  instancesToDestroy: [32m'0'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044915_1f32rer9n'[39m,
  instancesToDestroy: [32m'0'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044915_r8m206dhm'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044915_r8m206dhm'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044915_1f32rer9n'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044915_1f32rer9n'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should destroy all factories
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044915_q92ng6tqq'[39m,
  instancesToDestroy: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should destroy all factories
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044915_q92ng6tqq'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle destroyed factory operations gracefully
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044916_stgupa7qt'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle destroyed factory operations gracefully
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044916_4k75e6idl'[39m,
  namespace: [32m'default'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044916_4k75e6idl'[39m,
  instancesToDestroy: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle destroyed factory operations gracefully
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044916_4k75e6idl'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle destroyed factory operations gracefully
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044916_stgupa7qt'[39m,
  instancesToDestroy: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle destroyed factory operations gracefully
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044916_stgupa7qt'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle concurrent instance creation
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle concurrent instance creation
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'concurrent-0'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-0'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-0'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'concurrent-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-1'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-1'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'concurrent-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-2'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-2'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'3'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'concurrent-3'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-3'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-3'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'4'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'concurrent-4'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-4'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-4'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'5'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'concurrent-5'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-5'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-5'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'6'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'concurrent-6'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-6'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-6'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'7'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'concurrent-7'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-7'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-7'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'8'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'concurrent-8'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-8'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-8'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'9'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'concurrent-9'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-9'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-9'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'10'[39m
}

 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should create unique isolated instances 35ms
 √ó src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should prevent duplicate instance IDs 14ms
   ‚Üí expected [Function] to throw error including 'Instance \'duplicate-test\' already e‚Ä¶' but got 'this.sanitizeData is not a function'
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should retrieve existing instances by ID 3ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should return null for non-existent instances 1ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should track instance metadata correctly 2ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should destroy instances properly 2ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should pause and resume instances 2ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should handle invalid lifecycle operations 3ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate events between instances 4ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate storage between instances 3ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate module registries between instances 3ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should provide accurate factory metrics 4ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should list instances correctly 3ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should group instances by namespace 4ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should create microfrontend-ready instances 2ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should support cross-instance communication when enabled 3ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should manage global factory registry 1ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should destroy all factories 1ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle destroyed factory operations gracefully 1ms
stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle concurrent instance creation
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instancesToDestroy: [32m'10'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'concurrent-0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'concurrent-0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'concurrent-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'concurrent-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'concurrent-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'concurrent-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'concurrent-3'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'concurrent-3'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'concurrent-4'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'concurrent-4'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'concurrent-5'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'concurrent-5'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'concurrent-6'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'concurrent-6'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'concurrent-7'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'concurrent-7'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'concurrent-8'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'concurrent-8'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'concurrent-9'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'concurrent-9'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-0'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'9'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-1'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'8'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-2'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'7'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-3'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'6'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-4'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'5'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-5'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'4'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-6'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'3'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-7'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-8'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044917_5klerupwl'[39m,
  instanceId: [32m'concurrent-9'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle concurrent instance creation
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044917_5klerupwl'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle rapid destroy and recreate operations
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044928_hqr6fjx22'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle rapid destroy and recreate operations
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'rapid-test'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044928_hqr6fjx22'[39m,
  instanceId: [32m'rapid-test'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044928_hqr6fjx22'[39m,
  instanceId: [32m'rapid-test'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'rapid-test'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'rapid-test'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle rapid destroy and recreate operations
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044928_hqr6fjx22'[39m,
  instanceId: [32m'rapid-test'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:04) { noncePrefix: [32m'9488mxze'[39m, timestamp: [32m'1757798044936'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:04)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle rapid destroy and recreate operations
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'rapid-test'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044928_hqr6fjx22'[39m,
  instanceId: [32m'rapid-test'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044928_hqr6fjx22'[39m,
  instanceId: [32m'rapid-test'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:04) { noncePrefix: [32m'x7s9xd4p'[39m, timestamp: [32m'1757798044936'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:04)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:04) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:04) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:04) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:04) { noncePrefix: [32m'7s5xn4d3'[39m, timestamp: [32m'1757798044936'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:04)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:04) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:04) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:04) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle rapid destroy and recreate operations
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044928_hqr6fjx22'[39m,
  instancesToDestroy: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'rapid-test'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'rapid-test'[39m }

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:04) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:04) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:04) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle rapid destroy and recreate operations
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044928_hqr6fjx22'[39m,
  instanceId: [32m'rapid-test'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle rapid destroy and recreate operations
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044928_hqr6fjx22'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Performance and Scalability > should handle multiple instances efficiently
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:04) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'775049f3...'[39m }

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (06:14:04) { reason: [32m'No valid existing ID found'[39m, newId: [32m'775049f3...'[39m }

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:04) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'ac2c6f5a...'[39m }

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (06:14:04) { reason: [32m'No valid existing ID found'[39m, newId: [32m'ac2c6f5a...'[39m }

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:04) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'5e857026...'[39m }

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (06:14:04) { reason: [32m'No valid existing ID found'[39m, newId: [32m'5e857026...'[39m }

stdout | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Performance and Scalability > should handle multiple instances efficiently
Performance Metrics: {
  instanceCount: [33m10[39m,
  createTimeMs: [33m3.863600000000133[39m,
  avgCreateTime: [33m0.3863600000000133[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Performance and Scalability > should handle multiple instances efficiently
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'perf-0'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-0'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-0'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'perf-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-1'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-1'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'perf-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-2'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-2'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'3'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'perf-3'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-3'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-3'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'4'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'perf-4'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-4'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-4'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'5'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'perf-5'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-5'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-5'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'6'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'perf-6'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-6'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-6'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'7'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'perf-7'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-7'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-7'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'8'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'perf-8'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-8'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-8'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'9'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:04) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  instanceId: [32m'perf-9'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-9'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-9'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'10'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Performance and Scalability > should handle multiple instances efficiently
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instancesToDestroy: [32m'10'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'perf-0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'perf-0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'perf-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'perf-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'perf-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'perf-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'perf-3'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'perf-3'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'perf-4'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'perf-4'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'perf-5'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'perf-5'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'perf-6'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'perf-6'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'perf-7'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'perf-7'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'perf-8'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'perf-8'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (06:14:04) { instanceId: [32m'perf-9'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (06:14:04) { instanceId: [32m'perf-9'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-0'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'9'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-1'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'8'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-2'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'7'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-3'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'6'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-4'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'5'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-5'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'4'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-6'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'3'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-7'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-8'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (06:14:04) {
  factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m,
  instanceId: [32m'perf-9'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Performance and Scalability > should handle multiple instances efficiently
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (06:14:04) { factoryId: [32m'factory_1757798044932_ci4g9wuog'[39m }

 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle concurrent instance creation 11ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle rapid destroy and recreate operations 5ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Performance and Scalability > should handle multiple instances efficiently 9ms
stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST-BEFORE] Starting health monitoring test setup...
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:04) { noncePrefix: [32m'bu75e24a'[39m, timestamp: [32m'1757798044954'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:04)

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:04) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:04) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:04) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (06:14:04) {
  keyVersion: [32m'key_1757798044935_p466z237'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (06:14:04) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:04) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Adding subscription to weak subscription manager for pattern: **
[EventBus] Subscription added: ** (sub_1757798044960_qbc1eqhpx) [moduleId: anonymous]
[HEALTH-TEST-BEFORE] Health monitoring test setup completed! ‚úÖ

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:04) {
  subscriptionId: [32m'sub_1757798044960_qbc1eqhpx'[39m,
  pattern: [32m'**'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:04) { noncePrefix: [32m'mq6de3wg'[39m, timestamp: [32m'1757798044961'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:04)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:04)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:04) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:04) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:04) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:04) { noncePrefix: [32m'0n1eft8g'[39m, timestamp: [32m'1757798044962'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:04)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:04)

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:04) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:04) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:04) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:04) {
  subscriptionId: [32m'sub_1757798044963_6mb333ca0'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:04) {
  subscriptionId: [32m'sub_1757798044963_8kgfdshns'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ÑπÔ∏è [EventBus] Module registered (06:14:04) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST] Successfully registered module: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:04) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:04) {
  subscriptionId: [32m'sub_1757798044966_xkzxbpkkv'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:04) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
[OfflineIntegration] Starting automatic persistent event queuing test...
[OfflineIntegration] Created order event: sales.order.created
[OfflineIntegration] Emitting event with persistent=true...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ÑπÔ∏è [EventBus] Module registered (06:14:04) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST] Successfully registered module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
[EventBus] Processing event sales.order.created: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:04) {
  subscriptionId: [32m'sub_1757798044968_9h4s1yk1y'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:04) {
  subscriptionId: [32m'sub_1757798044968_g9jglgn7q'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
[OfflineIntegration] Queueing event for offline sync: sales.order.created priority: [33m1[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:04) {
  subscriptionId: [32m'sub_1757798044968_io7stwwvd'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:04) {
  subscriptionId: [32m'sub_1757798044969_0u7fk3lkq'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ÑπÔ∏è [EventBus] Module registered (06:14:04) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST] Successfully registered module: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Activation order calculated: [
  [32m'test-inventory'[39m,
  [32m'test-customers'[39m,
  [32m'test-sales'[39m,
  [32m'test-kitchen-failing'[39m
]
[ModuleRegistry] Module 'test-kitchen-failing' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Activating module 'test-kitchen-failing'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Directly activating module 'test-kitchen-failing'...
[TestKitchenModule] Attempting activation...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Registering 1 subscriptions for module 'test-kitchen-failing'

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
[OfflineIntegration] Event emitted successfully
[OfflineIntegration] Checking queued operations...
[OfflineIntegration] Found queued operations: [33m1[39m
[OfflineIntegration] First queued operation: {
  type: [32m'CREATE'[39m,
  entity: [32m'events'[39m,
  data: {
    id: [32m'evt_1757798044967_dc539ad7-4c75-4b58-9990-4180f6c32595'[39m,
    pattern: [32m'sales.order.created'[39m,
    payload: {
      orderId: [32m'ORD-OFFLINE-001'[39m,
      customerId: [32m'CUST-001'[39m,
      items: [36m[Array][39m,
      total: [33m61.08[39m,
      timestamp: [32m'2025-09-13T21:14:04.967Z'[39m
    },
    timestamp: [32m'2025-09-13T21:14:04.967Z'[39m,
    source: [32m'eventbus-v2'[39m,
    version: [32m'1.0.0'[39m,
    correlationId: [90mundefined[39m,
    userId: [90mundefined[39m,
    metadata: {
      priority: [32m'high'[39m,
      persistent: [33mtrue[39m,
      crossModule: [33mtrue[39m,
      deduplication: [36m[Object][39m,
      tracing: [36m[Object][39m,
      retryPolicy: [90mundefined[39m
    }
  },
  priority: [33m1[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Module health changed: test-kitchen-failing -> error
[ModuleRegistry] Module 'test-kitchen-failing' health changed: inactive -> error

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ÑπÔ∏è [EventBus] Module registered (06:14:04) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Module 'test-kitchen-failing' activated directly
[EventBus] Module activated: test-kitchen-failing
[EventBus] Auto-registering handlers for module: test-kitchen-failing
[EventBus] Auto-registered handler: test-kitchen-failing.processOrder for pattern: orders.new
[EventBus] Auto-registered 1/1 handlers for module: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Adding subscription to weak subscription manager for pattern: orders.new

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:04) {
  subscriptionId: [32m'sub_1757798044971_swwxj7axq'[39m,
  pattern: [32m'orders.new'[39m,
  moduleId: [32m'test-kitchen-failing'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:04)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:04)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:04) {
  subscriptionId: [32m'sub_1757798044972_akii5rehj'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ÑπÔ∏è [EventBus] Module registered (06:14:04) {
  moduleId: [32m'test-kitchen-failing'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Kitchen Module (Failing)'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST] Successfully registered module: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ÑπÔ∏è [EventBus] Module registered (06:14:04) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Adding subscription to weak subscription manager for pattern: global.eventbus.metrics
[EventBus] Subscription added: global.eventbus.metrics (sub_1757798044973_km5t1smlu) [moduleId: anonymous]
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:04) {
  subscriptionId: [32m'sub_1757798044973_km5t1smlu'[39m,
  pattern: [32m'global.eventbus.metrics'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should not queue non-persistent events
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:04) { noncePrefix: [32m'gisgna07'[39m, timestamp: [32m'1757798044973'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:04)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:04)

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.module-activated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should not queue non-persistent events
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:04) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:04) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:04) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Module 'test-kitchen-failing' is already active

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:04) {
  subscriptionId: [32m'sub_1757798044974_s6dn88j1x'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:04) {
  subscriptionId: [32m'sub_1757798044974_4ffsntmm9'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.module-activated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST] Waiting for health monitoring cycles...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ÑπÔ∏è [EventBus] Module registered (06:14:04) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should not queue non-persistent events
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:04) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m, [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:04) {
  subscriptionId: [32m'sub_1757798044976_3u0597qt5'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:04) {
  subscriptionId: [32m'sub_1757798044976_suj1i6k1o'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should not queue non-persistent events
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should not queue non-persistent events
[EventBus] Processing event system.health.check: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ÑπÔ∏è [EventBus] Module registered (06:14:04) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should not queue non-persistent events
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should not queue non-persistent events
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should not queue non-persistent events
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:04)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:04)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:04)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:04) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:04)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:04) { noncePrefix: [32m'zno0izq3'[39m, timestamp: [32m'1757798044979'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:04)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:04)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:04) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:04) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:04) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:04) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:04) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:04) { noncePrefix: [32m'ah2cskg2'[39m, timestamp: [32m'1757798044981'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:04)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:04)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:04) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:04) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:04) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:04) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[EventBus] Processing event sales.order.created: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[OfflineIntegration] Queueing event for offline sync: sales.order.created priority: [33m3[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[EventBus] Processing event payments.payment.processed: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[OfflineIntegration] Queueing event for offline sync: payments.payment.processed priority: [33m0[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:04) {
  subscriptionId: [32m'sub_1757798044983_q21up4aah'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:04) {
  subscriptionId: [32m'sub_1757798044983_1ydg977og'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[EventBus] Processing event inventory.stock.low: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[OfflineIntegration] Queueing event for offline sync: inventory.stock.low priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
‚ÑπÔ∏è [EventBus] Module registered (06:14:04) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-kitchen-failing'[39m ]
[ModuleRegistry] Module 'test-kitchen-failing' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Activating module 'test-kitchen-failing'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Directly activating module 'test-kitchen-failing'...
[TestKitchenModule] Attempting activation...

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Failed to activate module 'test-kitchen-failing' directly: Error: Kitchen equipment not responding
    at Object.onActivate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\helpers\test-modules.ts:264:13[90m)[39m
    at ModuleRegistry.activateModuleDirectly [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:531:33[90m)[39m
    at ModuleRegistry.activateModule [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:159:18[90m)[39m
    at ModuleRegistry.registerModule [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:125:7[90m)[39m
    at EventBus.registerModule [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:323:5[90m)[39m
    at [90mI:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\integration\module-lifecycle.test.ts:88:7
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Failed to activate module 'test-kitchen-failing': Error: Kitchen equipment not responding
    at Object.onActivate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\helpers\test-modules.ts:264:13[90m)[39m
    at ModuleRegistry.activateModuleDirectly [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:531:33[90m)[39m
    at ModuleRegistry.activateModule [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:159:18[90m)[39m
    at ModuleRegistry.registerModule [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:125:7[90m)[39m
    at EventBus.registerModule [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:323:5[90m)[39m
    at [90mI:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\integration\module-lifecycle.test.ts:88:7
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:04) { noncePrefix: [32m'vxgpeg61'[39m, timestamp: [32m'1757798044996'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:04)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:04)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:04) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:04) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:04) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:04) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:04) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Adding subscription to weak subscription manager for pattern: global.eventbus.module-registered
[EventBus] Subscription added: global.eventbus.module-registered (sub_1757798044998_uq1h2pzo6) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: global.eventbus.module-activated
[EventBus] Subscription added: global.eventbus.module-activated (sub_1757798044999_15w8hrtit) [moduleId: anonymous]

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:04) {
  subscriptionId: [32m'sub_1757798044998_uq1h2pzo6'[39m,
  pattern: [32m'global.eventbus.module-registered'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:04) {
  subscriptionId: [32m'sub_1757798044999_15w8hrtit'[39m,
  pattern: [32m'global.eventbus.module-activated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045000_mbzrcazj2'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045000_fnmwkznvd'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045002_3xejvhw0z'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045004_3e2sq534r'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045004_m2i4ojwri'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Processing event global.eventbus.module-activated: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync 12ms
 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should not queue non-persistent events 6ms
 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order 20ms
 √ó src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully 15ms
   ‚Üí Failed to activate module 'test-kitchen-failing': Kitchen equipment not responding
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:05)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:05)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:05) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:05)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:05) { noncePrefix: [32m'9t9awfzp'[39m, timestamp: [32m'1757798045098'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:05)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:05)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:05) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:05) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:05) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:05) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:05) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:05) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
[EventBus] Processing event sales.order.created: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
[OfflineIntegration] Queueing event for offline sync: sales.order.created priority: [33m2[39m

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
[EventBus] Failed to queue event for offline sync: Error: Queue failed
    at [90mI:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\integration\offline-integration.test.ts:279:66
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)
    at runWithTimeout [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
    at runSuite [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:05)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:05)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:05) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:05)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:05) { noncePrefix: [32m'n07b05ll'[39m, timestamp: [32m'1757798045110'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:05)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:05)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:05) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:05) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:05) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:05) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:05) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:05) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
[EventBus] Adding subscription to weak subscription manager for pattern: global.eventbus.network-offline
[EventBus] Subscription added: global.eventbus.network-offline (sub_1757798045112_n2ob8knse) [moduleId: anonymous]
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:05) { noncePrefix: [32m'29knc3et'[39m, timestamp: [32m'1757798045112'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:05)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:05)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045112_n2ob8knse'[39m,
  pattern: [32m'global.eventbus.network-offline'[39m,
  moduleId: [32m'anonymous'[39m
}

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:05) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:05) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:05) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:05) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:05) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Activation order calculated: [ [32m'module-a'[39m ]
[ModuleRegistry] Module 'module-a' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
[EventBus] Processing event global.eventbus.network-offline: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Activating module 'module-a'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Directly activating module 'module-a'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Registering 2 subscriptions for module 'module-a'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Module health changed: module-a -> active
[ModuleRegistry] Module 'module-a' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Module 'module-a' activated directly
[EventBus] Module activated: module-a
[EventBus] Auto-registering handlers for module: module-a
[EventBus] Auto-registered 0/2 handlers for module: module-a

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Available handler not found: module-a.updateStock
[EventBus] Available handler not found: module-a.processRestock

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Handler 'updateStock' not found in registry for module module-a
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045116_imxsf8zjn'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'module-a'[39m
}
[EventBus] Handler 'processRestock' not found in registry for module module-a
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045116_0afr0pqdf'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'module-a'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'module-a'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Activation order calculated: [ [32m'module-a'[39m, [32m'module-b'[39m ]
[ModuleRegistry] Module 'module-b' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Activating module 'module-b'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Directly activating module 'module-b'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Registering 1 subscriptions for module 'module-b'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Module health changed: module-b -> active
[ModuleRegistry] Module 'module-b' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Module 'module-b' activated directly
[EventBus] Module activated: module-b
[EventBus] Auto-registering handlers for module: module-b
[EventBus] Auto-registered 0/1 handlers for module: module-b

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Available handler not found: module-b.updateCustomerActivity

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Handler 'updateCustomerActivity' not found in registry for module module-b
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045118_jepiuzjp9'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'module-b'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'module-b'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Activation order calculated: [ [32m'module-a'[39m, [32m'module-b'[39m, [32m'module-c'[39m ]
[ModuleRegistry] Module 'module-c' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Activating module 'module-c'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Directly activating module 'module-c'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Registering 2 subscriptions for module 'module-c'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Module health changed: module-c -> active
[ModuleRegistry] Module 'module-c' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Module 'module-c' activated directly
[EventBus] Module activated: module-c
[EventBus] Auto-registering handlers for module: module-c
[EventBus] Auto-registered 0/2 handlers for module: module-c

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Available handler not found: module-c.handleLowStock
[EventBus] Available handler not found: module-c.handleCustomerUpdate

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Handler 'handleLowStock' not found in registry for module module-c
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045119_otk8das38'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'module-c'[39m
}
[EventBus] Handler 'handleCustomerUpdate' not found in registry for module module-c
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045119_nv490yrrb'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'module-c'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'module-c'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Activation order calculated: [ [32m'module-a'[39m, [32m'module-b'[39m, [32m'module-c'[39m, [32m'module-d'[39m ]
[ModuleRegistry] Module 'module-d' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Activating module 'module-d'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Directly activating module 'module-d'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Registering 2 subscriptions for module 'module-d'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Module health changed: module-d -> active
[ModuleRegistry] Module 'module-d' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Module 'module-d' activated directly
[EventBus] Module activated: module-d
[EventBus] Auto-registering handlers for module: module-d
[EventBus] Auto-registered 0/2 handlers for module: module-d

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Available handler not found: module-d.recordClockIn
[EventBus] Available handler not found: module-d.recordClockOut

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Handler 'recordClockIn' not found in registry for module module-d
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045121_vfo15900y'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'module-d'[39m
}
[EventBus] Handler 'recordClockOut' not found in registry for module module-d
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045121_do6kjb517'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'module-d'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'module-d'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Module 'module-d' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:05) { noncePrefix: [32m'yesh0iil'[39m, timestamp: [32m'1757798045123'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:05)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:05)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:05) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:05) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:05) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:05) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:05) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[TEST-BEFORE] Starting beforeEach setup...
[TEST-BEFORE] Registering inventory module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045125_hs6xzsad9'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045125_8g6ffiz6i'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[TEST-BEFORE] Registering customers module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045127_47w14mrj4'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[TEST-BEFORE] Registering sales module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045128_37x003qsn'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045128_j051vhevt'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[TEST-BEFORE] beforeEach setup completed!

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[TEST] Test started!
[TEST] Setting up simple handler...
[EventBus] Adding subscription to weak subscription manager for pattern: test.simple
[EventBus] Subscription added: test.simple (sub_1757798045130_fy8nmpa29) [moduleId: anonymous]
[TEST] Emitting simple event...

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045130_fy8nmpa29'[39m,
  pattern: [32m'test.simple'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Processing event test.simple: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[TEST] Simple handler called!

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[TEST] Waiting for handler to execute...

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations 119ms
 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully 12ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:05)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:05)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:05) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:05)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:05) { noncePrefix: [32m'gqfxccd3'[39m, timestamp: [32m'1757798045164'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:05)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:05)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:05) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:05) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:05) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:05) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:05) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:05) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[EventBus] Processing event test.offline.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[OfflineIntegration] Queueing event for offline sync: test.offline.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[EventBus] Adding subscription to weak subscription manager for pattern: global.eventbus.network-online
[EventBus] Subscription added: global.eventbus.network-online (sub_1757798045167_jl13jt6w5) [moduleId: anonymous]
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045167_jl13jt6w5'[39m,
  pattern: [32m'global.eventbus.network-online'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[EventBus] Processing event global.eventbus.network-online: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation 116ms
 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains 11ms
stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[TEST] Final handler calls: [ [32m'simple-called'[39m ]

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:05) { noncePrefix: [32m'zmvej11k'[39m, timestamp: [32m'1757798045246'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:05)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:05)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:05) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:05) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:05) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:05) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:05) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[TEST-BEFORE] Starting beforeEach setup...
[TEST-BEFORE] Registering inventory module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045248_0aw7fhuwj'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045248_j98s7j26m'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[TEST-BEFORE] Registering customers module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045250_cupsz1u1t'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[TEST-BEFORE] Registering sales module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045252_kincnir7n'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045252_w4ko90ssq'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[TEST-BEFORE] beforeEach setup completed!

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757798045253_6d1mc77u4) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.check
[EventBus] Subscription added: inventory.stock.check (sub_1757798045253_q2tczz2i3) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.checked
[EventBus] Subscription added: inventory.stock.checked (sub_1757798045253_hobqq77na) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.confirmed
[EventBus] Subscription added: sales.order.confirmed (sub_1757798045253_n03318kl4) [moduleId: anonymous]

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045253_6d1mc77u4'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045253_q2tczz2i3'[39m,
  pattern: [32m'inventory.stock.check'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045253_hobqq77na'[39m,
  pattern: [32m'inventory.stock.checked'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045253_n03318kl4'[39m,
  pattern: [32m'sales.order.confirmed'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[TestCustomers] Updated activity for customer CUST-001

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Processing event inventory.stock.check: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Processing event inventory.stock.checked: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Processing event sales.order.confirmed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition 54ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:05)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:05)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:05) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:05)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:05) { noncePrefix: [32m't8nc4979'[39m, timestamp: [32m'1757798045279'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:05)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:05)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:05) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:05) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:05) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:05) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:05) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:05) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...
[EventBus] Adding subscription to weak subscription manager for pattern: test.offline.processing
[EventBus] Subscription added: test.offline.processing (sub_1757798045281_2ag0g46my) [moduleId: anonymous]

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045281_2ag0g46my'[39m,
  pattern: [32m'test.offline.processing'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[EventBus] Processing event test.offline.processing: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[OfflineIntegration] Queueing event for offline sync: test.offline.processing priority: [33m2[39m

 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers 122ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:05)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:05)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:05) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:05)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:05) { noncePrefix: [32m'ql055ha3'[39m, timestamp: [32m'1757798045346'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:05)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:05)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:05) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:05) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:05) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:05) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:05) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:05) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[EventBus] Processing event sales.order.created: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[OfflineIntegration] Queueing event for offline sync: sales.order.created priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[EventBus] Processing event payments.payment.processed: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[OfflineIntegration] Queueing event for offline sync: payments.payment.processed priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[EventBus] Processing event sales.order.completed: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[OfflineIntegration] Queueing event for offline sync: sales.order.completed priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync 115ms
 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline 66ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:05)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:05)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:05) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:05)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:05) { noncePrefix: [32m'xiggci3z'[39m, timestamp: [32m'1757798045463'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:05)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:05)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:05) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:05) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:05) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:05) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:05) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:05) { isInitialized: [32m'true'[39m }

 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication 219ms
stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:05) { noncePrefix: [32m'lgo3aoo3'[39m, timestamp: [32m'1757798045465'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:05)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:05)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:05) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:05) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:05) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:05) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:05) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[TEST-BEFORE] Starting beforeEach setup...
[TEST-BEFORE] Registering inventory module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045466_cahzzx87g'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045467_qwgu0as2u'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045466_ltxs9n7f7'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045467_0yulhik4u'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[TEST-BEFORE] Registering customers module...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Activating module 'test-customers'...

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045468_kpfqt4lgi'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[TEST-BEFORE] Registering sales module...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Activating module 'test-sales'...

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045468_vbjy77fiz'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045469_d92fa9cao'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045469_yl5od543h'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[TEST-BEFORE] beforeEach setup completed!

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757798045470_b4q6uok2m) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757798045470_mjvgbhhmi) [moduleId: anonymous]

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045470_b4q6uok2m'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045470_mjvgbhhmi'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045470_t6fex6oda'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045470_fh5rghlli'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Processing event sales.order.created: Found 3 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[TestCustomers] Updated activity for customer CUST-VIP-001

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Subscription added: inventory.stock.low (sub_1757798045471_5x2ys84co) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757798045471_pt4v0z4z4) [moduleId: anonymous]
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045471_5x2ys84co'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045471_pt4v0z4z4'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Processing event inventory.stock.low: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[TestSales] Handling low stock for undefined

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Processing event sales.order.created: Found 3 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[TestCustomers] Updated activity for customer CUST-REG-001

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[OfflineIntegration] Queueing event for offline sync: inventory.stock.low priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Processing event sales.order.created: Found 3 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[TestCustomers] Updated activity for customer CUST-VIP-002

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[TestCustomers] Updated activity for customer undefined

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[OfflineIntegration] Queueing event for offline sync: sales.order.created priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection 116ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:05) { noncePrefix: [32m'rvrv96ho'[39m, timestamp: [32m'1757798045625'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:05)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:05)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:05) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:05) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:05) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:05) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:05) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[TEST-BEFORE] Starting beforeEach setup...
[TEST-BEFORE] Registering inventory module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045627_3lq4h6zdk'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045627_3pftg7ryk'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[TEST-BEFORE] Registering customers module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045628_2peysa3uj'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[TEST-BEFORE] Registering sales module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045629_an5rbc0kt'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045629_6h5feysjv'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[TEST-BEFORE] beforeEach setup completed!

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Adding subscription to weak subscription manager for pattern: test.priority.event
[EventBus] Subscription added: test.priority.event (sub_1757798045630_9kfcb3gni) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: test.priority.event
[EventBus] Subscription added: test.priority.event (sub_1757798045631_tjzdjbthy) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: test.priority.event
[EventBus] Subscription added: test.priority.event (sub_1757798045631_ko920w0g3) [moduleId: anonymous]

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045630_9kfcb3gni'[39m,
  pattern: [32m'test.priority.event'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045631_tjzdjbthy'[39m,
  pattern: [32m'test.priority.event'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045631_ko920w0g3'[39m,
  pattern: [32m'test.priority.event'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Processing event test.priority.event: Found 3 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Error unsubscribing sub_1757798045470_t6fex6oda: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798045470_fh5rghlli: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Error unsubscribing sub_1757798045468_vbjy77fiz: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Error unsubscribing sub_1757798045466_ltxs9n7f7: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798045467_0yulhik4u: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:05)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:05)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:05) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:05)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:05) { noncePrefix: [32m'mkbjsd5l'[39m, timestamp: [32m'1757798045642'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:05)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:05)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:05) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:05) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:05) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:05) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:05) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:05) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045643_bdbo6dy3c'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045644_kwny6aaq7'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045645_i26cwdp8o'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045646_rsux3p0gt'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045646_dfl4jklvg'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Error unsubscribing sub_1757798045646_rsux3p0gt: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798045646_dfl4jklvg: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Error unsubscribing sub_1757798045645_i26cwdp8o: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Error unsubscribing sub_1757798045643_bdbo6dy3c: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798045644_kwny6aaq7: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:05)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:05)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:05) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:05)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:05) { noncePrefix: [32m'jirx80dq'[39m, timestamp: [32m'1757798045660'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:05)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:05)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:05) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:05) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:05) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:05) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:05) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:05) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045661_tq9mr6bx1'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045661_0cth0j932'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045663_0ov9wzg1p'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045664_gt26mpnty'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045664_8oacnjsv8'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Error unsubscribing sub_1757798045664_gt26mpnty: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798045664_8oacnjsv8: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Error unsubscribing sub_1757798045663_0ov9wzg1p: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Error unsubscribing sub_1757798045661_tq9mr6bx1: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798045661_0cth0j932: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:05)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:05)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:05) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:05)

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online 179ms
 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods 18ms
 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation 17ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:05) { noncePrefix: [32m'sgqa6214'[39m, timestamp: [32m'1757798045677'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:05)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:05)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:05) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:05) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:05) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:05) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:05) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:05) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Processing event sales.order.created: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] Queueing event for offline sync: sales.order.created priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Processing event inventory.stock.updated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] Queueing event for offline sync: inventory.stock.updated priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Processing event payments.payment.processed: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] Queueing event for offline sync: payments.payment.processed priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Processing event sales.order.completed: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] Queueing event for offline sync: sales.order.completed priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters 160ms
stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:05) { noncePrefix: [32m'10newqk6'[39m, timestamp: [32m'1757798045768'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:05)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:05)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:05) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:05) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:05) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:05) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:05) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045769_zreld6zgn'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045769_04b0n5vfb'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045771_xkg65eeb3'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-customers' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045772_f0iv01eu5'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045772_pduj8xvri'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m, [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045774_3fd7kema0'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045774_y18nbl2qv'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-staff' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Deactivating dependent module 'test-sales' before deactivating 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Error unsubscribing sub_1757798045772_f0iv01eu5: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798045772_pduj8xvri: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Error unsubscribing sub_1757798045769_zreld6zgn: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798045769_04b0n5vfb: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.module-deactivated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:05) { noncePrefix: [32m'f7jlm9p6'[39m, timestamp: [32m'1757798045786'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:05)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:05)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:05) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:05) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:05) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:05) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:05) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045787_6ibzb2av2'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045787_i41sp7c6n'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045789_74ypupsbc'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Module 'test-customers' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045790_jlpx6m4cy'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045790_sss86uj2j'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m, [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045791_xan6e0weq'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045792_hslfmrqsg'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Module 'test-staff' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Adding subscription to weak subscription manager for pattern: global.eventbus.module-deactivated
[EventBus] Subscription added: global.eventbus.module-deactivated (sub_1757798045793_po0uudxlf) [moduleId: anonymous]

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045793_po0uudxlf'[39m,
  pattern: [32m'global.eventbus.module-deactivated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Deactivating module 'test-staff'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-staff'

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Error unsubscribing sub_1757798045791_xan6e0weq: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798045792_hslfmrqsg: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[TestStaffModule] Deactivating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Module 'test-staff' deactivated successfully
[EventBus] Module deactivated: test-staff

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.module-deactivated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:05)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:05)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:05) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:05)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:05) { noncePrefix: [32m'5bzlwwtd'[39m, timestamp: [32m'1757798045846'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:05)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:05)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:05) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:05) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:05) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:05) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:05) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:05) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[EventBus] Processing event inventory.stock.updated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[OfflineIntegration] Queueing event for offline sync: inventory.stock.updated priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[EventBus] Processing event inventory.stock.low: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[OfflineIntegration] Queueing event for offline sync: inventory.stock.low priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[EventBus] Processing event inventory.restock.requested: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[OfflineIntegration] Queueing event for offline sync: inventory.restock.requested priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities 143ms
 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order 18ms
 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events 76ms
stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:05) { noncePrefix: [32m'ja6m4c4a'[39m, timestamp: [32m'1757798045862'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:05)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:05)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:05) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:05) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:05) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:05) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:05) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045863_q4x6ry9gd'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045863_acdhl6xvp'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045870_du66ecyx8'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Module 'test-customers' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045872_ktifnecpw'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045872_4jboldhna'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m, [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045873_a5erewsk0'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045873_qrufn6128'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Module 'test-staff' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Subscription added: staff.clock.in (sub_1757798045874_r9ouej6kv) [moduleId: anonymous]

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045874_r9ouej6kv'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Deactivating module 'test-staff'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-staff'

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Error unsubscribing sub_1757798045873_a5erewsk0: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798045873_qrufn6128: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[TestStaffModule] Deactivating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Module 'test-staff' deactivated successfully
[EventBus] Module deactivated: test-staff

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.module-deactivated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event staff.clock.in: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Subscription removed: staff.clock.in (sub_1757798045874_r9ouej6kv)

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:05) { noncePrefix: [32m'4wu5osjn'[39m, timestamp: [32m'1757798045930'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:05)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:05)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:05) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:05) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:05) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:05) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:05) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045931_e3hhpukwg'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045931_eoogxsf0n'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045932_6901vioyx'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-customers' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045934_d1n2moepq'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045934_f0fxu131g'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m, [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045935_rn47bek5p'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045935_r5cbns0i5'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-staff' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Deactivating module 'test-staff'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-staff'

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Error unsubscribing sub_1757798045935_rn47bek5p: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798045935_r5cbns0i5: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[TestStaffModule] Deactivating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-staff' deactivated successfully
[EventBus] Module deactivated: test-staff

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Error unsubscribing sub_1757798045934_d1n2moepq: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798045934_f0fxu131g: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Error unsubscribing sub_1757798045932_6901vioyx: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync 169ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:05)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:05)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:05) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:05)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:05) { noncePrefix: [32m'jhggwzcy'[39m, timestamp: [32m'1757798045951'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:05)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:05)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Error unsubscribing sub_1757798045931_e3hhpukwg: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798045931_eoogxsf0n: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:05) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:05) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:05) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:05) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:05) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:05) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:05)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:05)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:05)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:05) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:05)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[EventBus] Processing event staff.clock.in: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[OfflineIntegration] Queueing event for offline sync: staff.clock.in priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:05) { noncePrefix: [32m'3ifxxtfm'[39m, timestamp: [32m'1757798045953'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:05)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:05)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:05) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:05) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:05) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:05) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:05) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[EventBus] Processing event staff.break.started: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[OfflineIntegration] Queueing event for offline sync: staff.break.started priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[EventBus] Processing event staff.clock.out: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:05) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[OfflineIntegration] Queueing event for offline sync: staff.clock.out priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045955_njqnq0wgk'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045955_2atdb2uf6'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045957_cc46kaq7n'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.metrics: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST] Metrics event received: {
  uptime: [33m1005[39m,
  totalEvents: [33m7[39m,
  eventsPerSecond: [33m0.11666666666666667[39m,
  activeModules: [33m4[39m,
  activeSubscriptions: [33m8[39m,
  queueSize: [33m0[39m,
  errorRate: [33m0[39m,
  avgLatencyMs: [33m0.140625[39m,
  memoryUsageMB: [33m0.008[39m,
  modules: {},
  eventPatterns: {
    [32m'global.eventbus.initialized'[39m: {
      totalEvents: [33m1[39m,
      avgLatencyMs: [33m1[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    },
    [32m'global.eventbus.module-registered'[39m: {
      totalEvents: [33m4[39m,
      avgLatencyMs: [33m0.5[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    },
    [32m'global.eventbus.module-activated'[39m: {
      totalEvents: [33m2[39m,
      avgLatencyMs: [33m0[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    }
  }
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045960_hq98zcbh8'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045960_p3ttnrhla'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m, [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045961_67pyq79v8'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045961_qn6e2v7ez'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ÑπÔ∏è [EventBus] Module registered (06:14:05) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Module 'test-staff' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757798045963_ee19w5122) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.checked
[EventBus] Subscription added: inventory.stock.checked (sub_1757798045963_mty2zatio) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: staff.notified
[EventBus] Subscription added: staff.notified (sub_1757798045963_tgywnjb3m) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.order.received
[EventBus] Subscription added: kitchen.order.received (sub_1757798045963_h8boe3kc8) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: payments.payment.requested
[EventBus] Subscription added: payments.payment.requested (sub_1757798045963_4wt8x340i) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: payments.payment.completed
[EventBus] Subscription added: payments.payment.completed (sub_1757798045963_ezynfpdvk) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.order.completed
[EventBus] Subscription added: kitchen.order.completed (sub_1757798045963_l622oppe1) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Subscription added: sales.order.completed (sub_1757798045964_ei9nxcn8v) [moduleId: anonymous]

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045963_ee19w5122'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045963_mty2zatio'[39m,
  pattern: [32m'inventory.stock.checked'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045963_tgywnjb3m'[39m,
  pattern: [32m'staff.notified'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045963_h8boe3kc8'[39m,
  pattern: [32m'kitchen.order.received'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045963_4wt8x340i'[39m,
  pattern: [32m'payments.payment.requested'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045963_ezynfpdvk'[39m,
  pattern: [32m'payments.payment.completed'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045963_l622oppe1'[39m,
  pattern: [32m'kitchen.order.completed'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:05) {
  subscriptionId: [32m'sub_1757798045964_ei9nxcn8v'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[TestCustomers] Updated activity for customer CUST-VIP-001

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event inventory.stock.checked: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event staff.notified: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event payments.payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event sales.order.completed: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[TestInventory] Updating stock for order ORD-001

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync 105ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:06)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:06)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:06)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:06)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:06)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:06) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:06)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:06) { noncePrefix: [32m'et58agjf'[39m, timestamp: [32m'1757798046056'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:06)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:06)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:06) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:06) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:06) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[EventBus] Processing event test.sync.retry: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[OfflineIntegration] Queueing event for offline sync: test.sync.retry priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
Auto-sync failed: Error: Sync failed (attempt 1)
    at MockOfflineSync.<anonymous> [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\integration\offline-integration.test.ts:539:17[90m)[39m
    at MockOfflineSync.mockCall [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+spy@3.2.4/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at MockOfflineSync.syncPendingOperations [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/tinyspy@4.0.3/node_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at MockOfflineSync.autoSync [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\integration\offline-integration.test.ts:61:18[90m)[39m
    at MockOfflineSync.setOnline [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\integration\offline-integration.test.ts:51:12[90m)[39m
    at [90mI:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\integration\offline-integration.test.ts:553:23
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[OfflineIntegration] Auto-triggering sync with [33m1[39m queued operations...

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[OfflineIntegration] Auto-sync failed: Error: Sync failed (attempt 2)
    at MockOfflineSync.<anonymous> [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\integration\offline-integration.test.ts:539:17[90m)[39m
    at MockOfflineSync.mockCall [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+spy@3.2.4/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at MockOfflineSync.syncPendingOperations [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/tinyspy@4.0.3/node_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at [90mI:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\integration\offline-integration.test.ts:181:33

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync 105ms
 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation 68ms
 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules 24ms
 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow 240ms
stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:06) { noncePrefix: [32m'3jxkrvi5'[39m, timestamp: [32m'1757798046193'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:06)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:06)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:06) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:06) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:06) {
  subscriptionId: [32m'sub_1757798046195_6b6a4046c'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:06) {
  subscriptionId: [32m'sub_1757798046195_go82uwlce'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
‚ÑπÔ∏è [EventBus] Module registered (06:14:06) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:06) {
  subscriptionId: [32m'sub_1757798046197_4ob1e8lge'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
‚ÑπÔ∏è [EventBus] Module registered (06:14:06) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:06) {
  subscriptionId: [32m'sub_1757798046198_3rhzgo1mp'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:06) {
  subscriptionId: [32m'sub_1757798046198_j5mca4n61'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
‚ÑπÔ∏è [EventBus] Module registered (06:14:06) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-0

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-1

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-2

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-3

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-4

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-5

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-6

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-7

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-8

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-9

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-0

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-1

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-2

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-3

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-4

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-5

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-6

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-7

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-8

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-9

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-0

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-1

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-2

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-3

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-4

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-5

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-6

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-7

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-8

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-9

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-0

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-1

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-2

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-3

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-4

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-5

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-6

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-7

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-8

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-9

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-0

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-1

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-2

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-3

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-4

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-5

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-6

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-7

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-8

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-9

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:06) { noncePrefix: [32m'rdslesv8'[39m, timestamp: [32m'1757798046224'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:06)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:06)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:06) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:06) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:06) {
  subscriptionId: [32m'sub_1757798046225_f5o92u3fb'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:06) {
  subscriptionId: [32m'sub_1757798046225_bclk7eqbx'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
‚ÑπÔ∏è [EventBus] Module registered (06:14:06) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:06) {
  subscriptionId: [32m'sub_1757798046226_g3zdleioz'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
‚ÑπÔ∏è [EventBus] Module registered (06:14:06) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:06) {
  subscriptionId: [32m'sub_1757798046227_dhp7ypq7w'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:06) {
  subscriptionId: [32m'sub_1757798046227_st96tsskq'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
‚ÑπÔ∏è [EventBus] Module registered (06:14:06) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757798046228_69md3g1nh) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757798046228_l6qkac2cc) [moduleId: anonymous]

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:06) {
  subscriptionId: [32m'sub_1757798046228_69md3g1nh'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:06) {
  subscriptionId: [32m'sub_1757798046228_l6qkac2cc'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[TestCustomers] Updated activity for customer undefined

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[TestCustomers] Updated activity for customer undefined

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[TestCustomers] Updated activity for customer undefined

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:06)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:06)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:06)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:06)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:06)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:06) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:06)

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:06) { noncePrefix: [32m't3axsli5'[39m, timestamp: [32m'1757798046261'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:06)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:06)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:06) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:06) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:06) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[EventBus] Processing event sales.order.created: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[OfflineIntegration] Queueing event for offline sync: sales.order.created priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[EventBus] Processing event sales.order.created: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[OfflineIntegration] Queueing event for offline sync: sales.order.created priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[EventBus] Processing event sales.order.created: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[OfflineIntegration] Queueing event for offline sync: sales.order.created priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[OfflineIntegration] Auto-triggering sync with [33m1[39m queued operations...

 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios 30ms
 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry 206ms
 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions 256ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:06)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:06)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:06)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:06)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:06)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:06) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:06)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:06) { noncePrefix: [32m'6cw9ukqm'[39m, timestamp: [32m'1757798046480'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:06)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:06)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:06) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:06) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:06) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Processing event test.order.1: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[OfflineIntegration] Queueing event for offline sync: test.order.1 priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Processing event test.order.2: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[OfflineIntegration] Queueing event for offline sync: test.order.2 priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Processing event test.order.3: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[OfflineIntegration] Queueing event for offline sync: test.order.3 priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Processing event test.order.4: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[OfflineIntegration] Queueing event for offline sync: test.order.4 priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures 219ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:06)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:06)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:06)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:06)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:06)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:06) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:06)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:06) { noncePrefix: [32m'7cwu9vyh'[39m, timestamp: [32m'1757798046597'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:06)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:06)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:06) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:06) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:06) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync 117ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:06)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:06)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:06)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:06)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:06)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:06) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:06)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:06) { noncePrefix: [32m'qiah7taz'[39m, timestamp: [32m'1757798046831'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:06)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:06)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:06) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:06) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:06) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing 234ms
stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.metrics: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST] Metrics event received: {
  uptime: [33m2009[39m,
  totalEvents: [33m8[39m,
  eventsPerSecond: [33m0.13333333333333333[39m,
  activeModules: [33m4[39m,
  activeSubscriptions: [33m8[39m,
  queueSize: [33m0[39m,
  errorRate: [33m0[39m,
  avgLatencyMs: [33m0.5703125[39m,
  memoryUsageMB: [33m0.008[39m,
  modules: {},
  eventPatterns: {
    [32m'global.eventbus.initialized'[39m: {
      totalEvents: [33m1[39m,
      avgLatencyMs: [33m1[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    },
    [32m'global.eventbus.module-registered'[39m: {
      totalEvents: [33m4[39m,
      avgLatencyMs: [33m0.5[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    },
    [32m'global.eventbus.module-activated'[39m: {
      totalEvents: [33m2[39m,
      avgLatencyMs: [33m0[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    },
    [32m'global.eventbus.metrics'[39m: {
      totalEvents: [33m1[39m,
      avgLatencyMs: [33m0.5[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    }
  }
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:06)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:06)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:06)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:06)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:06)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:06) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:06)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:06) { noncePrefix: [32m'32yp1w3q'[39m, timestamp: [32m'1757798046996'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:06)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:06)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:06) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:06) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:06) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[EventBus] Processing event test.large.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[OfflineIntegration] Queueing event for offline sync: test.large.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations 166ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:07)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:07)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:07)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:07)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:07)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:07) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:07)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[EventBus] Graceful shutdown completed

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline 116ms
stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.metrics: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST] Metrics event received: {
  uptime: [33m3010[39m,
  totalEvents: [33m9[39m,
  eventsPerSecond: [33m0.15[39m,
  activeModules: [33m4[39m,
  activeSubscriptions: [33m8[39m,
  queueSize: [33m0[39m,
  errorRate: [33m0[39m,
  avgLatencyMs: [33m0.78515625[39m,
  memoryUsageMB: [33m0.008[39m,
  modules: {},
  eventPatterns: {
    [32m'global.eventbus.initialized'[39m: {
      totalEvents: [33m1[39m,
      avgLatencyMs: [33m1[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    },
    [32m'global.eventbus.module-registered'[39m: {
      totalEvents: [33m4[39m,
      avgLatencyMs: [33m0.5[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    },
    [32m'global.eventbus.module-activated'[39m: {
      totalEvents: [33m2[39m,
      avgLatencyMs: [33m0[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    },
    [32m'global.eventbus.metrics'[39m: {
      totalEvents: [33m2[39m,
      avgLatencyMs: [33m0.75[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    }
  }
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST] Health events received: [33m3[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Module health changed: test-kitchen-failing -> active
[ModuleRegistry] Module 'test-kitchen-failing' health changed: error -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST-AFTER] Cleaning up health monitoring tests...
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Deactivating module 'test-kitchen-failing'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-kitchen-failing'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Error unsubscribing sub_1757798044971_swwxj7axq: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[TestKitchenModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Module 'test-kitchen-failing' deactivated successfully
[EventBus] Module deactivated: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Error unsubscribing sub_1757798044968_9h4s1yk1y: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798044968_g9jglgn7q: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Error unsubscribing sub_1757798044966_xkzxbpkkv: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Error unsubscribing sub_1757798044963_6mb333ca0: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798044963_8kgfdshns: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:08)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:08)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:08)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:08)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:08)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:08) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:08)

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[HEALTH-TEST-BEFORE] Starting health monitoring test setup...
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:08) { noncePrefix: [32m'3fw9xxrv'[39m, timestamp: [32m'1757798048005'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:08)

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:08) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:08) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (06:14:08) {
  keyVersion: [32m'key_1757798048005_66zocqqy'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (06:14:08) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:08) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: **
[EventBus] Subscription added: ** (sub_1757798048007_eo75law14) [moduleId: anonymous]
[HEALTH-TEST-BEFORE] Health monitoring test setup completed! ‚úÖ

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:08) {
  subscriptionId: [32m'sub_1757798048007_eo75law14'[39m,
  pattern: [32m'**'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:08) {
  subscriptionId: [32m'sub_1757798048008_8ygwqkx5d'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:08) {
  subscriptionId: [32m'sub_1757798048008_j5f1dq1ke'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ÑπÔ∏è [EventBus] Module registered (06:14:08) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[HEALTH-TEST] Successfully registered module: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:08) {
  subscriptionId: [32m'sub_1757798048010_lg9a9u79o'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ÑπÔ∏è [EventBus] Module registered (06:14:08) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[HEALTH-TEST] Successfully registered module: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:08) {
  subscriptionId: [32m'sub_1757798048011_0nw5hvpp1'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:08) {
  subscriptionId: [32m'sub_1757798048011_22ijly247'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ÑπÔ∏è [EventBus] Module registered (06:14:08) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[HEALTH-TEST] Successfully registered module: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Activation order calculated: [
  [32m'test-inventory'[39m,
  [32m'test-customers'[39m,
  [32m'test-sales'[39m,
  [32m'test-kitchen-failing'[39m
]
[ModuleRegistry] Module 'test-kitchen-failing' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Activating module 'test-kitchen-failing'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Directly activating module 'test-kitchen-failing'...
[TestKitchenModule] Attempting activation...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Registering 1 subscriptions for module 'test-kitchen-failing'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Module health changed: test-kitchen-failing -> active
[ModuleRegistry] Module 'test-kitchen-failing' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Module 'test-kitchen-failing' activated directly
[EventBus] Module activated: test-kitchen-failing
[EventBus] Auto-registering handlers for module: test-kitchen-failing
[EventBus] Auto-registered handler: test-kitchen-failing.processOrder for pattern: orders.new
[EventBus] Auto-registered 1/1 handlers for module: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: orders.new

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:08) {
  subscriptionId: [32m'sub_1757798048013_k3gttls6d'[39m,
  pattern: [32m'orders.new'[39m,
  moduleId: [32m'test-kitchen-failing'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ÑπÔ∏è [EventBus] Module registered (06:14:08) {
  moduleId: [32m'test-kitchen-failing'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Kitchen Module (Failing)'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[HEALTH-TEST] Successfully registered module: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: global.eventbus.module-recovered
[EventBus] Subscription added: global.eventbus.module-recovered (sub_1757798048014_6nb3pvh17) [moduleId: anonymous]
[ModuleRegistry] Module 'test-kitchen-failing' is already active

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:08) {
  subscriptionId: [32m'sub_1757798048014_6nb3pvh17'[39m,
  pattern: [32m'global.eventbus.module-recovered'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Processing event global.eventbus.module-activated: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health 3052ms
stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Processing event global.eventbus.metrics: Found 1 matching subscriptions

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (06:14:09) {
  handlerId: [32m'sub_1757798044960_qbc1eqhpx'[39m,
  pattern: [32m'global.eventbus.module-registered'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757798044963_771237f7-90d5-4439-9007-65f90f406565'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (06:14:09) {
  handlerId: [32m'sub_1757798044960_qbc1eqhpx'[39m,
  pattern: [32m'global.eventbus.module-registered'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757798044966_252d75c3-63d6-4ad2-b930-da140ad52748'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (06:14:09) {
  handlerId: [32m'sub_1757798044960_qbc1eqhpx'[39m,
  pattern: [32m'global.eventbus.module-registered'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757798044969_fde311a8-5af7-4b6b-adff-bae079356a6b'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (06:14:09) {
  handlerId: [32m'sub_1757798044960_qbc1eqhpx'[39m,
  pattern: [32m'global.eventbus.module-registered'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757798044972_74340145-a158-4d10-a597-ddf74c0f555f'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (06:14:09) {
  handlerId: [32m'sub_1757798044960_qbc1eqhpx'[39m,
  pattern: [32m'global.eventbus.module-activated'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757798044974_8636df07-3deb-4dca-8117-0ae08bba43ff'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (06:14:09) {
  handlerId: [32m'sub_1757798044960_qbc1eqhpx'[39m,
  pattern: [32m'global.eventbus.module-activated'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757798044975_c4f22301-d5b7-4997-9df0-98905a11032e'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[HEALTH-TEST] Final module status: active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[HEALTH-TEST-AFTER] Cleaning up health monitoring tests...
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Deactivating module 'test-kitchen-failing'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-kitchen-failing'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Error unsubscribing sub_1757798048013_k3gttls6d: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[TestKitchenModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Module 'test-kitchen-failing' deactivated successfully
[EventBus] Module deactivated: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Error unsubscribing sub_1757798048011_0nw5hvpp1: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798048011_22ijly247: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Error unsubscribing sub_1757798048010_lg9a9u79o: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Error unsubscribing sub_1757798048008_8ygwqkx5d: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798048008_j5f1dq1ke: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:10)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:10)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:10)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:10)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:10)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:10) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:10)

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[HEALTH-TEST-BEFORE] Starting health monitoring test setup...
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:10) { noncePrefix: [32m'kiz4e81s'[39m, timestamp: [32m'1757798050043'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:10)

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:10) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:10) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:10) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:10) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:10) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Processing event global.eventbus.metrics: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (06:14:10) {
  keyVersion: [32m'key_1757798050043_7b8mnoji'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (06:14:10) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:10) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Adding subscription to weak subscription manager for pattern: **
[EventBus] Subscription added: ** (sub_1757798050045_ri9ewo9f6) [moduleId: anonymous]
[HEALTH-TEST-BEFORE] Health monitoring test setup completed! ‚úÖ

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:10) {
  subscriptionId: [32m'sub_1757798050045_ri9ewo9f6'[39m,
  pattern: [32m'**'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:10) {
  subscriptionId: [32m'sub_1757798050047_ezvc6asra'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:10) {
  subscriptionId: [32m'sub_1757798050047_xd06gh26w'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ÑπÔ∏è [EventBus] Module registered (06:14:10) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[HEALTH-TEST] Successfully registered module: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:10) {
  subscriptionId: [32m'sub_1757798050049_3fm4v8hk9'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ÑπÔ∏è [EventBus] Module registered (06:14:10) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[HEALTH-TEST] Successfully registered module: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:10) {
  subscriptionId: [32m'sub_1757798050050_goe4xoxjw'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:10) {
  subscriptionId: [32m'sub_1757798050050_dl0v9n7h1'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ÑπÔ∏è [EventBus] Module registered (06:14:10) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[HEALTH-TEST] Successfully registered module: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Activation order calculated: [
  [32m'test-inventory'[39m,
  [32m'test-customers'[39m,
  [32m'test-sales'[39m,
  [32m'test-kitchen-failing'[39m
]
[ModuleRegistry] Module 'test-kitchen-failing' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Activating module 'test-kitchen-failing'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Directly activating module 'test-kitchen-failing'...
[TestKitchenModule] Attempting activation...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Registering 1 subscriptions for module 'test-kitchen-failing'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Module health changed: test-kitchen-failing -> active
[ModuleRegistry] Module 'test-kitchen-failing' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-kitchen-failing' activated directly
[EventBus] Module activated: test-kitchen-failing
[EventBus] Auto-registering handlers for module: test-kitchen-failing
[EventBus] Auto-registered handler: test-kitchen-failing.processOrder for pattern: orders.new
[EventBus] Auto-registered 1/1 handlers for module: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Adding subscription to weak subscription manager for pattern: orders.new

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:10) {
  subscriptionId: [32m'sub_1757798050052_uc9gwwe5e'[39m,
  pattern: [32m'orders.new'[39m,
  moduleId: [32m'test-kitchen-failing'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ÑπÔ∏è [EventBus] Module registered (06:14:10) {
  moduleId: [32m'test-kitchen-failing'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Kitchen Module (Failing)'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[HEALTH-TEST] Successfully registered module: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Processing event global.eventbus.module-activated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-kitchen-failing' is already active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Processing event global.eventbus.module-activated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[HEALTH-TEST-AFTER] Cleaning up health monitoring tests...
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Deactivating module 'test-kitchen-failing'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-kitchen-failing'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Error unsubscribing sub_1757798050052_uc9gwwe5e: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[TestKitchenModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-kitchen-failing' deactivated successfully
[EventBus] Module deactivated: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Error unsubscribing sub_1757798050050_goe4xoxjw: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798050050_dl0v9n7h1: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Error unsubscribing sub_1757798050049_3fm4v8hk9: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Error unsubscribing sub_1757798050047_ezvc6asra: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798050047_xd06gh26w: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:10)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:10)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:10)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:10)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:10)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:10) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:10)

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[HEALTH-TEST-BEFORE] Starting health monitoring test setup...
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:10) { noncePrefix: [32m'woeytnjj'[39m, timestamp: [32m'1757798050068'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:10)

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:10) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:10) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:10) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:10) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:10) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (06:14:10) {
  keyVersion: [32m'key_1757798050068_92p7zglf'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (06:14:10) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:10) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Adding subscription to weak subscription manager for pattern: **
[EventBus] Subscription added: ** (sub_1757798050071_9g5ys1a9c) [moduleId: anonymous]
[HEALTH-TEST-BEFORE] Health monitoring test setup completed! ‚úÖ

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:10) {
  subscriptionId: [32m'sub_1757798050071_9g5ys1a9c'[39m,
  pattern: [32m'**'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:10) {
  subscriptionId: [32m'sub_1757798050072_lkbkbeahp'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:10) {
  subscriptionId: [32m'sub_1757798050072_t16dquus0'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ÑπÔ∏è [EventBus] Module registered (06:14:10) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[HEALTH-TEST] Successfully registered module: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:10) {
  subscriptionId: [32m'sub_1757798050073_5jbeyss12'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ÑπÔ∏è [EventBus] Module registered (06:14:10) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[HEALTH-TEST] Successfully registered module: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:10) {
  subscriptionId: [32m'sub_1757798050074_n8ryay3rc'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:10) {
  subscriptionId: [32m'sub_1757798050074_w7a671zx7'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ÑπÔ∏è [EventBus] Module registered (06:14:10) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[HEALTH-TEST] Successfully registered module: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Activation order calculated: [
  [32m'test-inventory'[39m,
  [32m'test-customers'[39m,
  [32m'test-sales'[39m,
  [32m'test-kitchen-failing'[39m
]
[ModuleRegistry] Module 'test-kitchen-failing' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Activating module 'test-kitchen-failing'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Directly activating module 'test-kitchen-failing'...
[TestKitchenModule] Attempting activation...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Registering 1 subscriptions for module 'test-kitchen-failing'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Module health changed: test-kitchen-failing -> active
[ModuleRegistry] Module 'test-kitchen-failing' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Module 'test-kitchen-failing' activated directly
[EventBus] Module activated: test-kitchen-failing
[EventBus] Auto-registering handlers for module: test-kitchen-failing
[EventBus] Auto-registered handler: test-kitchen-failing.processOrder for pattern: orders.new
[EventBus] Auto-registered 1/1 handlers for module: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Adding subscription to weak subscription manager for pattern: orders.new

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:10) {
  subscriptionId: [32m'sub_1757798050075_jgn19hlkv'[39m,
  pattern: [32m'orders.new'[39m,
  moduleId: [32m'test-kitchen-failing'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ÑπÔ∏è [EventBus] Module registered (06:14:10) {
  moduleId: [32m'test-kitchen-failing'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Kitchen Module (Failing)'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[HEALTH-TEST] Successfully registered module: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event global.eventbus.module-activated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[HEALTH-TEST] Generating activity for metrics...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios 2038ms
 ‚úì src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones 25ms
stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (06:14:10) {
  handlerId: [32m'sub_1757798044973_km5t1smlu'[39m,
  pattern: [32m'global.eventbus.metrics'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757798045958_e4c7fa4e-02a7-4df7-b804-c501d6f498bd'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (06:14:10) {
  handlerId: [32m'sub_1757798044960_qbc1eqhpx'[39m,
  pattern: [32m'global.eventbus.metrics'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757798045958_e4c7fa4e-02a7-4df7-b804-c501d6f498bd'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event global.eventbus.metrics: Found 1 matching subscriptions

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (06:14:11) {
  handlerId: [32m'sub_1757798044973_km5t1smlu'[39m,
  pattern: [32m'global.eventbus.metrics'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757798046962_7f495b8b-2c77-45ce-b40c-353d055eca36'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (06:14:11) {
  handlerId: [32m'sub_1757798044960_qbc1eqhpx'[39m,
  pattern: [32m'global.eventbus.metrics'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757798046962_7f495b8b-2c77-45ce-b40c-353d055eca36'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[HEALTH-TEST] Health metrics: {
  eventsProcessed: [33m45[39m,
  eventsEmitted: [33m43[39m,
  errorRate: [33m0.7845260667579323[39m,
  avgProcessingTimeMs: [33m40.407432031735844[39m,
  queueSize: [33m0[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[HEALTH-TEST-AFTER] Cleaning up health monitoring tests...
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Deactivating module 'test-kitchen-failing'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-kitchen-failing'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Error unsubscribing sub_1757798050075_jgn19hlkv: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[TestKitchenModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Module 'test-kitchen-failing' deactivated successfully
[EventBus] Module deactivated: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Error unsubscribing sub_1757798050074_n8ryay3rc: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798050074_w7a671zx7: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Error unsubscribing sub_1757798050073_5jbeyss12: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Error unsubscribing sub_1757798050072_lkbkbeahp: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798050072_t16dquus0: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:12)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:12)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:12)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:12)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:12)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:12) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:12)

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts
[EventBus] Processing event global.eventbus.metrics: Found 0 matching subscriptions

 ‚úì src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics 2037ms

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ Failed Tests 2 ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ

 FAIL  src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should prevent duplicate instance IDs
AssertionError: expected [Function] to throw error including 'Instance \'duplicate-test\' already e‚Ä¶' but got 'this.sanitizeData is not a function'

Expected: [32m"Instance 'duplicate-test' already exists"[39m
Received: [31m"this.sanitizeData is not a function"[39m

 ‚ùØ src/lib/events/__tests__/integration/EventBusFactory.test.ts:43:10
     41|       expect(() => {
     42|         factory.createInstance({ instanceId: 'duplicate-test' });
     43|       }).toThrow('Instance \'duplicate-test\' already exists');
       |          ^
     44|     });
     45| 

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[1/2]‚éØ

 FAIL  src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
EventBusError: Failed to activate module 'test-kitchen-failing': Kitchen equipment not responding
 ‚ùØ ModuleRegistry.activateModule src/lib/events/ModuleRegistry.ts:176:13
    174|       });
    175|       
    176|       throw new EventBusError(
       |             ^
    177|         `Failed to activate module '${moduleId}': ${error.message}`,
    178|         EventBusErrorCode.MODULE_ACTIVATION_FAILED,
 ‚ùØ ModuleRegistry.registerModule src/lib/events/ModuleRegistry.ts:125:7
 ‚ùØ EventBus.registerModule src/lib/events/EventBus.ts:323:5
 ‚ùØ src/lib/events/__tests__/integration/module-lifecycle.test.ts:88:7

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ
Serialized Error: { code: undefined, context: { moduleId: 'test-kitchen-failing', originalError: { stack: 'Error: Kitchen equipment not responding\n    at Object.onActivate (I:\Programacion\Proyectos\g-mini\src\lib\events\__tests__\helpers\test-modules.ts:264:13)\n    at ModuleRegistry.activateModuleDirectly (I:\Programacion\Proyectos\g-mini\src\lib\events\ModuleRegistry.ts:531:33)\n    at ModuleRegistry.activateModule (I:\Programacion\Proyectos\g-mini\src\lib\events\ModuleRegistry.ts:159:18)\n    at ModuleRegistry.registerModule (I:\Programacion\Proyectos\g-mini\src\lib\events\ModuleRegistry.ts:125:7)\n    at EventBus.registerModule (I:\Programacion\Proyectos\g-mini\src\lib\events\EventBus.ts:323:5)\n    at I:\Programacion\Proyectos\g-mini\src\lib\events\__tests__\integration\module-lifecycle.test.ts:88:7\n    at file:///I:/Programacion/Proyectos/g-mini/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20', message: 'Kitchen equipment not responding', constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } } }
‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[2/2]‚éØ


 Test Files  2 failed | 2 passed (4)
      Tests  2 failed | 59 passed (61)
   Start at  18:14:01
   Duration  10.16s (transform 627ms, setup 1.22s, collect 1.74s, tests 10.95s, environment 6.45s, prepare 948ms)

