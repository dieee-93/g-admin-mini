
 RUN  v3.2.4 I:/Programacion/Proyectos/g-mini

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should create unique isolated instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704852_qlajecwzf'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should create unique isolated instances
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'test-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704852_qlajecwzf'[39m,
  instanceId: [32m'test-1'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704852_qlajecwzf'[39m,
  instanceId: [32m'test-1'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'test-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704852_qlajecwzf'[39m,
  instanceId: [32m'test-2'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704852_qlajecwzf'[39m,
  instanceId: [32m'test-2'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'2'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should create unique isolated instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704852_qlajecwzf'[39m,
  instancesToDestroy: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'test-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'test-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'test-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'test-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704852_qlajecwzf'[39m,
  instanceId: [32m'test-1'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704852_qlajecwzf'[39m,
  instanceId: [32m'test-2'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should create unique isolated instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704852_qlajecwzf'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should prevent duplicate instance IDs
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704892_q3hsgrh81'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should prevent duplicate instance IDs
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'duplicate-test'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704892_q3hsgrh81'[39m,
  instanceId: [32m'duplicate-test'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704892_q3hsgrh81'[39m,
  instanceId: [32m'duplicate-test'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] THREAT: Attempted to create duplicate instance (05:01:44) {
  factoryId: [32m'factory_1757793704892_q3hsgrh81'[39m,
  instanceId: [32m'duplicate-test'[39m,
  existingInstances: [ [32m'duplicate-test'[39m ]
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should prevent duplicate instance IDs
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704892_q3hsgrh81'[39m,
  instancesToDestroy: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'duplicate-test'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'duplicate-test'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should prevent duplicate instance IDs
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704892_q3hsgrh81'[39m,
  instanceId: [32m'duplicate-test'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should prevent duplicate instance IDs
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704892_q3hsgrh81'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should retrieve existing instances by ID
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704897_ik0d5l7zi'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should retrieve existing instances by ID
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'retrieve-test'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704897_ik0d5l7zi'[39m,
  instanceId: [32m'retrieve-test'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704897_ik0d5l7zi'[39m,
  instanceId: [32m'retrieve-test'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should retrieve existing instances by ID
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704897_ik0d5l7zi'[39m,
  instancesToDestroy: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'retrieve-test'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'retrieve-test'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should retrieve existing instances by ID
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704897_ik0d5l7zi'[39m,
  instanceId: [32m'retrieve-test'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should retrieve existing instances by ID
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704897_ik0d5l7zi'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should return null for non-existent instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704900_6pmytqqbu'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should return null for non-existent instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704900_6pmytqqbu'[39m,
  instancesToDestroy: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should return null for non-existent instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704900_6pmytqqbu'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should track instance metadata correctly
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704901_nkeoy978u'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should track instance metadata correctly
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'metadata-test'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704901_nkeoy978u'[39m,
  instanceId: [32m'metadata-test'[39m,
  namespace: [32m'test-namespace'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704901_nkeoy978u'[39m,
  instanceId: [32m'metadata-test'[39m,
  namespace: [32m'test-namespace'[39m,
  totalInstances: [32m'1'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should track instance metadata correctly
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704901_nkeoy978u'[39m,
  instancesToDestroy: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'metadata-test'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'metadata-test'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should track instance metadata correctly
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704901_nkeoy978u'[39m,
  instanceId: [32m'metadata-test'[39m,
  namespace: [32m'test-namespace'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should track instance metadata correctly
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704901_nkeoy978u'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should destroy instances properly
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704904_2l072hws2'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should destroy instances properly
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'destroy-test'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704904_2l072hws2'[39m,
  instanceId: [32m'destroy-test'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704904_2l072hws2'[39m,
  instanceId: [32m'destroy-test'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'destroy-test'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'destroy-test'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should destroy instances properly
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704904_2l072hws2'[39m,
  instanceId: [32m'destroy-test'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should destroy instances properly
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704904_2l072hws2'[39m,
  instancesToDestroy: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should destroy instances properly
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704904_2l072hws2'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should pause and resume instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704907_d22jp4faz'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should pause and resume instances
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'pause-test'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704907_d22jp4faz'[39m,
  instanceId: [32m'pause-test'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704907_d22jp4faz'[39m,
  instanceId: [32m'pause-test'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance paused (05:01:44) {
  factoryId: [32m'factory_1757793704907_d22jp4faz'[39m,
  instanceId: [32m'pause-test'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance resumed (05:01:44) {
  factoryId: [32m'factory_1757793704907_d22jp4faz'[39m,
  instanceId: [32m'pause-test'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should pause and resume instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704907_d22jp4faz'[39m,
  instancesToDestroy: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'pause-test'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'pause-test'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should pause and resume instances
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704907_d22jp4faz'[39m,
  instanceId: [32m'pause-test'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should pause and resume instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704907_d22jp4faz'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should handle invalid lifecycle operations
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704910_p71b8lwom'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should handle invalid lifecycle operations
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704910_p71b8lwom'[39m,
  instancesToDestroy: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should handle invalid lifecycle operations
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704910_p71b8lwom'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should handle invalid lifecycle operations
Promise returned by `expect(actual).resolves.toBe(expected)` was not awaited. Vitest currently auto-awaits hanging assertions at the end of the test, but this will cause the test to fail in Vitest 3. Please remember to await the assertion.
    at I:/Programacion/Proyectos/g-mini/src/lib/events/__tests__/integration/EventBusFactory.test.ts:121:38

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate events between instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704920_cnsbktsk8'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate events between instances
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'isolation-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704920_cnsbktsk8'[39m,
  instanceId: [32m'isolation-1'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704920_cnsbktsk8'[39m,
  instanceId: [32m'isolation-1'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'isolation-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704920_cnsbktsk8'[39m,
  instanceId: [32m'isolation-2'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704920_cnsbktsk8'[39m,
  instanceId: [32m'isolation-2'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'2'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate events between instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704920_cnsbktsk8'[39m,
  instancesToDestroy: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'isolation-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'isolation-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'isolation-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'isolation-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704920_cnsbktsk8'[39m,
  instanceId: [32m'isolation-1'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704920_cnsbktsk8'[39m,
  instanceId: [32m'isolation-2'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate events between instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704920_cnsbktsk8'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate storage between instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704925_8mzhnaq32'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate storage between instances
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'storage-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704925_8mzhnaq32'[39m,
  instanceId: [32m'storage-1'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704925_8mzhnaq32'[39m,
  instanceId: [32m'storage-1'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'storage-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704925_8mzhnaq32'[39m,
  instanceId: [32m'storage-2'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704925_8mzhnaq32'[39m,
  instanceId: [32m'storage-2'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'2'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate storage between instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704925_8mzhnaq32'[39m,
  instancesToDestroy: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'storage-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'storage-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'storage-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'storage-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704925_8mzhnaq32'[39m,
  instanceId: [32m'storage-1'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704925_8mzhnaq32'[39m,
  instanceId: [32m'storage-2'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate storage between instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704925_8mzhnaq32'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate module registries between instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704930_tqbwoq3t4'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate module registries between instances
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'modules-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704930_tqbwoq3t4'[39m,
  instanceId: [32m'modules-1'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704930_tqbwoq3t4'[39m,
  instanceId: [32m'modules-1'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'modules-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704930_tqbwoq3t4'[39m,
  instanceId: [32m'modules-2'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704930_tqbwoq3t4'[39m,
  instanceId: [32m'modules-2'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'2'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate module registries between instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704930_tqbwoq3t4'[39m,
  instancesToDestroy: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'modules-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'modules-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'modules-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'modules-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704930_tqbwoq3t4'[39m,
  instanceId: [32m'modules-1'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704930_tqbwoq3t4'[39m,
  instanceId: [32m'modules-2'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate module registries between instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704930_tqbwoq3t4'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should provide accurate factory metrics
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704934_gvxtrcsx2'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should provide accurate factory metrics
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'active-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704934_gvxtrcsx2'[39m,
  instanceId: [32m'active-1'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704934_gvxtrcsx2'[39m,
  instanceId: [32m'active-1'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'active-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704934_gvxtrcsx2'[39m,
  instanceId: [32m'active-2'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704934_gvxtrcsx2'[39m,
  instanceId: [32m'active-2'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'paused-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704934_gvxtrcsx2'[39m,
  instanceId: [32m'paused-1'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704934_gvxtrcsx2'[39m,
  instanceId: [32m'paused-1'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'3'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance paused (05:01:44) {
  factoryId: [32m'factory_1757793704934_gvxtrcsx2'[39m,
  instanceId: [32m'paused-1'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should provide accurate factory metrics
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704934_gvxtrcsx2'[39m,
  instancesToDestroy: [32m'3'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'active-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'active-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'active-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'active-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'paused-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'paused-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704934_gvxtrcsx2'[39m,
  instanceId: [32m'active-1'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704934_gvxtrcsx2'[39m,
  instanceId: [32m'active-2'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704934_gvxtrcsx2'[39m,
  instanceId: [32m'paused-1'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should provide accurate factory metrics
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704934_gvxtrcsx2'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should list instances correctly
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704940_e9h0490ma'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should list instances correctly
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'list-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704940_e9h0490ma'[39m,
  instanceId: [32m'list-1'[39m,
  namespace: [32m'ns1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704940_e9h0490ma'[39m,
  instanceId: [32m'list-1'[39m,
  namespace: [32m'ns1'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'list-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704940_e9h0490ma'[39m,
  instanceId: [32m'list-2'[39m,
  namespace: [32m'ns2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704940_e9h0490ma'[39m,
  instanceId: [32m'list-2'[39m,
  namespace: [32m'ns2'[39m,
  totalInstances: [32m'2'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should list instances correctly
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704940_e9h0490ma'[39m,
  instancesToDestroy: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'list-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'list-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'list-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'list-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704940_e9h0490ma'[39m,
  instanceId: [32m'list-1'[39m,
  namespace: [32m'ns1'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704940_e9h0490ma'[39m,
  instanceId: [32m'list-2'[39m,
  namespace: [32m'ns2'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should list instances correctly
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704940_e9h0490ma'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should group instances by namespace
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704943_5xa1lklq8'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should group instances by namespace
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'ns-test-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704943_5xa1lklq8'[39m,
  instanceId: [32m'ns-test-1'[39m,
  namespace: [32m'group-a'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704943_5xa1lklq8'[39m,
  instanceId: [32m'ns-test-1'[39m,
  namespace: [32m'group-a'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'ns-test-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704943_5xa1lklq8'[39m,
  instanceId: [32m'ns-test-2'[39m,
  namespace: [32m'group-a'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704943_5xa1lklq8'[39m,
  instanceId: [32m'ns-test-2'[39m,
  namespace: [32m'group-a'[39m,
  totalInstances: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'ns-test-3'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704943_5xa1lklq8'[39m,
  instanceId: [32m'ns-test-3'[39m,
  namespace: [32m'group-b'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704943_5xa1lklq8'[39m,
  instanceId: [32m'ns-test-3'[39m,
  namespace: [32m'group-b'[39m,
  totalInstances: [32m'3'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should group instances by namespace
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704943_5xa1lklq8'[39m,
  instancesToDestroy: [32m'3'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'ns-test-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'ns-test-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'ns-test-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'ns-test-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'ns-test-3'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'ns-test-3'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704943_5xa1lklq8'[39m,
  instanceId: [32m'ns-test-1'[39m,
  namespace: [32m'group-a'[39m,
  remainingInstances: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704943_5xa1lklq8'[39m,
  instanceId: [32m'ns-test-2'[39m,
  namespace: [32m'group-a'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704943_5xa1lklq8'[39m,
  instanceId: [32m'ns-test-3'[39m,
  namespace: [32m'group-b'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should group instances by namespace
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704943_5xa1lklq8'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should create microfrontend-ready instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704949_yir2wtllr'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should create microfrontend-ready instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704949_ldgv0dmtx'[39m,
  namespace: [32m'mf-test'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'mf-instance-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704949_ldgv0dmtx'[39m,
  instanceId: [32m'mf-instance-1'[39m,
  namespace: [32m'mf-test'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Microfrontend support setup (05:01:44) {
  factoryId: [32m'factory_1757793704949_ldgv0dmtx'[39m,
  instanceId: [32m'mf-instance-1'[39m,
  crossInstanceCommunication: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704949_ldgv0dmtx'[39m,
  instanceId: [32m'mf-instance-1'[39m,
  namespace: [32m'mf-test'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704949_ldgv0dmtx'[39m,
  instancesToDestroy: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'mf-instance-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'mf-instance-1'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should create microfrontend-ready instances
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704949_ldgv0dmtx'[39m,
  instanceId: [32m'mf-instance-1'[39m,
  namespace: [32m'mf-test'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should create microfrontend-ready instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704949_ldgv0dmtx'[39m }

 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should create unique isolated instances 41ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should prevent duplicate instance IDs 4ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should retrieve existing instances by ID 3ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should return null for non-existent instances 1ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should track instance metadata correctly 3ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should destroy instances properly 3ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should pause and resume instances 3ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should handle invalid lifecycle operations 10ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate events between instances 5ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate storage between instances 5ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate module registries between instances 4ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should provide accurate factory metrics 6ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should list instances correctly 4ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should group instances by namespace 5ms
stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should create microfrontend-ready instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704949_yir2wtllr'[39m,
  instancesToDestroy: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should create microfrontend-ready instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704949_yir2wtllr'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should support cross-instance communication when enabled
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704952_v6v6h55zb'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should support cross-instance communication when enabled
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704953_1lykn4132'[39m,
  namespace: [32m'cross-comm'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'comm-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704953_1lykn4132'[39m,
  instanceId: [32m'comm-1'[39m,
  namespace: [32m'cross-comm'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Microfrontend support setup (05:01:44) {
  factoryId: [32m'factory_1757793704953_1lykn4132'[39m,
  instanceId: [32m'comm-1'[39m,
  crossInstanceCommunication: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704953_1lykn4132'[39m,
  instanceId: [32m'comm-1'[39m,
  namespace: [32m'cross-comm'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'comm-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704953_1lykn4132'[39m,
  instanceId: [32m'comm-2'[39m,
  namespace: [32m'cross-comm'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Microfrontend support setup (05:01:44) {
  factoryId: [32m'factory_1757793704953_1lykn4132'[39m,
  instanceId: [32m'comm-2'[39m,
  crossInstanceCommunication: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704953_1lykn4132'[39m,
  instanceId: [32m'comm-2'[39m,
  namespace: [32m'cross-comm'[39m,
  totalInstances: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704953_1lykn4132'[39m,
  instancesToDestroy: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'comm-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'comm-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'comm-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'comm-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704953_1lykn4132'[39m,
  instanceId: [32m'comm-1'[39m,
  namespace: [32m'cross-comm'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704953_1lykn4132'[39m,
  instanceId: [32m'comm-2'[39m,
  namespace: [32m'cross-comm'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should support cross-instance communication when enabled
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704953_1lykn4132'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should support cross-instance communication when enabled
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704952_v6v6h55zb'[39m,
  instancesToDestroy: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should support cross-instance communication when enabled
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704952_v6v6h55zb'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should manage global factory registry
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704956_4ewpfsooi'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should manage global factory registry
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704957_1lszbiis2'[39m,
  namespace: [32m'default'[39m,
  isolated: [32m'false'[39m,
  microfrontendMode: [32m'false'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704957_jtc4mh2lx'[39m,
  namespace: [32m'default'[39m,
  isolated: [32m'false'[39m,
  microfrontendMode: [32m'false'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704957_1lszbiis2'[39m,
  instancesToDestroy: [32m'0'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704957_jtc4mh2lx'[39m,
  instancesToDestroy: [32m'0'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704957_1lszbiis2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704957_jtc4mh2lx'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should manage global factory registry
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704956_4ewpfsooi'[39m,
  instancesToDestroy: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should manage global factory registry
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704956_4ewpfsooi'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should destroy all factories
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704958_jseoyexn3'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should destroy all factories
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704958_0m06yvv8h'[39m,
  namespace: [32m'default'[39m,
  isolated: [32m'false'[39m,
  microfrontendMode: [32m'false'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704958_z4cpfg88d'[39m,
  namespace: [32m'default'[39m,
  isolated: [32m'false'[39m,
  microfrontendMode: [32m'false'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704958_0m06yvv8h'[39m,
  instancesToDestroy: [32m'0'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704958_0m06yvv8h'[39m,
  instancesToDestroy: [32m'0'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704958_z4cpfg88d'[39m,
  instancesToDestroy: [32m'0'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704958_z4cpfg88d'[39m,
  instancesToDestroy: [32m'0'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704958_0m06yvv8h'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704958_0m06yvv8h'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704958_z4cpfg88d'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704958_z4cpfg88d'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should destroy all factories
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704958_jseoyexn3'[39m,
  instancesToDestroy: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should destroy all factories
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704958_jseoyexn3'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle destroyed factory operations gracefully
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704960_45n6wx8ad'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle destroyed factory operations gracefully
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704960_hjtfny8th'[39m,
  namespace: [32m'default'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704960_hjtfny8th'[39m,
  instancesToDestroy: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle destroyed factory operations gracefully
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704960_hjtfny8th'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle destroyed factory operations gracefully
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704960_45n6wx8ad'[39m,
  instancesToDestroy: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle destroyed factory operations gracefully
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704960_45n6wx8ad'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle concurrent instance creation
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle concurrent instance creation
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'concurrent-0'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-0'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-0'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'concurrent-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-1'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-1'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'concurrent-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-2'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-2'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'3'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'concurrent-3'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-3'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-3'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'4'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'concurrent-4'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-4'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-4'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'5'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'concurrent-5'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-5'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-5'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'6'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'concurrent-6'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-6'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-6'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'7'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'concurrent-7'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-7'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-7'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'8'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'concurrent-8'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-8'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-8'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'9'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'concurrent-9'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-9'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-9'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'10'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle concurrent instance creation
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instancesToDestroy: [32m'10'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'concurrent-0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'concurrent-0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'concurrent-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'concurrent-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'concurrent-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'concurrent-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'concurrent-3'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'concurrent-3'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'concurrent-4'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'concurrent-4'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'concurrent-5'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'concurrent-5'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'concurrent-6'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'concurrent-6'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'concurrent-7'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'concurrent-7'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'concurrent-8'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'concurrent-8'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'concurrent-9'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'concurrent-9'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-0'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'9'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-1'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'8'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-2'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'7'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-3'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'6'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-4'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'5'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-5'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'4'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-6'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'3'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-7'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-8'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m,
  instanceId: [32m'concurrent-9'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle concurrent instance creation
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704961_a5xdpuxuk'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle rapid destroy and recreate operations
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704975_0ztueuqbt'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle rapid destroy and recreate operations
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'rapid-test'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704975_0ztueuqbt'[39m,
  instanceId: [32m'rapid-test'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704975_0ztueuqbt'[39m,
  instanceId: [32m'rapid-test'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'rapid-test'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'rapid-test'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle rapid destroy and recreate operations
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704975_0ztueuqbt'[39m,
  instanceId: [32m'rapid-test'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle rapid destroy and recreate operations
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'rapid-test'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704975_0ztueuqbt'[39m,
  instanceId: [32m'rapid-test'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704975_0ztueuqbt'[39m,
  instanceId: [32m'rapid-test'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:44) { noncePrefix: [32m'ms123ocs'[39m, timestamp: [32m'1757793704982'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:44)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle rapid destroy and recreate operations
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704975_0ztueuqbt'[39m,
  instancesToDestroy: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'rapid-test'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'rapid-test'[39m }

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:44) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:44) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:44) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:44) { noncePrefix: [32m'ked5mbai'[39m, timestamp: [32m'1757793704981'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:44)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle rapid destroy and recreate operations
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704975_0ztueuqbt'[39m,
  instanceId: [32m'rapid-test'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:44) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:44) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:44) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle rapid destroy and recreate operations
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704975_0ztueuqbt'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Performance and Scalability > should handle multiple instances efficiently
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:44) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'a7946ef5...'[39m }

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:44) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'3aa05b65...'[39m }

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:44) { reason: [32m'No valid existing ID found'[39m, newId: [32m'a7946ef5...'[39m }

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:44) { reason: [32m'No valid existing ID found'[39m, newId: [32m'3aa05b65...'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:44) { noncePrefix: [32m'kqfvtz4k'[39m, timestamp: [32m'1757793704984'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:44)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:44) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:44) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:44) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:44) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'87a48595...'[39m }

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:44) { reason: [32m'No valid existing ID found'[39m, newId: [32m'87a48595...'[39m }

stdout | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Performance and Scalability > should handle multiple instances efficiently
Performance Metrics: {
  instanceCount: [33m10[39m,
  createTimeMs: [33m11.231999999999971[39m,
  avgCreateTime: [33m1.123199999999997[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Performance and Scalability > should handle multiple instances efficiently
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'perf-0'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-0'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-0'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'perf-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-1'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-1'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'perf-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-2'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-2'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'3'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'perf-3'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-3'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-3'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'4'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'perf-4'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-4'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-4'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'5'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'perf-5'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-5'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-5'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'6'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'perf-6'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-6'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-6'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'7'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'perf-7'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-7'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-7'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'8'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'perf-8'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-8'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-8'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'9'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:44) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:44) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:44) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  instanceId: [32m'perf-9'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-9'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-9'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'10'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Performance and Scalability > should handle multiple instances efficiently
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instancesToDestroy: [32m'10'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'perf-0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'perf-0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'perf-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'perf-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'perf-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'perf-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'perf-3'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'perf-3'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'perf-4'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'perf-4'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'perf-5'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'perf-5'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'perf-6'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'perf-6'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'perf-7'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'perf-7'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'perf-8'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'perf-8'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (05:01:44) { instanceId: [32m'perf-9'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:44) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:01:44)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (05:01:44) { instanceId: [32m'perf-9'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-0'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'9'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-1'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'8'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-2'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'7'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-3'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'6'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-4'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'5'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-5'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'4'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-6'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'3'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-7'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-8'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (05:01:44) {
  factoryId: [32m'factory_1757793704981_reds4u4r2'[39m,
  instanceId: [32m'perf-9'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Performance and Scalability > should handle multiple instances efficiently
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (05:01:44) { factoryId: [32m'factory_1757793704981_reds4u4r2'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:44) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'45a3cb72...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'45a3cb72...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'5bb90699...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST-BEFORE] Starting health monitoring test setup...
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:45) { noncePrefix: [32m'dwna2plw'[39m, timestamp: [32m'1757793705002'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:45)

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'5bb90699...'[39m }

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:45) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:45) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:45) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:45) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'8a7f28fc...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'8a7f28fc...'[39m }

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (05:01:45) {
  keyVersion: [32m'key_1757793704980_fgz0s14h'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'90db6eb5...'[39m }

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (05:01:45) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'90db6eb5...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'1f5f6d11...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'1f5f6d11...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'c9fc37ec...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'c9fc37ec...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'12963816...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'12963816...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'e321aa24...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'e321aa24...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'e0dc801c...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'e0dc801c...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:45) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'1a65b4cf...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'1a65b4cf...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'fed09ba3...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'fed09ba3...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'5286be0c...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'5286be0c...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'5e2689ec...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'5e2689ec...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Adding subscription to weak subscription manager for pattern: **
[EventBus] Subscription added: ** (sub_1757793705009_7srmqcz46) [moduleId: anonymous]
[HEALTH-TEST-BEFORE] Health monitoring test setup completed! ‚úÖ

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'22014d9c...'[39m }

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705009_7srmqcz46'[39m,
  pattern: [32m'**'[39m,
  moduleId: [32m'anonymous'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'22014d9c...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'b74babfe...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'b74babfe...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'5f20e025...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'5f20e025...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Activating module 'test-inventory'...

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'bd262c99...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'bd262c99...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'a61522e5...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'a61522e5...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'c6375a37...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:45) { noncePrefix: [32m's4nyclmy'[39m, timestamp: [32m'1757793705012'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:45)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:45)

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'c6375a37...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:45) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:45) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:45) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:45) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'7c008e97...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'7c008e97...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'2b554d1d...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'2b554d1d...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'e054b747...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'e054b747...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'20d38335...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'20d38335...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'906f934e...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'906f934e...'[39m }

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705012_6br2tj0yt'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705013_8vmylym3v'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'524154c8...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'524154c8...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'e5fca3ea...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'e5fca3ea...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'21b516ba...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'21b516ba...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'df32908e...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'df32908e...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'7b3759a7...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'7b3759a7...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'8c5fbe49...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'8c5fbe49...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'afab8eb6...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'afab8eb6...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'26763b13...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:45) { noncePrefix: [32m'8jyou55u'[39m, timestamp: [32m'1757793705014'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:45)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:45)

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'26763b13...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST] Successfully registered module: test-inventory

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:45) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:45) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:45) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:45) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'c6403586...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:45) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'c6403586...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Activating module 'test-customers'...

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'bea458e2...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'bea458e2...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'828c8371...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'828c8371...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'601a7a29...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'601a7a29...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Activating module 'test-inventory'...

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705017_t9dabojzm'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'1b0bed72...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'1b0bed72...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'749f6390...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST] Successfully registered module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'749f6390...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'd4f138a1...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:45) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'd4f138a1...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'bb930e25...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'bb930e25...'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
[OfflineIntegration] Starting automatic persistent event queuing test...
[OfflineIntegration] Created order event: sales.order.created
[OfflineIntegration] Emitting event with persistent=true...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'8f296f06...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'8f296f06...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'a2bafb9d...'[39m }

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705020_jy2xbth51'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705020_esf8gqz5s'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'a2bafb9d...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'7083e39c...'[39m }

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705021_i3pszjoak'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705022_jt3hvs6pd'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'7083e39c...'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
[EventBus] Processing event sales.order.created: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'12d8b9fe...'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
[OfflineIntegration] Queueing event for offline sync: sales.order.created priority: [33m1[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST] Successfully registered module: test-sales

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'12d8b9fe...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Activation order calculated: [
  [32m'test-inventory'[39m,
  [32m'test-customers'[39m,
  [32m'test-sales'[39m,
  [32m'test-kitchen-failing'[39m
]
[ModuleRegistry] Module 'test-kitchen-failing' registered successfully

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'343f932f...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Activating module 'test-kitchen-failing'...

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'343f932f...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Directly activating module 'test-kitchen-failing'...
[TestKitchenModule] Attempting activation...

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:45) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'abd2ffcc...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Registering 1 subscriptions for module 'test-kitchen-failing'

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:45) { reason: [32m'No valid existing ID found'[39m, newId: [32m'abd2ffcc...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Module health changed: test-kitchen-failing -> error
[ModuleRegistry] Module 'test-kitchen-failing' health changed: inactive -> error

 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should create microfrontend-ready instances 3ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should support cross-instance communication when enabled 4ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should manage global factory registry 2ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should destroy all factories 2ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle destroyed factory operations gracefully 2ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle concurrent instance creation 13ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle rapid destroy and recreate operations 6ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Performance and Scalability > should handle multiple instances efficiently 17ms
stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Module 'test-kitchen-failing' activated directly
[EventBus] Module activated: test-kitchen-failing
[EventBus] Auto-registering handlers for module: test-kitchen-failing
[EventBus] Auto-registered handler: test-kitchen-failing.processOrder for pattern: orders.new
[EventBus] Auto-registered 1/1 handlers for module: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
[OfflineIntegration] Event emitted successfully
[OfflineIntegration] Checking queued operations...
[OfflineIntegration] Found queued operations: [33m1[39m
[OfflineIntegration] First queued operation: {
  type: [32m'CREATE'[39m,
  entity: [32m'events'[39m,
  data: {
    id: [32m'evt_1757793705019_3be881d9-3659-46ba-a811-a6c5f3f130d8'[39m,
    pattern: [32m'sales.order.created'[39m,
    payload: {
      orderId: [32m'ORD-OFFLINE-001'[39m,
      customerId: [32m'CUST-001'[39m,
      items: [36m[Array][39m,
      total: [33m61.08[39m,
      timestamp: [32m'2025-09-13T20:01:45.019Z'[39m
    },
    timestamp: [32m'2025-09-13T20:01:45.019Z'[39m,
    source: [32m'eventbus-v2'[39m,
    version: [32m'1.0.0'[39m,
    correlationId: [90mundefined[39m,
    userId: [90mundefined[39m,
    metadata: {
      priority: [32m'high'[39m,
      persistent: [33mtrue[39m,
      crossModule: [33mtrue[39m,
      deduplication: [36m[Object][39m,
      tracing: [36m[Object][39m,
      retryPolicy: [90mundefined[39m
    }
  },
  priority: [33m1[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Adding subscription to weak subscription manager for pattern: orders.new

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705023_0zvl48fwg'[39m,
  pattern: [32m'orders.new'[39m,
  moduleId: [32m'test-kitchen-failing'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-kitchen-failing'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Kitchen Module (Failing)'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST] Successfully registered module: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:45)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:45)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:45) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:45)

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705026_hr65miza2'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Adding subscription to weak subscription manager for pattern: global.eventbus.metrics
[EventBus] Subscription added: global.eventbus.metrics (sub_1757793705025_tnhwwhdfv) [moduleId: anonymous]
[ModuleRegistry] Module 'test-inventory' is already active

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705025_tnhwwhdfv'[39m,
  pattern: [32m'global.eventbus.metrics'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.module-activated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Module 'test-kitchen-failing' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should not queue non-persistent events
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:45) { noncePrefix: [32m'udxy43yt'[39m, timestamp: [32m'1757793705026'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:45)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:45)

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should not queue non-persistent events
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:45) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:45) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:45) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:45) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:45) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.module-activated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST] Waiting for health monitoring cycles...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should not queue non-persistent events
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:45) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should not queue non-persistent events
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705029_z4y6v4iwm'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705029_1f3k3ywdx'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should not queue non-persistent events
[EventBus] Processing event system.health.check: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should not queue non-persistent events
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should not queue non-persistent events
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:45)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:45)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:45) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:45)

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m, [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should not queue non-persistent events
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:45) { noncePrefix: [32m'g0qdtshu'[39m, timestamp: [32m'1757793705029'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:45)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:45)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705031_6hnnrj5ah'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705031_x7om3cocf'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:45) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:45) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:45) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:45) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:45) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:45) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[EventBus] Processing event sales.order.created: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[OfflineIntegration] Queueing event for offline sync: sales.order.created priority: [33m3[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[EventBus] Processing event payments.payment.processed: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[OfflineIntegration] Queueing event for offline sync: payments.payment.processed priority: [33m0[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[EventBus] Processing event inventory.stock.low: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[OfflineIntegration] Queueing event for offline sync: inventory.stock.low priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:45) { noncePrefix: [32m'uirwjjul'[39m, timestamp: [32m'1757793705036'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:45)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:45)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:45) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:45) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:45) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:45) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:45) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705039_yd4rfa2xx'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705039_te481x7yp'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-kitchen-failing'[39m ]
[ModuleRegistry] Module 'test-kitchen-failing' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Activating module 'test-kitchen-failing'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Directly activating module 'test-kitchen-failing'...
[TestKitchenModule] Attempting activation...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Registering 1 subscriptions for module 'test-kitchen-failing'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[EventBus] Module health changed: test-kitchen-failing -> error
[ModuleRegistry] Module 'test-kitchen-failing' health changed: inactive -> error

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Module 'test-kitchen-failing' activated directly
[EventBus] Module activated: test-kitchen-failing
[EventBus] Auto-registering handlers for module: test-kitchen-failing
[EventBus] Auto-registered handler: test-kitchen-failing.processOrder for pattern: orders.new
[EventBus] Auto-registered 1/1 handlers for module: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[EventBus] Adding subscription to weak subscription manager for pattern: orders.new

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705041_wp70olr4u'[39m,
  pattern: [32m'orders.new'[39m,
  moduleId: [32m'test-kitchen-failing'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-kitchen-failing'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Kitchen Module (Failing)'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Module 'test-kitchen-failing' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:45) { noncePrefix: [32m'k4tqq4xz'[39m, timestamp: [32m'1757793705044'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:45)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:45)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:45) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:45) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:45) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:45) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:45) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Adding subscription to weak subscription manager for pattern: global.eventbus.module-registered
[EventBus] Subscription added: global.eventbus.module-registered (sub_1757793705046_e7ehwpxry) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: global.eventbus.module-activated
[EventBus] Subscription added: global.eventbus.module-activated (sub_1757793705046_2iddlbekr) [moduleId: anonymous]

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705046_e7ehwpxry'[39m,
  pattern: [32m'global.eventbus.module-registered'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705046_2iddlbekr'[39m,
  pattern: [32m'global.eventbus.module-activated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705047_jrlvyqgw4'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705047_lusrw5uba'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705050_1elyvtyrq'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705051_641l152cq'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705052_tm1gs0lwm'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Processing event global.eventbus.module-activated: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync 13ms
 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should not queue non-persistent events 4ms
 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order 25ms
 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully 8ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:45)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:45)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:45) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:45)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:45) { noncePrefix: [32m'o5u4vtm1'[39m, timestamp: [32m'1757793705149'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:45)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:45)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:45) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:45) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:45) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:45) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:45) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:45) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
[EventBus] Processing event sales.order.created: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
[OfflineIntegration] Queueing event for offline sync: sales.order.created priority: [33m2[39m

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
[EventBus] Failed to queue event for offline sync: Error: Queue failed
    at [90mI:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\integration\offline-integration.test.ts:279:66
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)
    at runWithTimeout [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
    at runSuite [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:45)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:45)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:45) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:45)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:45) { noncePrefix: [32m'ikw27sh9'[39m, timestamp: [32m'1757793705160'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:45)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:45)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:45) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:45) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:45) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:45) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:45) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:45) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
[EventBus] Adding subscription to weak subscription manager for pattern: global.eventbus.network-offline
[EventBus] Subscription added: global.eventbus.network-offline (sub_1757793705162_1zeikpf7w) [moduleId: anonymous]
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:45) { noncePrefix: [32m'i7w19tm1'[39m, timestamp: [32m'1757793705164'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:45)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:45)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705162_1zeikpf7w'[39m,
  pattern: [32m'global.eventbus.network-offline'[39m,
  moduleId: [32m'anonymous'[39m
}

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:45) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:45) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:45) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:45) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:45) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Activation order calculated: [ [32m'module-a'[39m ]
[ModuleRegistry] Module 'module-a' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Activating module 'module-a'...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
[EventBus] Processing event global.eventbus.network-offline: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Directly activating module 'module-a'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Registering 2 subscriptions for module 'module-a'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Module health changed: module-a -> active
[ModuleRegistry] Module 'module-a' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Module 'module-a' activated directly
[EventBus] Module activated: module-a
[EventBus] Auto-registering handlers for module: module-a
[EventBus] Auto-registered 0/2 handlers for module: module-a

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Available handler not found: module-a.updateStock
[EventBus] Available handler not found: module-a.processRestock

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Handler 'updateStock' not found in registry for module module-a
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705166_83c5o0t6v'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'module-a'[39m
}
[EventBus] Handler 'processRestock' not found in registry for module module-a
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705167_wg5i4mpm0'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'module-a'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'module-a'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Activation order calculated: [ [32m'module-a'[39m, [32m'module-b'[39m ]
[ModuleRegistry] Module 'module-b' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Activating module 'module-b'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Directly activating module 'module-b'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Registering 1 subscriptions for module 'module-b'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Module health changed: module-b -> active
[ModuleRegistry] Module 'module-b' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Module 'module-b' activated directly
[EventBus] Module activated: module-b
[EventBus] Auto-registering handlers for module: module-b
[EventBus] Auto-registered 0/1 handlers for module: module-b

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Available handler not found: module-b.updateCustomerActivity

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Handler 'updateCustomerActivity' not found in registry for module module-b
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705168_qtuskw1cv'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'module-b'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'module-b'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Activation order calculated: [ [32m'module-a'[39m, [32m'module-b'[39m, [32m'module-c'[39m ]
[ModuleRegistry] Module 'module-c' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Activating module 'module-c'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Directly activating module 'module-c'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Registering 2 subscriptions for module 'module-c'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Module health changed: module-c -> active
[ModuleRegistry] Module 'module-c' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Module 'module-c' activated directly
[EventBus] Module activated: module-c
[EventBus] Auto-registering handlers for module: module-c
[EventBus] Auto-registered 0/2 handlers for module: module-c

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Available handler not found: module-c.handleLowStock
[EventBus] Available handler not found: module-c.handleCustomerUpdate

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Handler 'handleLowStock' not found in registry for module module-c
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705170_qa8qw9y0i'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'module-c'[39m
}
[EventBus] Handler 'handleCustomerUpdate' not found in registry for module module-c
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705170_04fsqbc9g'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'module-c'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'module-c'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Activation order calculated: [ [32m'module-a'[39m, [32m'module-b'[39m, [32m'module-c'[39m, [32m'module-d'[39m ]
[ModuleRegistry] Module 'module-d' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Activating module 'module-d'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Directly activating module 'module-d'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Registering 2 subscriptions for module 'module-d'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Module health changed: module-d -> active
[ModuleRegistry] Module 'module-d' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Module 'module-d' activated directly
[EventBus] Module activated: module-d
[EventBus] Auto-registering handlers for module: module-d
[EventBus] Auto-registered 0/2 handlers for module: module-d

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Available handler not found: module-d.recordClockIn
[EventBus] Available handler not found: module-d.recordClockOut

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Handler 'recordClockIn' not found in registry for module module-d
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705171_3xrefap7g'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'module-d'[39m
}
[EventBus] Handler 'recordClockOut' not found in registry for module module-d
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705172_kc1ggp382'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'module-d'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'module-d'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Module 'module-d' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:45) { noncePrefix: [32m'gk4389o9'[39m, timestamp: [32m'1757793705174'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:45)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:45)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:45) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:45) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:45) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:45) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:45) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[TEST-BEFORE] Starting beforeEach setup...
[TEST-BEFORE] Registering inventory module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705176_629z1ixy4'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705176_niblgo6h4'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[TEST-BEFORE] Registering customers module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705178_djvfqxltt'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[TEST-BEFORE] Registering sales module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705179_xdfeyytau'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705180_7pgpikx9y'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[TEST-BEFORE] beforeEach setup completed!

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[TEST] Test started!
[TEST] Setting up simple handler...
[EventBus] Adding subscription to weak subscription manager for pattern: test.simple
[EventBus] Subscription added: test.simple (sub_1757793705181_t1wcqk7d5) [moduleId: anonymous]
[TEST] Emitting simple event...

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705181_t1wcqk7d5'[39m,
  pattern: [32m'test.simple'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Processing event test.simple: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[TEST] Simple handler called!

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[TEST] Waiting for handler to execute...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:45)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:45)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:45) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:45)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:45) { noncePrefix: [32m'cqzgvxns'[39m, timestamp: [32m'1757793705216'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:45)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:45)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:45) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:45) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:45) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:45) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:45) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:45) { isInitialized: [32m'true'[39m }

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations 119ms
 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully 12ms
 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition 55ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[EventBus] Processing event test.offline.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[OfflineIntegration] Queueing event for offline sync: test.offline.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[EventBus] Adding subscription to weak subscription manager for pattern: global.eventbus.network-online
[EventBus] Subscription added: global.eventbus.network-online (sub_1757793705220_g2tjbo75h) [moduleId: anonymous]
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705220_g2tjbo75h'[39m,
  pattern: [32m'global.eventbus.network-online'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[EventBus] Processing event global.eventbus.network-online: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation 120ms
 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains 10ms
stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[TEST] Final handler calls: [ [32m'simple-called'[39m ]

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:45) { noncePrefix: [32m'xmmsuoye'[39m, timestamp: [32m'1757793705285'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:45)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:45)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:45) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:45) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:45) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:45) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:45) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[TEST-BEFORE] Starting beforeEach setup...
[TEST-BEFORE] Registering inventory module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705287_n51jkwfvg'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705287_cq5pg1yw0'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[TEST-BEFORE] Registering customers module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705289_oa0e6asab'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[TEST-BEFORE] Registering sales module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705290_fm4strwu1'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705290_ugv6fp0l0'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[TEST-BEFORE] beforeEach setup completed!

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757793705291_inpw36425) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.check
[EventBus] Subscription added: inventory.stock.check (sub_1757793705291_mde5qnuwq) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.checked
[EventBus] Subscription added: inventory.stock.checked (sub_1757793705292_jpm694nkf) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.confirmed
[EventBus] Subscription added: sales.order.confirmed (sub_1757793705292_du8lbxxde) [moduleId: anonymous]

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705291_inpw36425'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705291_mde5qnuwq'[39m,
  pattern: [32m'inventory.stock.check'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705292_jpm694nkf'[39m,
  pattern: [32m'inventory.stock.checked'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705292_du8lbxxde'[39m,
  pattern: [32m'sales.order.confirmed'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[TestCustomers] Updated activity for customer CUST-001

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Processing event inventory.stock.check: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Processing event inventory.stock.checked: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Processing event sales.order.confirmed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:45)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:45)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:45) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:45)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:45) { noncePrefix: [32m'nc4tg5m3'[39m, timestamp: [32m'1757793705332'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:45)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:45)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:45) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:45) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:45) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:45) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:45) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:45) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...
[EventBus] Adding subscription to weak subscription manager for pattern: test.offline.processing
[EventBus] Subscription added: test.offline.processing (sub_1757793705334_qk51xuhrm) [moduleId: anonymous]

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705334_qk51xuhrm'[39m,
  pattern: [32m'test.offline.processing'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[EventBus] Processing event test.offline.processing: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[OfflineIntegration] Queueing event for offline sync: test.offline.processing priority: [33m2[39m

 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers 110ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:45)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:45)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:45) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:45)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:45) { noncePrefix: [32m'0hmwn433'[39m, timestamp: [32m'1757793705395'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:45)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:45)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:45) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:45) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:45) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:45) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:45) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:45) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[EventBus] Processing event sales.order.created: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[OfflineIntegration] Queueing event for offline sync: sales.order.created priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[EventBus] Processing event payments.payment.processed: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[OfflineIntegration] Queueing event for offline sync: payments.payment.processed priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[EventBus] Processing event sales.order.completed: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[OfflineIntegration] Queueing event for offline sync: sales.order.completed priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync 117ms
 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline 62ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:45)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:45)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:45) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:45)

 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication 222ms
stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:45) { noncePrefix: [32m'9hl2b2zv'[39m, timestamp: [32m'1757793705507'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:45)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:45)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:45) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:45) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:45) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:45) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:45) { noncePrefix: [32m'xs0eo4zo'[39m, timestamp: [32m'1757793705506'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:45)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:45)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:45) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:45) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:45) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:45) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:45) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:45) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[TEST-BEFORE] Starting beforeEach setup...
[TEST-BEFORE] Registering inventory module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:45) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705509_uozzpdiuv'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705509_swovzscq1'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[TEST-BEFORE] Registering customers module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705511_r7pzgjcuy'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705509_rr2x85epx'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705510_jvtiybpf7'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[TEST-BEFORE] Registering sales module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705512_oio6czqwc'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705512_z4c0nyrfg'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[TEST-BEFORE] beforeEach setup completed!

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705511_iysbpa55l'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757793705513_k3qo9j14r) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757793705513_0ze820nv0) [moduleId: anonymous]

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705513_k3qo9j14r'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705513_0ze820nv0'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Processing event sales.order.created: Found 3 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[TestCustomers] Updated activity for customer CUST-VIP-001

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705513_g2fvwk4go'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705513_60y1gsyj3'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Subscription added: inventory.stock.low (sub_1757793705514_zzd7w7qxv) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757793705514_xyi78dumi) [moduleId: anonymous]
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705514_zzd7w7qxv'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705514_xyi78dumi'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Processing event inventory.stock.low: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[TestSales] Handling low stock for undefined

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[OfflineIntegration] Queueing event for offline sync: inventory.stock.low priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Processing event sales.order.created: Found 3 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[TestCustomers] Updated activity for customer CUST-REG-001

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[TestCustomers] Updated activity for customer undefined

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[OfflineIntegration] Queueing event for offline sync: sales.order.created priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Processing event sales.order.created: Found 3 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[TestCustomers] Updated activity for customer CUST-VIP-002

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection 111ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Error unsubscribing sub_1757793705513_g2fvwk4go: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793705513_60y1gsyj3: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Error unsubscribing sub_1757793705511_iysbpa55l: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Error unsubscribing sub_1757793705509_rr2x85epx: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793705510_jvtiybpf7: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:45) { noncePrefix: [32m'tyx0lizi'[39m, timestamp: [32m'1757793705680'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:45)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:45)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:45)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:45)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:45) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:45)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:45) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:45) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:45) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:45) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:45) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[TEST-BEFORE] Starting beforeEach setup...
[TEST-BEFORE] Registering inventory module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705682_nvk753pk2'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705682_q60lrcoe8'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:45) { noncePrefix: [32m'ygewnln8'[39m, timestamp: [32m'1757793705681'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:45)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:45)

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:45) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:45) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:45) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:45) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:45) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[TEST-BEFORE] Registering customers module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:45) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705684_n50bukm54'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[TEST-BEFORE] Registering sales module...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705682_b757c7vyd'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705683_leeodhszi'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705685_d1al6t1zr'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705685_oo8rcyvli'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[TEST-BEFORE] beforeEach setup completed!

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705685_co1qo5g00'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Adding subscription to weak subscription manager for pattern: test.priority.event
[EventBus] Subscription added: test.priority.event (sub_1757793705686_w5mwcyb7y) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: test.priority.event
[EventBus] Subscription added: test.priority.event (sub_1757793705686_ijykbir8v) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: test.priority.event
[EventBus] Subscription added: test.priority.event (sub_1757793705687_ocu2ul71n) [moduleId: anonymous]

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705686_w5mwcyb7y'[39m,
  pattern: [32m'test.priority.event'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705686_ijykbir8v'[39m,
  pattern: [32m'test.priority.event'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705687_ocu2ul71n'[39m,
  pattern: [32m'test.priority.event'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Processing event test.priority.event: Found 3 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705686_vvw9j86fi'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705686_5mlmdpimc'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Error unsubscribing sub_1757793705686_vvw9j86fi: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793705686_5mlmdpimc: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Error unsubscribing sub_1757793705685_co1qo5g00: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Error unsubscribing sub_1757793705682_b757c7vyd: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793705683_leeodhszi: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:45)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:45)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:45) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:45)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:45) { noncePrefix: [32m'xol1mng5'[39m, timestamp: [32m'1757793705700'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:45)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:45)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:45) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:45) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:45) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:45) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:45) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:45) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705702_ed9e0ni97'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705702_6x0nn6s8u'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705704_mchht87f7'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705705_rq6qywr26'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705705_9utkfnrfo'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Error unsubscribing sub_1757793705705_rq6qywr26: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793705705_9utkfnrfo: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Error unsubscribing sub_1757793705704_mchht87f7: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Error unsubscribing sub_1757793705702_ed9e0ni97: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793705702_6x0nn6s8u: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:45)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:45)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:45) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:45)

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online 174ms
 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods 20ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:45) { noncePrefix: [32m'le60559n'[39m, timestamp: [32m'1757793705719'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:45)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:45)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:45) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:45) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:45) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:45) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:45) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:45) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Processing event sales.order.created: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] Queueing event for offline sync: sales.order.created priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Processing event inventory.stock.updated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] Queueing event for offline sync: inventory.stock.updated priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Processing event payments.payment.processed: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] Queueing event for offline sync: payments.payment.processed priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Processing event sales.order.completed: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] Queueing event for offline sync: sales.order.completed priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters 173ms
stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:45) { noncePrefix: [32m'dsbl2804'[39m, timestamp: [32m'1757793705812'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:45)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:45)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:45) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:45) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:45) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:45) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:45) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705814_xodniqwyb'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705814_0ryrx0xtb'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705816_2i9jqhkwx'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-customers' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705817_2awhndxke'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705817_16r36y3kf'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m, [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705819_os4scbj5q'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705819_mufafy9wy'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-staff' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Deactivating dependent module 'test-sales' before deactivating 'test-inventory'

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation 18ms
stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Error unsubscribing sub_1757793705817_2awhndxke: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793705817_16r36y3kf: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Error unsubscribing sub_1757793705814_xodniqwyb: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793705814_0ryrx0xtb: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.module-deactivated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:45) { noncePrefix: [32m'n5a02901'[39m, timestamp: [32m'1757793705843'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:45)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:45)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:45) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:45) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:45) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:45) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:45) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705844_l8t6ed92i'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705844_r1sy41u43'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705846_gdv7b5lri'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Module 'test-customers' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705847_ntccn3cak'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705847_8e6ajbefo'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m, [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705849_k3wixzq0j'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705849_lykkcsklp'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Module 'test-staff' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Adding subscription to weak subscription manager for pattern: global.eventbus.module-deactivated
[EventBus] Subscription added: global.eventbus.module-deactivated (sub_1757793705850_dr2psdnrt) [moduleId: anonymous]

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705850_dr2psdnrt'[39m,
  pattern: [32m'global.eventbus.module-deactivated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Deactivating module 'test-staff'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-staff'

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Error unsubscribing sub_1757793705849_k3wixzq0j: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793705849_lykkcsklp: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[TestStaffModule] Deactivating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Module 'test-staff' deactivated successfully
[EventBus] Module deactivated: test-staff

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.module-deactivated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:45)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:45)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:45) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:45)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:45) { noncePrefix: [32m'k9knz82l'[39m, timestamp: [32m'1757793705890'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:45)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:45)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:45) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:45) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:45) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:45) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:45) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:45) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[EventBus] Processing event inventory.stock.updated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[OfflineIntegration] Queueing event for offline sync: inventory.stock.updated priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[EventBus] Processing event inventory.stock.low: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[OfflineIntegration] Queueing event for offline sync: inventory.stock.low priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[EventBus] Processing event inventory.restock.requested: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[OfflineIntegration] Queueing event for offline sync: inventory.restock.requested priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities 132ms
 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order 30ms
 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events 65ms
stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:45) { noncePrefix: [32m'k8qh111q'[39m, timestamp: [32m'1757793705908'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:45)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:45)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:45) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:45) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:45) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:45) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:45) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705909_5uj34rroi'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705909_f74ymsvod'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705911_tflwucq22'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Module 'test-customers' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705913_av6srsw6v'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705913_xkq9bcu7q'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m, [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705914_n11squwkv'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705914_mnk4nckew'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Module 'test-staff' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Subscription added: staff.clock.in (sub_1757793705915_zc85r8qt3) [moduleId: anonymous]

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705915_zc85r8qt3'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Deactivating module 'test-staff'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-staff'

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Error unsubscribing sub_1757793705914_n11squwkv: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793705914_mnk4nckew: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[TestStaffModule] Deactivating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Module 'test-staff' deactivated successfully
[EventBus] Module deactivated: test-staff

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.module-deactivated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event staff.clock.in: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Subscription removed: staff.clock.in (sub_1757793705915_zc85r8qt3)

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:45) { noncePrefix: [32m'cwz2wtf9'[39m, timestamp: [32m'1757793705984'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:45)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:45)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:45) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:45) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:45) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:45) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:45) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705985_mbutd8q8o'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705985_9hndnxxms'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705987_vtf3uwocn'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-customers' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705988_8fm6qnnq5'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705988_osywaj6en'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m, [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705990_ko14f7uhf'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:45) {
  subscriptionId: [32m'sub_1757793705990_6no0pjjk5'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ÑπÔ∏è [EventBus] Module registered (05:01:45) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-staff' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Deactivating module 'test-staff'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-staff'

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Error unsubscribing sub_1757793705990_ko14f7uhf: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793705990_6no0pjjk5: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[TestStaffModule] Deactivating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-staff' deactivated successfully
[EventBus] Module deactivated: test-staff

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync 172ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:45)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:45)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:45)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:45) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:45)

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Error unsubscribing sub_1757793705988_8fm6qnnq5: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793705988_osywaj6en: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:45) { noncePrefix: [32m'hq7zlwmo'[39m, timestamp: [32m'1757793705999'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:45)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:45)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:45) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:45) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:45) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:45) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:45) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:45) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[EventBus] Processing event staff.clock.in: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[OfflineIntegration] Queueing event for offline sync: staff.clock.in priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Error unsubscribing sub_1757793705987_vtf3uwocn: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[EventBus] Processing event staff.break.started: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[OfflineIntegration] Queueing event for offline sync: staff.break.started priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[EventBus] Processing event staff.clock.out: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[OfflineIntegration] Queueing event for offline sync: staff.clock.out priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Error unsubscribing sub_1757793705985_mbutd8q8o: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793705985_9hndnxxms: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:46)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:46)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:46)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:46)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:46)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:46) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:46)

 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation 76ms
 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules 25ms
stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:46) { noncePrefix: [32m'6wdncyzf'[39m, timestamp: [32m'1757793706009'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:46)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:46)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:46) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:46) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:46) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:46) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:46) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:46) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:46) {
  subscriptionId: [32m'sub_1757793706010_d7z69mbvt'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:46) {
  subscriptionId: [32m'sub_1757793706010_p5sd2j0bn'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ÑπÔ∏è [EventBus] Module registered (05:01:46) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:46) {
  subscriptionId: [32m'sub_1757793706012_ie3kjdrfq'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ÑπÔ∏è [EventBus] Module registered (05:01:46) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:46) {
  subscriptionId: [32m'sub_1757793706013_eh4spfdor'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:46) {
  subscriptionId: [32m'sub_1757793706013_1xtmirbuw'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ÑπÔ∏è [EventBus] Module registered (05:01:46) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m, [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:46) {
  subscriptionId: [32m'sub_1757793706014_aj01h1fv3'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:46) {
  subscriptionId: [32m'sub_1757793706014_938ytyd2r'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ÑπÔ∏è [EventBus] Module registered (05:01:46) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Module 'test-staff' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.metrics: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST] Metrics event received: {
  uptime: [33m1013[39m,
  totalEvents: [33m7[39m,
  eventsPerSecond: [33m0.11666666666666667[39m,
  activeModules: [33m4[39m,
  activeSubscriptions: [33m8[39m,
  queueSize: [33m0[39m,
  errorRate: [33m0[39m,
  avgLatencyMs: [33m0.5234375[39m,
  memoryUsageMB: [33m0.008[39m,
  modules: {},
  eventPatterns: {
    [32m'global.eventbus.initialized'[39m: {
      totalEvents: [33m1[39m,
      avgLatencyMs: [33m1.5[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    },
    [32m'global.eventbus.module-registered'[39m: {
      totalEvents: [33m4[39m,
      avgLatencyMs: [33m1[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    },
    [32m'global.eventbus.module-activated'[39m: {
      totalEvents: [33m2[39m,
      avgLatencyMs: [33m0.25[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    }
  }
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757793706016_a914tva51) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.checked
[EventBus] Subscription added: inventory.stock.checked (sub_1757793706016_ld39511f1) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: staff.notified
[EventBus] Subscription added: staff.notified (sub_1757793706016_4jdl5mndc) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.order.received
[EventBus] Subscription added: kitchen.order.received (sub_1757793706016_32t708rx6) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: payments.payment.requested
[EventBus] Subscription added: payments.payment.requested (sub_1757793706016_drojxkl33) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: payments.payment.completed
[EventBus] Subscription added: payments.payment.completed (sub_1757793706017_j003dgc8g) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.order.completed
[EventBus] Subscription added: kitchen.order.completed (sub_1757793706017_jz39bl7wu) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Subscription added: sales.order.completed (sub_1757793706017_pnhhauv2f) [moduleId: anonymous]

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:46) {
  subscriptionId: [32m'sub_1757793706016_a914tva51'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:46) {
  subscriptionId: [32m'sub_1757793706016_ld39511f1'[39m,
  pattern: [32m'inventory.stock.checked'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:46) {
  subscriptionId: [32m'sub_1757793706016_4jdl5mndc'[39m,
  pattern: [32m'staff.notified'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:46) {
  subscriptionId: [32m'sub_1757793706016_32t708rx6'[39m,
  pattern: [32m'kitchen.order.received'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:46) {
  subscriptionId: [32m'sub_1757793706016_drojxkl33'[39m,
  pattern: [32m'payments.payment.requested'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:46) {
  subscriptionId: [32m'sub_1757793706017_j003dgc8g'[39m,
  pattern: [32m'payments.payment.completed'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:46) {
  subscriptionId: [32m'sub_1757793706017_jz39bl7wu'[39m,
  pattern: [32m'kitchen.order.completed'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:46) {
  subscriptionId: [32m'sub_1757793706017_pnhhauv2f'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[TestCustomers] Updated activity for customer CUST-VIP-001

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event inventory.stock.checked: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event staff.notified: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event payments.payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event sales.order.completed: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[TestInventory] Updating stock for order ORD-001

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync 108ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:46)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:46)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:46)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:46)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:46)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:46) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:46)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:46) { noncePrefix: [32m'10cnxn9d'[39m, timestamp: [32m'1757793706109'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:46)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:46)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:46) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:46) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:46) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:46) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:46) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:46) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[EventBus] Processing event test.sync.retry: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[OfflineIntegration] Queueing event for offline sync: test.sync.retry priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
Auto-sync failed: Error: Sync failed (attempt 1)
    at MockOfflineSync.<anonymous> [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\integration\offline-integration.test.ts:539:17[90m)[39m
    at MockOfflineSync.mockCall [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+spy@3.2.4/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at MockOfflineSync.syncPendingOperations [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/tinyspy@4.0.3/node_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at MockOfflineSync.autoSync [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\integration\offline-integration.test.ts:61:18[90m)[39m
    at MockOfflineSync.setOnline [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\integration\offline-integration.test.ts:51:12[90m)[39m
    at [90mI:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\integration\offline-integration.test.ts:553:23
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[OfflineIntegration] Auto-triggering sync with [33m1[39m queued operations...

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[OfflineIntegration] Auto-sync failed: Error: Sync failed (attempt 2)
    at MockOfflineSync.<anonymous> [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\integration\offline-integration.test.ts:539:17[90m)[39m
    at MockOfflineSync.mockCall [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+spy@3.2.4/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at MockOfflineSync.syncPendingOperations [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/tinyspy@4.0.3/node_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at [90mI:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\integration\offline-integration.test.ts:181:33

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync 111ms
 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow 257ms
stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:46) { noncePrefix: [32m'dimwqxag'[39m, timestamp: [32m'1757793706266'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:46)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:46)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:46) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:46) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:46) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:46) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:46) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:46) {
  subscriptionId: [32m'sub_1757793706268_oiaqluc2z'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:46) {
  subscriptionId: [32m'sub_1757793706268_m51bghe76'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
‚ÑπÔ∏è [EventBus] Module registered (05:01:46) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:46) {
  subscriptionId: [32m'sub_1757793706269_iwp8dlduo'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
‚ÑπÔ∏è [EventBus] Module registered (05:01:46) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:46) {
  subscriptionId: [32m'sub_1757793706270_9vluhl5uv'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:46) {
  subscriptionId: [32m'sub_1757793706270_wgauwqlw4'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
‚ÑπÔ∏è [EventBus] Module registered (05:01:46) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-0

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-1

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-2

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-3

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-4

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-5

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-6

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-7

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-8

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-9

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-0

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-1

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-2

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-3

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-4

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-5

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-6

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-7

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-8

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-9

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-0

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-1

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-2

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-3

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-4

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-5

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-6

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-7

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-8

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-9

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-0

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-1

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-2

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-3

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-4

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-5

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-6

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-7

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-8

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-9

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-0

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-1

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-2

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-3

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-4

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-5

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-6

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-7

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-8

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-9

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:46) { noncePrefix: [32m'sfux2vho'[39m, timestamp: [32m'1757793706298'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:46)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:46)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:46) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:46) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:46) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:46) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:46) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:46) {
  subscriptionId: [32m'sub_1757793706299_qnvac347k'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:46) {
  subscriptionId: [32m'sub_1757793706299_su2sedwig'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
‚ÑπÔ∏è [EventBus] Module registered (05:01:46) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:46) {
  subscriptionId: [32m'sub_1757793706301_jldmoty09'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
‚ÑπÔ∏è [EventBus] Module registered (05:01:46) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:46) {
  subscriptionId: [32m'sub_1757793706301_4i41k4k0h'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:46) {
  subscriptionId: [32m'sub_1757793706302_n09y9furk'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
‚ÑπÔ∏è [EventBus] Module registered (05:01:46) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757793706302_tprtzign4) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757793706302_xiaf4umtx) [moduleId: anonymous]

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:46) {
  subscriptionId: [32m'sub_1757793706302_tprtzign4'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:46) {
  subscriptionId: [32m'sub_1757793706302_xiaf4umtx'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[TestCustomers] Updated activity for customer undefined

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[TestCustomers] Updated activity for customer undefined

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:46)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:46)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:46)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:46)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:46)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:46) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:46)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:46) { noncePrefix: [32m'e7y98jey'[39m, timestamp: [32m'1757793706312'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:46)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:46)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:46) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:46) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:46) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:46) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:46) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:46) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[EventBus] Processing event sales.order.created: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[OfflineIntegration] Queueing event for offline sync: sales.order.created priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[EventBus] Processing event sales.order.created: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[OfflineIntegration] Queueing event for offline sync: sales.order.created priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[EventBus] Processing event sales.order.created: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[OfflineIntegration] Queueing event for offline sync: sales.order.created priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[OfflineIntegration] Auto-triggering sync with [33m1[39m queued operations...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[TestCustomers] Updated activity for customer undefined

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios 32ms
 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry 203ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:46)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:46)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:46)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:46)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:46)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:46) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:46)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:46) { noncePrefix: [32m'fzb9g2yv'[39m, timestamp: [32m'1757793706531'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:46)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:46)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:46) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:46) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:46) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:46) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:46) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:46) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Processing event test.order.1: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[OfflineIntegration] Queueing event for offline sync: test.order.1 priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Processing event test.order.2: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[OfflineIntegration] Queueing event for offline sync: test.order.2 priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Processing event test.order.3: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[OfflineIntegration] Queueing event for offline sync: test.order.3 priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Processing event test.order.4: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[OfflineIntegration] Queueing event for offline sync: test.order.4 priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions 252ms
 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures 219ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:46)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:46)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:46)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:46)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:46)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:46) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:46)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:46) { noncePrefix: [32m'p2b7acui'[39m, timestamp: [32m'1757793706644'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:46)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:46)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:46) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:46) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:46) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:46) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:46) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:46) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync 113ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:46)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:46)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:46)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:46)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:46)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:46) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:46)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:46) { noncePrefix: [32m'xg5chj5f'[39m, timestamp: [32m'1757793706879'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:46)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:46)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:46) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:46) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:46) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:46) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:46) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:46) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing 235ms
stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.metrics: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST] Metrics event received: {
  uptime: [33m2014[39m,
  totalEvents: [33m8[39m,
  eventsPerSecond: [33m0.13333333333333333[39m,
  activeModules: [33m4[39m,
  activeSubscriptions: [33m8[39m,
  queueSize: [33m0[39m,
  errorRate: [33m0[39m,
  avgLatencyMs: [33m0.76171875[39m,
  memoryUsageMB: [33m0.008[39m,
  modules: {},
  eventPatterns: {
    [32m'global.eventbus.initialized'[39m: {
      totalEvents: [33m1[39m,
      avgLatencyMs: [33m1.5[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    },
    [32m'global.eventbus.module-registered'[39m: {
      totalEvents: [33m4[39m,
      avgLatencyMs: [33m1[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    },
    [32m'global.eventbus.module-activated'[39m: {
      totalEvents: [33m2[39m,
      avgLatencyMs: [33m0.25[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    },
    [32m'global.eventbus.metrics'[39m: {
      totalEvents: [33m1[39m,
      avgLatencyMs: [33m0.5[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    }
  }
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:47)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:47)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:47)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:47)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:47)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:47) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:47)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:47) { noncePrefix: [32m'kmuq1bhw'[39m, timestamp: [32m'1757793707048'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:47)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:47)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:47) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:47) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:47) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:47) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:47) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:47) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[EventBus] Processing event test.large.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[OfflineIntegration] Queueing event for offline sync: test.large.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations 170ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:47)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:47)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:47)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:47)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:47)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:47) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:47)

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline 111ms
stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.metrics: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST] Metrics event received: {
  uptime: [33m3015[39m,
  totalEvents: [33m9[39m,
  eventsPerSecond: [33m0.15[39m,
  activeModules: [33m4[39m,
  activeSubscriptions: [33m8[39m,
  queueSize: [33m0[39m,
  errorRate: [33m0[39m,
  avgLatencyMs: [33m0.880859375[39m,
  memoryUsageMB: [33m0.008[39m,
  modules: {},
  eventPatterns: {
    [32m'global.eventbus.initialized'[39m: {
      totalEvents: [33m1[39m,
      avgLatencyMs: [33m1.5[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    },
    [32m'global.eventbus.module-registered'[39m: {
      totalEvents: [33m4[39m,
      avgLatencyMs: [33m1[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    },
    [32m'global.eventbus.module-activated'[39m: {
      totalEvents: [33m2[39m,
      avgLatencyMs: [33m0.25[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    },
    [32m'global.eventbus.metrics'[39m: {
      totalEvents: [33m2[39m,
      avgLatencyMs: [33m0.75[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    }
  }
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Module health changed: test-kitchen-failing -> active
[ModuleRegistry] Module 'test-kitchen-failing' health changed: error -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST] Health events received: [33m3[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST-AFTER] Cleaning up health monitoring tests...
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Deactivating module 'test-kitchen-failing'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-kitchen-failing'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Error unsubscribing sub_1757793705023_0zvl48fwg: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[TestKitchenModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Module 'test-kitchen-failing' deactivated successfully
[EventBus] Module deactivated: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Error unsubscribing sub_1757793705020_jy2xbth51: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793705020_esf8gqz5s: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Error unsubscribing sub_1757793705017_t9dabojzm: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Error unsubscribing sub_1757793705012_6br2tj0yt: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793705013_8vmylym3v: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:48)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:48)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:48)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:48)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:48)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:48) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:48)

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[HEALTH-TEST-BEFORE] Starting health monitoring test setup...
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:48) { noncePrefix: [32m'wcypa7p2'[39m, timestamp: [32m'1757793708056'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:48)

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:48) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:48) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:48) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:48) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:48) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (05:01:48) {
  keyVersion: [32m'key_1757793708056_91awqeys'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (05:01:48) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:48) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: **
[EventBus] Subscription added: ** (sub_1757793708059_pidi6pio2) [moduleId: anonymous]
[HEALTH-TEST-BEFORE] Health monitoring test setup completed! ‚úÖ

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:48) {
  subscriptionId: [32m'sub_1757793708059_pidi6pio2'[39m,
  pattern: [32m'**'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:48) {
  subscriptionId: [32m'sub_1757793708060_f1ry8i33g'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:48) {
  subscriptionId: [32m'sub_1757793708060_dpi55ow1c'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ÑπÔ∏è [EventBus] Module registered (05:01:48) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[HEALTH-TEST] Successfully registered module: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:48) {
  subscriptionId: [32m'sub_1757793708062_mawbgj40d'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ÑπÔ∏è [EventBus] Module registered (05:01:48) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[HEALTH-TEST] Successfully registered module: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:48) {
  subscriptionId: [32m'sub_1757793708063_fabm5yryq'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:48) {
  subscriptionId: [32m'sub_1757793708064_mvalc0pgp'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ÑπÔ∏è [EventBus] Module registered (05:01:48) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[HEALTH-TEST] Successfully registered module: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Activation order calculated: [
  [32m'test-inventory'[39m,
  [32m'test-customers'[39m,
  [32m'test-sales'[39m,
  [32m'test-kitchen-failing'[39m
]
[ModuleRegistry] Module 'test-kitchen-failing' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Activating module 'test-kitchen-failing'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Directly activating module 'test-kitchen-failing'...
[TestKitchenModule] Attempting activation...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Registering 1 subscriptions for module 'test-kitchen-failing'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Module health changed: test-kitchen-failing -> active
[ModuleRegistry] Module 'test-kitchen-failing' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Module 'test-kitchen-failing' activated directly
[EventBus] Module activated: test-kitchen-failing
[EventBus] Auto-registering handlers for module: test-kitchen-failing
[EventBus] Auto-registered handler: test-kitchen-failing.processOrder for pattern: orders.new
[EventBus] Auto-registered 1/1 handlers for module: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: orders.new

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:48) {
  subscriptionId: [32m'sub_1757793708065_9a2e7ohbw'[39m,
  pattern: [32m'orders.new'[39m,
  moduleId: [32m'test-kitchen-failing'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ÑπÔ∏è [EventBus] Module registered (05:01:48) {
  moduleId: [32m'test-kitchen-failing'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Kitchen Module (Failing)'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[HEALTH-TEST] Successfully registered module: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: global.eventbus.module-recovered
[EventBus] Subscription added: global.eventbus.module-recovered (sub_1757793708067_859v4bvm2) [moduleId: anonymous]
[ModuleRegistry] Module 'test-kitchen-failing' is already active

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:48) {
  subscriptionId: [32m'sub_1757793708067_859v4bvm2'[39m,
  pattern: [32m'global.eventbus.module-recovered'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Processing event global.eventbus.module-activated: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health 3055ms
stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Processing event global.eventbus.metrics: Found 1 matching subscriptions

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (05:01:50) {
  handlerId: [32m'sub_1757793705009_7srmqcz46'[39m,
  pattern: [32m'global.eventbus.module-registered'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757793705013_fdb65eb6-b5de-4f37-a07b-2ee557a5c132'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (05:01:50) {
  handlerId: [32m'sub_1757793705009_7srmqcz46'[39m,
  pattern: [32m'global.eventbus.module-registered'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757793705017_9fa109b4-040a-418f-b294-36055ccd9063'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (05:01:50) {
  handlerId: [32m'sub_1757793705009_7srmqcz46'[39m,
  pattern: [32m'global.eventbus.module-registered'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757793705021_ea4d3c60-2418-4ba1-a3d1-f66aac4516b7'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (05:01:50) {
  handlerId: [32m'sub_1757793705009_7srmqcz46'[39m,
  pattern: [32m'global.eventbus.module-registered'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757793705024_64d88650-cd49-4930-9658-f944e0a1f7bb'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (05:01:50) {
  handlerId: [32m'sub_1757793705009_7srmqcz46'[39m,
  pattern: [32m'global.eventbus.module-activated'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757793705026_481c1f7b-97d9-4ebb-8e1c-4b4dd03e1f50'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (05:01:50) {
  handlerId: [32m'sub_1757793705009_7srmqcz46'[39m,
  pattern: [32m'global.eventbus.module-activated'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757793705027_39af95a1-1a1b-473c-857b-d63a0c0947c3'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[HEALTH-TEST] Final module status: active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[HEALTH-TEST-AFTER] Cleaning up health monitoring tests...
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Deactivating module 'test-kitchen-failing'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-kitchen-failing'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Error unsubscribing sub_1757793708065_9a2e7ohbw: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[TestKitchenModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Module 'test-kitchen-failing' deactivated successfully
[EventBus] Module deactivated: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Error unsubscribing sub_1757793708063_fabm5yryq: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793708064_mvalc0pgp: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Error unsubscribing sub_1757793708062_mawbgj40d: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Error unsubscribing sub_1757793708060_f1ry8i33g: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793708060_dpi55ow1c: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:50)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:50)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:50)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:50)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:50)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:50) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:50)

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[HEALTH-TEST-BEFORE] Starting health monitoring test setup...
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:50) { noncePrefix: [32m'2tiwy3p0'[39m, timestamp: [32m'1757793710093'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:50)

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:50) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:50) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:50) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:50) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:50) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Processing event global.eventbus.metrics: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (05:01:50) {
  keyVersion: [32m'key_1757793710092_5z3j88ev'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (05:01:50) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:50) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Adding subscription to weak subscription manager for pattern: **
[EventBus] Subscription added: ** (sub_1757793710095_6udrw9wz3) [moduleId: anonymous]
[HEALTH-TEST-BEFORE] Health monitoring test setup completed! ‚úÖ

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:50) {
  subscriptionId: [32m'sub_1757793710095_6udrw9wz3'[39m,
  pattern: [32m'**'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:50) {
  subscriptionId: [32m'sub_1757793710096_rt1abi7dk'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:50) {
  subscriptionId: [32m'sub_1757793710096_mytdo86xa'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ÑπÔ∏è [EventBus] Module registered (05:01:50) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[HEALTH-TEST] Successfully registered module: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:50) {
  subscriptionId: [32m'sub_1757793710098_7vjfawxt5'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ÑπÔ∏è [EventBus] Module registered (05:01:50) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[HEALTH-TEST] Successfully registered module: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:50) {
  subscriptionId: [32m'sub_1757793710099_d8q4w8foq'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:50) {
  subscriptionId: [32m'sub_1757793710100_xdc691ypf'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ÑπÔ∏è [EventBus] Module registered (05:01:50) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[HEALTH-TEST] Successfully registered module: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Activation order calculated: [
  [32m'test-inventory'[39m,
  [32m'test-customers'[39m,
  [32m'test-sales'[39m,
  [32m'test-kitchen-failing'[39m
]
[ModuleRegistry] Module 'test-kitchen-failing' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Activating module 'test-kitchen-failing'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Directly activating module 'test-kitchen-failing'...
[TestKitchenModule] Attempting activation...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Registering 1 subscriptions for module 'test-kitchen-failing'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Module health changed: test-kitchen-failing -> active
[ModuleRegistry] Module 'test-kitchen-failing' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-kitchen-failing' activated directly
[EventBus] Module activated: test-kitchen-failing
[EventBus] Auto-registering handlers for module: test-kitchen-failing
[EventBus] Auto-registered handler: test-kitchen-failing.processOrder for pattern: orders.new
[EventBus] Auto-registered 1/1 handlers for module: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Adding subscription to weak subscription manager for pattern: orders.new

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:50) {
  subscriptionId: [32m'sub_1757793710101_udqyd00up'[39m,
  pattern: [32m'orders.new'[39m,
  moduleId: [32m'test-kitchen-failing'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ÑπÔ∏è [EventBus] Module registered (05:01:50) {
  moduleId: [32m'test-kitchen-failing'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Kitchen Module (Failing)'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[HEALTH-TEST] Successfully registered module: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Processing event global.eventbus.module-activated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-kitchen-failing' is already active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Processing event global.eventbus.module-activated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[HEALTH-TEST-AFTER] Cleaning up health monitoring tests...
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Deactivating module 'test-kitchen-failing'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-kitchen-failing'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Error unsubscribing sub_1757793710101_udqyd00up: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[TestKitchenModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-kitchen-failing' deactivated successfully
[EventBus] Module deactivated: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Error unsubscribing sub_1757793710099_d8q4w8foq: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793710100_xdc691ypf: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Error unsubscribing sub_1757793710098_7vjfawxt5: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Error unsubscribing sub_1757793710096_rt1abi7dk: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793710096_mytdo86xa: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:50)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:50)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:50)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:50)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:50)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:50) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:50)

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[HEALTH-TEST-BEFORE] Starting health monitoring test setup...
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:50) { noncePrefix: [32m'lbi0o5lh'[39m, timestamp: [32m'1757793710118'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:50)

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:50) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:50) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:50) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:50) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:50) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (05:01:50) {
  keyVersion: [32m'key_1757793710117_whjp7sj3'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (05:01:50) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:50) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Adding subscription to weak subscription manager for pattern: **
[EventBus] Subscription added: ** (sub_1757793710120_s8h46twq1) [moduleId: anonymous]
[HEALTH-TEST-BEFORE] Health monitoring test setup completed! ‚úÖ

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:50) {
  subscriptionId: [32m'sub_1757793710120_s8h46twq1'[39m,
  pattern: [32m'**'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:50) {
  subscriptionId: [32m'sub_1757793710121_7d9ipaz74'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:50) {
  subscriptionId: [32m'sub_1757793710122_ilyhesv6i'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ÑπÔ∏è [EventBus] Module registered (05:01:50) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[HEALTH-TEST] Successfully registered module: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:50) {
  subscriptionId: [32m'sub_1757793710123_7njl0v4rx'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ÑπÔ∏è [EventBus] Module registered (05:01:50) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[HEALTH-TEST] Successfully registered module: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:50) {
  subscriptionId: [32m'sub_1757793710124_218lxx0jv'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:50) {
  subscriptionId: [32m'sub_1757793710124_2s4i11r3a'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ÑπÔ∏è [EventBus] Module registered (05:01:50) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[HEALTH-TEST] Successfully registered module: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Activation order calculated: [
  [32m'test-inventory'[39m,
  [32m'test-customers'[39m,
  [32m'test-sales'[39m,
  [32m'test-kitchen-failing'[39m
]
[ModuleRegistry] Module 'test-kitchen-failing' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Activating module 'test-kitchen-failing'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Directly activating module 'test-kitchen-failing'...
[TestKitchenModule] Attempting activation...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Registering 1 subscriptions for module 'test-kitchen-failing'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Module health changed: test-kitchen-failing -> active
[ModuleRegistry] Module 'test-kitchen-failing' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Module 'test-kitchen-failing' activated directly
[EventBus] Module activated: test-kitchen-failing
[EventBus] Auto-registering handlers for module: test-kitchen-failing
[EventBus] Auto-registered handler: test-kitchen-failing.processOrder for pattern: orders.new
[EventBus] Auto-registered 1/1 handlers for module: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Adding subscription to weak subscription manager for pattern: orders.new

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:50) {
  subscriptionId: [32m'sub_1757793710126_5n926uaxw'[39m,
  pattern: [32m'orders.new'[39m,
  moduleId: [32m'test-kitchen-failing'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ÑπÔ∏è [EventBus] Module registered (05:01:50) {
  moduleId: [32m'test-kitchen-failing'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Kitchen Module (Failing)'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[HEALTH-TEST] Successfully registered module: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event global.eventbus.module-activated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[HEALTH-TEST] Generating activity for metrics...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios 2036ms
 ‚úì src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones 25ms
stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (05:01:51) {
  handlerId: [32m'sub_1757793705025_tnhwwhdfv'[39m,
  pattern: [32m'global.eventbus.metrics'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757793706015_242d0792-98e6-4b5d-a03d-904fa5e4acd2'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (05:01:51) {
  handlerId: [32m'sub_1757793705009_7srmqcz46'[39m,
  pattern: [32m'global.eventbus.metrics'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757793706015_242d0792-98e6-4b5d-a03d-904fa5e4acd2'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event global.eventbus.metrics: Found 1 matching subscriptions

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (05:01:52) {
  handlerId: [32m'sub_1757793705025_tnhwwhdfv'[39m,
  pattern: [32m'global.eventbus.metrics'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757793707016_81eaee41-5e12-4a92-bcc3-7040ba1c5b65'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (05:01:52) {
  handlerId: [32m'sub_1757793705009_7srmqcz46'[39m,
  pattern: [32m'global.eventbus.metrics'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757793707016_81eaee41-5e12-4a92-bcc3-7040ba1c5b65'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[HEALTH-TEST] Health metrics: {
  eventsProcessed: [33m24[39m,
  eventsEmitted: [33m56[39m,
  errorRate: [33m0.6163818587374532[39m,
  avgProcessingTimeMs: [33m29.73122229766193[39m,
  queueSize: [33m0[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[HEALTH-TEST-AFTER] Cleaning up health monitoring tests...
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Deactivating module 'test-kitchen-failing'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-kitchen-failing'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Error unsubscribing sub_1757793710126_5n926uaxw: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[TestKitchenModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Module 'test-kitchen-failing' deactivated successfully
[EventBus] Module deactivated: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Error unsubscribing sub_1757793710124_218lxx0jv: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793710124_2s4i11r3a: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Error unsubscribing sub_1757793710123_7njl0v4rx: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Error unsubscribing sub_1757793710121_7d9ipaz74: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793710122_ilyhesv6i: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:52)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:52)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:52)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:52)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:52)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:52) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:52)

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts
[EventBus] Processing event global.eventbus.metrics: Found 0 matching subscriptions

 ‚úì src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics 2032ms

 Test Files  4 passed (4)
      Tests  61 passed (61)
   Start at  17:01:42
   Duration  9.94s (transform 599ms, setup 1.27s, collect 1.61s, tests 10.99s, environment 5.78s, prepare 884ms)

