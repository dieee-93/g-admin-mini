
 RUN  v3.2.4 I:/Programacion/Proyectos/g-mini

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should create unique isolated instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336598_y5i7wt0j8'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should create unique isolated instances
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'test-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336598_y5i7wt0j8'[39m,
  instanceId: [32m'test-1'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336598_y5i7wt0j8'[39m,
  instanceId: [32m'test-1'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'test-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336598_y5i7wt0j8'[39m,
  instanceId: [32m'test-2'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336598_y5i7wt0j8'[39m,
  instanceId: [32m'test-2'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'2'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should create unique isolated instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336598_y5i7wt0j8'[39m,
  instancesToDestroy: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'test-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'test-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'test-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'test-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336598_y5i7wt0j8'[39m,
  instanceId: [32m'test-1'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336598_y5i7wt0j8'[39m,
  instanceId: [32m'test-2'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should create unique isolated instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336598_y5i7wt0j8'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should prevent duplicate instance IDs
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336638_z3gojtil1'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should prevent duplicate instance IDs
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'duplicate-test'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336638_z3gojtil1'[39m,
  instanceId: [32m'duplicate-test'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336638_z3gojtil1'[39m,
  instanceId: [32m'duplicate-test'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] THREAT: Attempted to create duplicate instance (03:48:56) {
  factoryId: [32m'factory_1757789336638_z3gojtil1'[39m,
  instanceId: [32m'duplicate-test'[39m,
  existingInstances: [ [32m'duplicate-test'[39m ]
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should prevent duplicate instance IDs
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336638_z3gojtil1'[39m,
  instancesToDestroy: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'duplicate-test'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'duplicate-test'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should prevent duplicate instance IDs
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336638_z3gojtil1'[39m,
  instanceId: [32m'duplicate-test'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should prevent duplicate instance IDs
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336638_z3gojtil1'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should retrieve existing instances by ID
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336642_gxm06c4tl'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should retrieve existing instances by ID
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'retrieve-test'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336642_gxm06c4tl'[39m,
  instanceId: [32m'retrieve-test'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336642_gxm06c4tl'[39m,
  instanceId: [32m'retrieve-test'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should retrieve existing instances by ID
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336642_gxm06c4tl'[39m,
  instancesToDestroy: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'retrieve-test'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'retrieve-test'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should retrieve existing instances by ID
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336642_gxm06c4tl'[39m,
  instanceId: [32m'retrieve-test'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should retrieve existing instances by ID
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336642_gxm06c4tl'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should return null for non-existent instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336644_oszsycqfl'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should return null for non-existent instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336644_oszsycqfl'[39m,
  instancesToDestroy: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should return null for non-existent instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336644_oszsycqfl'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should track instance metadata correctly
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336645_l80v9psg9'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should track instance metadata correctly
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'metadata-test'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336645_l80v9psg9'[39m,
  instanceId: [32m'metadata-test'[39m,
  namespace: [32m'test-namespace'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336645_l80v9psg9'[39m,
  instanceId: [32m'metadata-test'[39m,
  namespace: [32m'test-namespace'[39m,
  totalInstances: [32m'1'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should track instance metadata correctly
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336645_l80v9psg9'[39m,
  instancesToDestroy: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'metadata-test'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'metadata-test'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should track instance metadata correctly
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336645_l80v9psg9'[39m,
  instanceId: [32m'metadata-test'[39m,
  namespace: [32m'test-namespace'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should track instance metadata correctly
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336645_l80v9psg9'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should destroy instances properly
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336648_b9sw9kq0s'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should destroy instances properly
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'destroy-test'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336648_b9sw9kq0s'[39m,
  instanceId: [32m'destroy-test'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336648_b9sw9kq0s'[39m,
  instanceId: [32m'destroy-test'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'destroy-test'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'destroy-test'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should destroy instances properly
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336648_b9sw9kq0s'[39m,
  instanceId: [32m'destroy-test'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should destroy instances properly
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336648_b9sw9kq0s'[39m,
  instancesToDestroy: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should destroy instances properly
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336648_b9sw9kq0s'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should pause and resume instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336650_7e1m9w499'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should pause and resume instances
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'pause-test'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336650_7e1m9w499'[39m,
  instanceId: [32m'pause-test'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336650_7e1m9w499'[39m,
  instanceId: [32m'pause-test'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance paused (03:48:56) {
  factoryId: [32m'factory_1757789336650_7e1m9w499'[39m,
  instanceId: [32m'pause-test'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance resumed (03:48:56) {
  factoryId: [32m'factory_1757789336650_7e1m9w499'[39m,
  instanceId: [32m'pause-test'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should pause and resume instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336650_7e1m9w499'[39m,
  instancesToDestroy: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'pause-test'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'pause-test'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should pause and resume instances
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336650_7e1m9w499'[39m,
  instanceId: [32m'pause-test'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should pause and resume instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336650_7e1m9w499'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should handle invalid lifecycle operations
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336653_li6vnju9y'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should handle invalid lifecycle operations
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336653_li6vnju9y'[39m,
  instancesToDestroy: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should handle invalid lifecycle operations
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336653_li6vnju9y'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should handle invalid lifecycle operations
Promise returned by `expect(actual).resolves.toBe(expected)` was not awaited. Vitest currently auto-awaits hanging assertions at the end of the test, but this will cause the test to fail in Vitest 3. Please remember to await the assertion.
    at I:/Programacion/Proyectos/g-mini/src/lib/events/__tests__/integration/EventBusFactory.test.ts:121:38

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate events between instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336662_n755cx8r2'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate events between instances
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'isolation-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336662_n755cx8r2'[39m,
  instanceId: [32m'isolation-1'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336662_n755cx8r2'[39m,
  instanceId: [32m'isolation-1'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'isolation-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336662_n755cx8r2'[39m,
  instanceId: [32m'isolation-2'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336662_n755cx8r2'[39m,
  instanceId: [32m'isolation-2'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'2'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate events between instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336662_n755cx8r2'[39m,
  instancesToDestroy: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'isolation-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'isolation-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'isolation-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'isolation-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336662_n755cx8r2'[39m,
  instanceId: [32m'isolation-1'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336662_n755cx8r2'[39m,
  instanceId: [32m'isolation-2'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate events between instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336662_n755cx8r2'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate storage between instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336667_jt9atjitt'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate storage between instances
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'storage-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336667_jt9atjitt'[39m,
  instanceId: [32m'storage-1'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336667_jt9atjitt'[39m,
  instanceId: [32m'storage-1'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'storage-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336667_jt9atjitt'[39m,
  instanceId: [32m'storage-2'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336667_jt9atjitt'[39m,
  instanceId: [32m'storage-2'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'2'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate storage between instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336667_jt9atjitt'[39m,
  instancesToDestroy: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'storage-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'storage-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'storage-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'storage-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336667_jt9atjitt'[39m,
  instanceId: [32m'storage-1'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336667_jt9atjitt'[39m,
  instanceId: [32m'storage-2'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate storage between instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336667_jt9atjitt'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate module registries between instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336671_h9086djp9'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate module registries between instances
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'modules-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336671_h9086djp9'[39m,
  instanceId: [32m'modules-1'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336671_h9086djp9'[39m,
  instanceId: [32m'modules-1'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'modules-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336671_h9086djp9'[39m,
  instanceId: [32m'modules-2'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336671_h9086djp9'[39m,
  instanceId: [32m'modules-2'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'2'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate module registries between instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336671_h9086djp9'[39m,
  instancesToDestroy: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'modules-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'modules-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'modules-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'modules-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336671_h9086djp9'[39m,
  instanceId: [32m'modules-1'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336671_h9086djp9'[39m,
  instanceId: [32m'modules-2'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate module registries between instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336671_h9086djp9'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should provide accurate factory metrics
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336675_kzqtkkg0c'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should provide accurate factory metrics
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'active-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336675_kzqtkkg0c'[39m,
  instanceId: [32m'active-1'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336675_kzqtkkg0c'[39m,
  instanceId: [32m'active-1'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'active-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336675_kzqtkkg0c'[39m,
  instanceId: [32m'active-2'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336675_kzqtkkg0c'[39m,
  instanceId: [32m'active-2'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'paused-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336675_kzqtkkg0c'[39m,
  instanceId: [32m'paused-1'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336675_kzqtkkg0c'[39m,
  instanceId: [32m'paused-1'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'3'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance paused (03:48:56) {
  factoryId: [32m'factory_1757789336675_kzqtkkg0c'[39m,
  instanceId: [32m'paused-1'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should provide accurate factory metrics
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336675_kzqtkkg0c'[39m,
  instancesToDestroy: [32m'3'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'active-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'active-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'active-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'active-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'paused-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'paused-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336675_kzqtkkg0c'[39m,
  instanceId: [32m'active-1'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336675_kzqtkkg0c'[39m,
  instanceId: [32m'active-2'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336675_kzqtkkg0c'[39m,
  instanceId: [32m'paused-1'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should provide accurate factory metrics
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336675_kzqtkkg0c'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should list instances correctly
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336682_hzv0id4y5'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should list instances correctly
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'list-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336682_hzv0id4y5'[39m,
  instanceId: [32m'list-1'[39m,
  namespace: [32m'ns1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336682_hzv0id4y5'[39m,
  instanceId: [32m'list-1'[39m,
  namespace: [32m'ns1'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'list-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336682_hzv0id4y5'[39m,
  instanceId: [32m'list-2'[39m,
  namespace: [32m'ns2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336682_hzv0id4y5'[39m,
  instanceId: [32m'list-2'[39m,
  namespace: [32m'ns2'[39m,
  totalInstances: [32m'2'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should list instances correctly
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336682_hzv0id4y5'[39m,
  instancesToDestroy: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'list-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'list-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'list-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'list-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336682_hzv0id4y5'[39m,
  instanceId: [32m'list-1'[39m,
  namespace: [32m'ns1'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336682_hzv0id4y5'[39m,
  instanceId: [32m'list-2'[39m,
  namespace: [32m'ns2'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should list instances correctly
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336682_hzv0id4y5'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should group instances by namespace
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336686_quqn6dsck'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should group instances by namespace
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'ns-test-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336686_quqn6dsck'[39m,
  instanceId: [32m'ns-test-1'[39m,
  namespace: [32m'group-a'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336686_quqn6dsck'[39m,
  instanceId: [32m'ns-test-1'[39m,
  namespace: [32m'group-a'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'ns-test-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336686_quqn6dsck'[39m,
  instanceId: [32m'ns-test-2'[39m,
  namespace: [32m'group-a'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336686_quqn6dsck'[39m,
  instanceId: [32m'ns-test-2'[39m,
  namespace: [32m'group-a'[39m,
  totalInstances: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'ns-test-3'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336686_quqn6dsck'[39m,
  instanceId: [32m'ns-test-3'[39m,
  namespace: [32m'group-b'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336686_quqn6dsck'[39m,
  instanceId: [32m'ns-test-3'[39m,
  namespace: [32m'group-b'[39m,
  totalInstances: [32m'3'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should group instances by namespace
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336686_quqn6dsck'[39m,
  instancesToDestroy: [32m'3'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'ns-test-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'ns-test-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'ns-test-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'ns-test-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'ns-test-3'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'ns-test-3'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336686_quqn6dsck'[39m,
  instanceId: [32m'ns-test-1'[39m,
  namespace: [32m'group-a'[39m,
  remainingInstances: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336686_quqn6dsck'[39m,
  instanceId: [32m'ns-test-2'[39m,
  namespace: [32m'group-a'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336686_quqn6dsck'[39m,
  instanceId: [32m'ns-test-3'[39m,
  namespace: [32m'group-b'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should group instances by namespace
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336686_quqn6dsck'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should create microfrontend-ready instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336691_4y7cnv4vc'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should create microfrontend-ready instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336691_do24gcolg'[39m,
  namespace: [32m'mf-test'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'mf-instance-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336691_do24gcolg'[39m,
  instanceId: [32m'mf-instance-1'[39m,
  namespace: [32m'mf-test'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Microfrontend support setup (03:48:56) {
  factoryId: [32m'factory_1757789336691_do24gcolg'[39m,
  instanceId: [32m'mf-instance-1'[39m,
  crossInstanceCommunication: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336691_do24gcolg'[39m,
  instanceId: [32m'mf-instance-1'[39m,
  namespace: [32m'mf-test'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336691_do24gcolg'[39m,
  instancesToDestroy: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'mf-instance-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'mf-instance-1'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should create microfrontend-ready instances
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336691_do24gcolg'[39m,
  instanceId: [32m'mf-instance-1'[39m,
  namespace: [32m'mf-test'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should create microfrontend-ready instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336691_do24gcolg'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should create microfrontend-ready instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336691_4y7cnv4vc'[39m,
  instancesToDestroy: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should create microfrontend-ready instances
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336691_4y7cnv4vc'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should support cross-instance communication when enabled
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336694_1k01ik6qf'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should support cross-instance communication when enabled
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336694_ibvrclrnf'[39m,
  namespace: [32m'cross-comm'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'comm-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336694_ibvrclrnf'[39m,
  instanceId: [32m'comm-1'[39m,
  namespace: [32m'cross-comm'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Microfrontend support setup (03:48:56) {
  factoryId: [32m'factory_1757789336694_ibvrclrnf'[39m,
  instanceId: [32m'comm-1'[39m,
  crossInstanceCommunication: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336694_ibvrclrnf'[39m,
  instanceId: [32m'comm-1'[39m,
  namespace: [32m'cross-comm'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'comm-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336694_ibvrclrnf'[39m,
  instanceId: [32m'comm-2'[39m,
  namespace: [32m'cross-comm'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Microfrontend support setup (03:48:56) {
  factoryId: [32m'factory_1757789336694_ibvrclrnf'[39m,
  instanceId: [32m'comm-2'[39m,
  crossInstanceCommunication: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336694_ibvrclrnf'[39m,
  instanceId: [32m'comm-2'[39m,
  namespace: [32m'cross-comm'[39m,
  totalInstances: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336694_ibvrclrnf'[39m,
  instancesToDestroy: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'comm-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'comm-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'comm-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'comm-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336694_ibvrclrnf'[39m,
  instanceId: [32m'comm-1'[39m,
  namespace: [32m'cross-comm'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336694_ibvrclrnf'[39m,
  instanceId: [32m'comm-2'[39m,
  namespace: [32m'cross-comm'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should support cross-instance communication when enabled
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336694_ibvrclrnf'[39m }

 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should create unique isolated instances 41ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should prevent duplicate instance IDs 4ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should retrieve existing instances by ID 2ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Instance Management > should return null for non-existent instances 1ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should track instance metadata correctly 3ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should destroy instances properly 2ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should pause and resume instances 3ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Lifecycle Management > should handle invalid lifecycle operations 9ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate events between instances 5ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate storage between instances 4ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Instance Isolation > should isolate module registries between instances 4ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should provide accurate factory metrics 7ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should list instances correctly 4ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Factory Metrics and Monitoring > should group instances by namespace 5ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should create microfrontend-ready instances 3ms
stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should support cross-instance communication when enabled
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336694_1k01ik6qf'[39m,
  instancesToDestroy: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should support cross-instance communication when enabled
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336694_1k01ik6qf'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should manage global factory registry
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336698_5abanqofu'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should manage global factory registry
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336699_jg3r9rrtl'[39m,
  namespace: [32m'default'[39m,
  isolated: [32m'false'[39m,
  microfrontendMode: [32m'false'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336699_hy01uadi5'[39m,
  namespace: [32m'default'[39m,
  isolated: [32m'false'[39m,
  microfrontendMode: [32m'false'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336699_jg3r9rrtl'[39m,
  instancesToDestroy: [32m'0'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336699_hy01uadi5'[39m,
  instancesToDestroy: [32m'0'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336699_jg3r9rrtl'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336699_hy01uadi5'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should manage global factory registry
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336698_5abanqofu'[39m,
  instancesToDestroy: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should manage global factory registry
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336698_5abanqofu'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should destroy all factories
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336700_imj4f8jmc'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should destroy all factories
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336700_emvuoerec'[39m,
  namespace: [32m'default'[39m,
  isolated: [32m'false'[39m,
  microfrontendMode: [32m'false'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336701_2rfn59bwv'[39m,
  namespace: [32m'default'[39m,
  isolated: [32m'false'[39m,
  microfrontendMode: [32m'false'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336700_emvuoerec'[39m,
  instancesToDestroy: [32m'0'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336700_emvuoerec'[39m,
  instancesToDestroy: [32m'0'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336701_2rfn59bwv'[39m,
  instancesToDestroy: [32m'0'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336701_2rfn59bwv'[39m,
  instancesToDestroy: [32m'0'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336700_emvuoerec'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336700_emvuoerec'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336701_2rfn59bwv'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336701_2rfn59bwv'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should destroy all factories
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336700_imj4f8jmc'[39m,
  instancesToDestroy: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should destroy all factories
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336700_imj4f8jmc'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle destroyed factory operations gracefully
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336702_tmparf7ny'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle destroyed factory operations gracefully
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336703_fy5fe1vx7'[39m,
  namespace: [32m'default'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336703_fy5fe1vx7'[39m,
  instancesToDestroy: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle destroyed factory operations gracefully
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336703_fy5fe1vx7'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle destroyed factory operations gracefully
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336702_tmparf7ny'[39m,
  instancesToDestroy: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle destroyed factory operations gracefully
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336702_tmparf7ny'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle concurrent instance creation
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:56) { noncePrefix: [32m'gr7ce9ft'[39m, timestamp: [32m'1757789336701'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:56)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:56) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:56) { noncePrefix: [32m'65b3x5h9'[39m, timestamp: [32m'1757789336705'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:56)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:56) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'a8ae8d4c...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:56) { noncePrefix: [32m'2hv2kp68'[39m, timestamp: [32m'1757789336707'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:56)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:56) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'a8ae8d4c...'[39m }

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'1f1ed7ed...'[39m }

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'be6bd153...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle concurrent instance creation
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'concurrent-0'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-0'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-0'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'concurrent-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-1'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-1'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'concurrent-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-2'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-2'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'3'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'concurrent-3'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-3'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-3'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'4'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'concurrent-4'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-4'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-4'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'5'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'concurrent-5'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-5'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-5'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'6'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'concurrent-6'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-6'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-6'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'7'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'concurrent-7'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-7'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-7'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'8'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'concurrent-8'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-8'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-8'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'9'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'concurrent-9'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-9'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-9'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'10'[39m
}

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'1f1ed7ed...'[39m }

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'be6bd153...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle concurrent instance creation
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instancesToDestroy: [32m'10'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'concurrent-0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'concurrent-0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'concurrent-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'concurrent-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'concurrent-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'concurrent-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'concurrent-3'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'concurrent-3'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'concurrent-4'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'concurrent-4'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'concurrent-5'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'concurrent-5'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'concurrent-6'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'concurrent-6'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'concurrent-7'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'concurrent-7'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'concurrent-8'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'concurrent-8'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'concurrent-9'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'concurrent-9'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-0'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'9'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-1'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'8'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-2'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'7'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-3'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'6'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-4'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'5'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-5'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'4'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-6'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'3'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-7'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-8'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336704_919yue6zi'[39m,
  instanceId: [32m'concurrent-9'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle concurrent instance creation
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336704_919yue6zi'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle rapid destroy and recreate operations
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336720_xer82ppd9'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle rapid destroy and recreate operations
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'rapid-test'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336720_xer82ppd9'[39m,
  instanceId: [32m'rapid-test'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336720_xer82ppd9'[39m,
  instanceId: [32m'rapid-test'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'rapid-test'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'rapid-test'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle rapid destroy and recreate operations
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336720_xer82ppd9'[39m,
  instanceId: [32m'rapid-test'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle rapid destroy and recreate operations
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'rapid-test'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336720_xer82ppd9'[39m,
  instanceId: [32m'rapid-test'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336720_xer82ppd9'[39m,
  instanceId: [32m'rapid-test'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle rapid destroy and recreate operations
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336720_xer82ppd9'[39m,
  instancesToDestroy: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'rapid-test'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'rapid-test'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle rapid destroy and recreate operations
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336720_xer82ppd9'[39m,
  instanceId: [32m'rapid-test'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle rapid destroy and recreate operations
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336720_xer82ppd9'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Performance and Scalability > should handle multiple instances efficiently
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory created (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  namespace: [32m'test-factory'[39m,
  isolated: [32m'true'[39m,
  microfrontendMode: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST-BEFORE] Starting health monitoring test setup...
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:56) { noncePrefix: [32m'ylkxz5zg'[39m, timestamp: [32m'1757789336724'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:56)

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (03:48:56) {
  keyVersion: [32m'key_1757789336706_l6etzsug'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (03:48:56) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:56) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Adding subscription to weak subscription manager for pattern: **
[EventBus] Subscription added: ** (sub_1757789336732_nar375k7o) [moduleId: anonymous]
[HEALTH-TEST-BEFORE] Health monitoring test setup completed! ‚úÖ

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336732_nar375k7o'[39m,
  pattern: [32m'**'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:56) { noncePrefix: [32m'yj8wpgwe'[39m, timestamp: [32m'1757789336730'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:56)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:56) { noncePrefix: [32m'k94hn9xp'[39m, timestamp: [32m'1757789336734'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:56)

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336734_rsyij1kd7'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336735_tj62yqrhw'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Performance and Scalability > should handle multiple instances efficiently
Performance Metrics: {
  instanceCount: [33m10[39m,
  createTimeMs: [33m10.454999999999927[39m,
  avgCreateTime: [33m1.0454999999999928[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Performance and Scalability > should handle multiple instances efficiently
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'perf-0'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-0'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-0'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'perf-1'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-1'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-1'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'perf-2'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-2'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-2'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'3'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'perf-3'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-3'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-3'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'4'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'perf-4'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-4'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-4'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'5'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'perf-5'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-5'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-5'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'6'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'perf-6'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-6'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-6'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'7'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'perf-7'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-7'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-7'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'8'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'perf-8'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-8'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-8'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'9'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  instanceId: [32m'perf-9'[39m,
  config: {
    persistenceEnabled: [32m'true'[39m,
    deduplicationEnabled: [32m'true'[39m,
    metricsEnabled: [32m'true'[39m
  }
}
‚ùå [Security] [SECURITY] ANOMALY: Instance isolation setup (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-9'[39m,
  namespace: [32m'test-factory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance created (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-9'[39m,
  namespace: [32m'test-factory'[39m,
  totalInstances: [32m'10'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:56) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ÑπÔ∏è [EventBus] Module registered (03:48:56) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST] Successfully registered module: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:56) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336738_dkhpuf7if'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ÑπÔ∏è [EventBus] Module registered (03:48:56) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
[OfflineIntegration] Starting automatic persistent event queuing test...
[OfflineIntegration] Created order event: sales.order.created
[OfflineIntegration] Emitting event with persistent=true...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST] Successfully registered module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Performance and Scalability > should handle multiple instances efficiently
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroying (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instancesToDestroy: [32m'10'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'perf-0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'perf-0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'perf-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'perf-1'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'perf-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'perf-2'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'perf-3'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'perf-3'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'perf-4'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'perf-4'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'perf-5'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'perf-5'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'perf-6'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'perf-6'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'perf-7'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'perf-7'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'perf-8'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'perf-8'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown initiated (03:48:56) { instanceId: [32m'perf-9'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: EventBus graceful shutdown completed (03:48:56) { instanceId: [32m'perf-9'[39m }
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-0'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'9'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-1'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'8'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-2'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'7'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-3'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'6'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-4'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'5'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-5'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'4'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-6'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'3'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-7'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'2'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-8'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'1'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: EventBus instance destroyed (03:48:56) {
  factoryId: [32m'factory_1757789336725_exn81p9zd'[39m,
  instanceId: [32m'perf-9'[39m,
  namespace: [32m'test-factory'[39m,
  remainingInstances: [32m'0'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
[EventBus] Processing event sales.order.created: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Performance and Scalability > should handle multiple instances efficiently
‚ùå [Security] [SECURITY] ANOMALY: EventBusFactory destroyed (03:48:56) { factoryId: [32m'factory_1757789336725_exn81p9zd'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
[OfflineIntegration] Queueing event for offline sync: sales.order.created priority: [33m1[39m

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336736_2hdikslo8'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336737_zu0v7aa6m'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336740_nkzwpx0z8'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336740_kqwpadp1w'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ÑπÔ∏è [EventBus] Module registered (03:48:56) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST] Successfully registered module: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Activation order calculated: [
  [32m'test-inventory'[39m,
  [32m'test-customers'[39m,
  [32m'test-sales'[39m,
  [32m'test-kitchen-failing'[39m
]
[ModuleRegistry] Module 'test-kitchen-failing' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Activating module 'test-kitchen-failing'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Directly activating module 'test-kitchen-failing'...
[TestKitchenModule] Attempting activation...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Registering 1 subscriptions for module 'test-kitchen-failing'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Module health changed: test-kitchen-failing -> active
[ModuleRegistry] Module 'test-kitchen-failing' health changed: inactive -> active

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'eef31839...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Module 'test-kitchen-failing' activated directly
[EventBus] Module activated: test-kitchen-failing
[EventBus] Auto-registering handlers for module: test-kitchen-failing
[EventBus] Auto-registered handler: test-kitchen-failing.processOrder for pattern: orders.new
[EventBus] Auto-registered 1/1 handlers for module: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'eef31839...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ÑπÔ∏è [EventBus] Module registered (03:48:56) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Adding subscription to weak subscription manager for pattern: orders.new

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
[OfflineIntegration] Event emitted successfully
[OfflineIntegration] Checking queued operations...
[OfflineIntegration] Found queued operations: [33m1[39m
[OfflineIntegration] First queued operation: {
  type: [32m'CREATE'[39m,
  entity: [32m'events'[39m,
  data: {
    id: [32m'evt_1757789336739_9b817a43-aa63-4afd-9140-bca2606b12f1'[39m,
    pattern: [32m'sales.order.created'[39m,
    payload: {
      orderId: [32m'ORD-OFFLINE-001'[39m,
      customerId: [32m'CUST-001'[39m,
      items: [36m[Array][39m,
      total: [33m61.08[39m,
      timestamp: [32m'2025-09-13T18:48:56.739Z'[39m
    },
    timestamp: [32m'2025-09-13T18:48:56.739Z'[39m,
    source: [32m'eventbus-v2'[39m,
    version: [32m'1.0.0'[39m,
    correlationId: [90mundefined[39m,
    userId: [90mundefined[39m,
    metadata: {
      priority: [32m'high'[39m,
      persistent: [33mtrue[39m,
      crossModule: [33mtrue[39m,
      deduplication: [36m[Object][39m,
      tracing: [36m[Object][39m,
      retryPolicy: [90mundefined[39m
    }
  },
  priority: [33m1[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'5b91c5c1...'[39m }

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336742_c01v5a7a1'[39m,
  pattern: [32m'orders.new'[39m,
  moduleId: [32m'test-kitchen-failing'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Activating module 'test-customers'...

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'5b91c5c1...'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'd0def77f...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ÑπÔ∏è [EventBus] Module registered (03:48:56) {
  moduleId: [32m'test-kitchen-failing'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Kitchen Module (Failing)'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'd0def77f...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST] Successfully registered module: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:48:56)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:48:56)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'972eb7d4...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Adding subscription to weak subscription manager for pattern: global.eventbus.metrics
[EventBus] Subscription added: global.eventbus.metrics (sub_1757789336744_8fa5z4h0z) [moduleId: anonymous]
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'972eb7d4...'[39m }

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336744_8fa5z4h0z'[39m,
  pattern: [32m'global.eventbus.metrics'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'f1c79520...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.module-activated: Found 1 matching subscriptions

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336740_w5ug7cqg1'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'f1c79520...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Module 'test-kitchen-failing' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'2810f3d0...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.module-activated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ÑπÔ∏è [EventBus] Module registered (03:48:56) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'2810f3d0...'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST] Waiting for health monitoring cycles...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'cc1a5c2a...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Activating module 'test-sales'...

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'cc1a5c2a...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should not queue non-persistent events
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:56) { noncePrefix: [32m'02js3wf4'[39m, timestamp: [32m'1757789336746'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:56)

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'de0fe5b9...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should not queue non-persistent events
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'de0fe5b9...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'42cda7b6...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'42cda7b6...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should not queue non-persistent events
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:56) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'8dcf1484...'[39m }

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336742_oh04z0rgv'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336742_f5ts55hxl'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'8dcf1484...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'035ed208...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ÑπÔ∏è [EventBus] Module registered (03:48:56) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'035ed208...'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should not queue non-persistent events
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m, [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'a2a6fc3d...'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should not queue non-persistent events
[EventBus] Processing event system.health.check: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Activating module 'test-staff'...

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'a2a6fc3d...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'fa2eb2d4...'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should not queue non-persistent events
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'fa2eb2d4...'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should not queue non-persistent events
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'dfab6c1c...'[39m }

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should not queue non-persistent events
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:48:56)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:48:56)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'dfab6c1c...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'9d256568...'[39m }

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336744_klx506xyj'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336744_y5d75jy4e'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'9d256568...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'55f5d911...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
‚ÑπÔ∏è [EventBus] Module registered (03:48:56) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'55f5d911...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[ModuleRegistry] Module 'test-sales' is already active

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'f7b02c2a...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'f7b02c2a...'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:56) { noncePrefix: [32m'mptas35f'[39m, timestamp: [32m'1757789336750'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:56)

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'85b87811...'[39m }

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'85b87811...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'c3e4e16b...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'c3e4e16b...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'9151fa62...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'9151fa62...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'6357fe08...'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:56) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'6357fe08...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'40d31542...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'40d31542...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'32f53299...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'32f53299...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'31d51e9e...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'31d51e9e...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'f62315de...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'f62315de...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'0cd73ec0...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'0cd73ec0...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'5e106ef9...'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'5e106ef9...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'2937a3c2...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'2937a3c2...'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[EventBus] Processing event sales.order.created: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'0b91255a...'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[OfflineIntegration] Queueing event for offline sync: sales.order.created priority: [33m3[39m

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'0b91255a...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:56) { noncePrefix: [32m'hb3qelx6'[39m, timestamp: [32m'1757789336749'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:56)

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'1f58a7a0...'[39m }

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'1f58a7a0...'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[EventBus] Processing event payments.payment.processed: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'6f9d45ea...'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[OfflineIntegration] Queueing event for offline sync: payments.payment.processed priority: [33m0[39m

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'6f9d45ea...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'4ee8d2b2...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:56) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'4ee8d2b2...'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[EventBus] Processing event inventory.stock.low: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'e7635ead...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[OfflineIntegration] Queueing event for offline sync: inventory.stock.low priority: [33m2[39m

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'e7635ead...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Activating module 'test-inventory'...

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'c06e0a4f...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'c06e0a4f...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'c01e1439...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'c01e1439...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'af264109...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'af264109...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'1f457781...'[39m }

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336751_gbwix24qm'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336751_9hfonoe4b'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'1f457781...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'da15fe8d...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'da15fe8d...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'c1726bc6...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'c1726bc6...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'18cefd67...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
‚ÑπÔ∏è [EventBus] Module registered (03:48:56) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'18cefd67...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-kitchen-failing'[39m ]
[ModuleRegistry] Module 'test-kitchen-failing' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Activating module 'test-kitchen-failing'...

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'b9ca38b0...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Directly activating module 'test-kitchen-failing'...
[TestKitchenModule] Attempting activation...

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'b9ca38b0...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Registering 1 subscriptions for module 'test-kitchen-failing'

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'1a3c0ae0...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[EventBus] Module health changed: test-kitchen-failing -> active
[ModuleRegistry] Module 'test-kitchen-failing' health changed: inactive -> active

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'1a3c0ae0...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Module 'test-kitchen-failing' activated directly
[EventBus] Module activated: test-kitchen-failing
[EventBus] Auto-registering handlers for module: test-kitchen-failing
[EventBus] Auto-registered handler: test-kitchen-failing.processOrder for pattern: orders.new
[EventBus] Auto-registered 1/1 handlers for module: test-kitchen-failing

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'a87cbad7...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'a87cbad7...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[EventBus] Adding subscription to weak subscription manager for pattern: orders.new

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'e8f75398...'[39m }

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336753_tesuwcmjp'[39m,
  pattern: [32m'orders.new'[39m,
  moduleId: [32m'test-kitchen-failing'[39m
}

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'e8f75398...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'5a9313f7...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'5a9313f7...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'43c3d7a5...'[39m }

stderr | src/lib/events/__tests__/integration/EventBusFactory.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:48:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'43c3d7a5...'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
‚ÑπÔ∏è [EventBus] Module registered (03:48:56) {
  moduleId: [32m'test-kitchen-failing'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Kitchen Module (Failing)'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[ModuleRegistry] Module 'test-kitchen-failing' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Microfrontend Support > should support cross-instance communication when enabled 4ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should manage global factory registry 2ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Static Factory Methods > should destroy all factories 2ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle destroyed factory operations gracefully 2ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle concurrent instance creation 16ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Error Handling and Edge Cases > should handle rapid destroy and recreate operations 5ms
 ‚úì src/lib/events/__tests__/integration/EventBusFactory.test.ts > EventBusFactory Integration Tests > Performance and Scalability > should handle multiple instances efficiently 16ms
stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:56) { noncePrefix: [32m'd5db2679'[39m, timestamp: [32m'1757789336756'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:56)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:56) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Adding subscription to weak subscription manager for pattern: global.eventbus.module-registered
[EventBus] Subscription added: global.eventbus.module-registered (sub_1757789336757_74l4cvrrc) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: global.eventbus.module-activated
[EventBus] Subscription added: global.eventbus.module-activated (sub_1757789336758_6ww0qxwyb) [moduleId: anonymous]

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336757_74l4cvrrc'[39m,
  pattern: [32m'global.eventbus.module-registered'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336758_6ww0qxwyb'[39m,
  pattern: [32m'global.eventbus.module-activated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336759_6z37d1tdh'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336759_azjkbl9b4'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
‚ÑπÔ∏è [EventBus] Module registered (03:48:56) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336761_7jrev23f2'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
‚ÑπÔ∏è [EventBus] Module registered (03:48:56) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336763_ixs34z1ks'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336763_rqy5zl9tb'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
‚ÑπÔ∏è [EventBus] Module registered (03:48:56) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation
[EventBus] Processing event global.eventbus.module-activated: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should register and activate modules with dependencies in correct order 20ms
 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle module activation failures gracefully 7ms
 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should automatically queue persistent events for offline sync 12ms
 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should not queue non-persistent events 4ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:48:56)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:48:56)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:56) { noncePrefix: [32m'30aib14i'[39m, timestamp: [32m'1757789336866'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:56)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:56) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:56) { noncePrefix: [32m'hve5725w'[39m, timestamp: [32m'1757789336871'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:56)

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Activation order calculated: [ [32m'module-a'[39m ]
[ModuleRegistry] Module 'module-a' registered successfully

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Activating module 'module-a'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Directly activating module 'module-a'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Registering 2 subscriptions for module 'module-a'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Module health changed: module-a -> active
[ModuleRegistry] Module 'module-a' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Module 'module-a' activated directly
[EventBus] Module activated: module-a
[EventBus] Auto-registering handlers for module: module-a
[EventBus] Auto-registered 0/2 handlers for module: module-a

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Available handler not found: module-a.updateStock
[EventBus] Available handler not found: module-a.processRestock

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:56) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Handler 'updateStock' not found in registry for module module-a
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336868_ivwovg7m0'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'module-a'[39m
}
[EventBus] Handler 'processRestock' not found in registry for module module-a
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336869_5c1ztxee7'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'module-a'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
‚ÑπÔ∏è [EventBus] Module registered (03:48:56) {
  moduleId: [32m'module-a'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Activation order calculated: [ [32m'module-a'[39m, [32m'module-b'[39m ]
[ModuleRegistry] Module 'module-b' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Activating module 'module-b'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Directly activating module 'module-b'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Registering 1 subscriptions for module 'module-b'

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
[EventBus] Processing event sales.order.created: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Module health changed: module-b -> active
[ModuleRegistry] Module 'module-b' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
[OfflineIntegration] Queueing event for offline sync: sales.order.created priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Module 'module-b' activated directly
[EventBus] Module activated: module-b
[EventBus] Auto-registering handlers for module: module-b
[EventBus] Auto-registered 0/1 handlers for module: module-b

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Available handler not found: module-b.updateCustomerActivity

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Handler 'updateCustomerActivity' not found in registry for module module-b
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336871_x9us0l7z5'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'module-b'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
‚ÑπÔ∏è [EventBus] Module registered (03:48:56) {
  moduleId: [32m'module-b'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Activation order calculated: [ [32m'module-a'[39m, [32m'module-b'[39m, [32m'module-c'[39m ]
[ModuleRegistry] Module 'module-c' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Activating module 'module-c'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Directly activating module 'module-c'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Registering 2 subscriptions for module 'module-c'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Module health changed: module-c -> active
[ModuleRegistry] Module 'module-c' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Module 'module-c' activated directly
[EventBus] Module activated: module-c
[EventBus] Auto-registering handlers for module: module-c
[EventBus] Auto-registered 0/2 handlers for module: module-c

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Available handler not found: module-c.handleLowStock
[EventBus] Available handler not found: module-c.handleCustomerUpdate

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Handler 'handleLowStock' not found in registry for module module-c
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336872_qr4qtfw6a'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'module-c'[39m
}
[EventBus] Handler 'handleCustomerUpdate' not found in registry for module module-c
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336872_uva7l4jtu'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'module-c'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
‚ÑπÔ∏è [EventBus] Module registered (03:48:56) {
  moduleId: [32m'module-c'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Activation order calculated: [ [32m'module-a'[39m, [32m'module-b'[39m, [32m'module-c'[39m, [32m'module-d'[39m ]
[ModuleRegistry] Module 'module-d' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Activating module 'module-d'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Directly activating module 'module-d'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Registering 2 subscriptions for module 'module-d'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Module health changed: module-d -> active
[ModuleRegistry] Module 'module-d' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Module 'module-d' activated directly
[EventBus] Module activated: module-d
[EventBus] Auto-registering handlers for module: module-d
[EventBus] Auto-registered 0/2 handlers for module: module-d

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Available handler not found: module-d.recordClockIn
[EventBus] Available handler not found: module-d.recordClockOut

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Handler 'recordClockIn' not found in registry for module module-d
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336874_yc5i82myb'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'module-d'[39m
}
[EventBus] Handler 'recordClockOut' not found in registry for module module-d
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336874_tgrx0aqoj'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'module-d'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
‚ÑπÔ∏è [EventBus] Module registered (03:48:56) {
  moduleId: [32m'module-d'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[ModuleRegistry] Module 'module-d' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
[EventBus] Failed to queue event for offline sync: Error: Queue failed
    at [90mI:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\integration\offline-integration.test.ts:279:66
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)
    at runWithTimeout [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
    at runSuite [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:48:56)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:48:56)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:56) { noncePrefix: [32m'ufbi8m4s'[39m, timestamp: [32m'1757789336877'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:56)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:56) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[TEST-BEFORE] Starting beforeEach setup...
[TEST-BEFORE] Registering inventory module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:56) { noncePrefix: [32m'2dmhmdhd'[39m, timestamp: [32m'1757789336882'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:56)

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:56) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336880_ssiowlhst'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336880_yqxcj5q2v'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
‚ÑπÔ∏è [EventBus] Module registered (03:48:56) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[TEST-BEFORE] Registering customers module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
[EventBus] Adding subscription to weak subscription manager for pattern: global.eventbus.network-offline
[EventBus] Subscription added: global.eventbus.network-offline (sub_1757789336884_mxf3yc2i8) [moduleId: anonymous]
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Activating module 'test-customers'...

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336884_mxf3yc2i8'[39m,
  pattern: [32m'global.eventbus.network-offline'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336882_0l778i6vl'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
[EventBus] Processing event global.eventbus.network-offline: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
‚ÑπÔ∏è [EventBus] Module registered (03:48:56) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[TEST-BEFORE] Registering sales module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336883_rlo9y86oj'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336884_cmwbzv4k0'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
‚ÑπÔ∏è [EventBus] Module registered (03:48:56) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[TEST-BEFORE] beforeEach setup completed!

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[TEST] Test started!
[TEST] Setting up simple handler...
[EventBus] Adding subscription to weak subscription manager for pattern: test.simple
[EventBus] Subscription added: test.simple (sub_1757789336885_xjkhmm3ea) [moduleId: anonymous]
[TEST] Emitting simple event...

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336885_xjkhmm3ea'[39m,
  pattern: [32m'test.simple'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[EventBus] Processing event test.simple: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[TEST] Simple handler called!

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[TEST] Waiting for handler to execute...

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should respect priority in queue operations 121ms
 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Persistent Event Queuing > should handle queue operation failures gracefully 12ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:48:56)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:48:56)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:56)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:56)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:56) { noncePrefix: [32m'wjsr9xmd'[39m, timestamp: [32m'1757789336949'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:56)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:56) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[EventBus] Processing event test.offline.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[OfflineIntegration] Queueing event for offline sync: test.offline.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[EventBus] Adding subscription to weak subscription manager for pattern: global.eventbus.network-online
[EventBus] Subscription added: global.eventbus.network-online (sub_1757789336951_1a68snn2p) [moduleId: anonymous]
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336951_1a68snn2p'[39m,
  pattern: [32m'global.eventbus.network-online'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[EventBus] Processing event global.eventbus.network-online: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should emit lifecycle events during module registration and activation 110ms
 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Complete Module Registration Flow > should handle complex dependency chains 11ms
stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers
[TEST] Final handler calls: [ [32m'simple-called'[39m ]

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:56) { noncePrefix: [32m'g4w5ug2x'[39m, timestamp: [32m'1757789336991'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:56)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:56) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[TEST-BEFORE] Starting beforeEach setup...
[TEST-BEFORE] Registering inventory module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336994_gqh20gwwd'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336994_voy0yywgz'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
‚ÑπÔ∏è [EventBus] Module registered (03:48:56) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[TEST-BEFORE] Registering customers module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336996_ii9v6dtua'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
‚ÑπÔ∏è [EventBus] Module registered (03:48:56) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[TEST-BEFORE] Registering sales module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336997_w9ivgawk2'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336997_sf6magttt'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
‚ÑπÔ∏è [EventBus] Module registered (03:48:56) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[TEST-BEFORE] beforeEach setup completed!

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757789336998_xqa6v3dyb) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.check
[EventBus] Subscription added: inventory.stock.check (sub_1757789336998_8d5klqa5c) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.checked
[EventBus] Subscription added: inventory.stock.checked (sub_1757789336999_fh7nzcsvv) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.confirmed
[EventBus] Subscription added: sales.order.confirmed (sub_1757789336999_bcrxfhkqb) [moduleId: anonymous]

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336998_xqa6v3dyb'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336998_8d5klqa5c'[39m,
  pattern: [32m'inventory.stock.check'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336999_fh7nzcsvv'[39m,
  pattern: [32m'inventory.stock.checked'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:56) {
  subscriptionId: [32m'sub_1757789336999_bcrxfhkqb'[39m,
  pattern: [32m'sales.order.confirmed'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[TestCustomers] Updated activity for customer CUST-001

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Processing event inventory.stock.check: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Processing event inventory.stock.checked: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication
[EventBus] Processing event sales.order.confirmed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle online to offline transition 66ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:48:57)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:48:57)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:57) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:57)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:57) { noncePrefix: [32m'9qjdsx76'[39m, timestamp: [32m'1757789337061'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:57)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:57) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...
[EventBus] Adding subscription to weak subscription manager for pattern: test.offline.processing
[EventBus] Subscription added: test.offline.processing (sub_1757789337062_o8eesdzb4) [moduleId: anonymous]

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337062_o8eesdzb4'[39m,
  pattern: [32m'test.offline.processing'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[EventBus] Processing event test.offline.processing: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[OfflineIntegration] Queueing event for offline sync: test.offline.processing priority: [33m2[39m

 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should route events to correct module handlers 114ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:48:57)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:48:57)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:57) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:57)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:57) { noncePrefix: [32m'lu1ilbsi'[39m, timestamp: [32m'1757789337125'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:57)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:57) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[EventBus] Processing event sales.order.created: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[OfflineIntegration] Queueing event for offline sync: sales.order.created priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[EventBus] Processing event payments.payment.processed: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[OfflineIntegration] Queueing event for offline sync: payments.payment.processed priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[EventBus] Processing event sales.order.completed: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[OfflineIntegration] Queueing event for offline sync: sales.order.completed priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should handle offline to online transition and trigger sync 112ms
 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should maintain event processing while offline 64ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:48:57)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:48:57)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:57) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:57)

 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle cross-module event communication 240ms
stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:57) { noncePrefix: [32m'9wv8uv41'[39m, timestamp: [32m'1757789337231'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:57)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:57) { noncePrefix: [32m'jmy8ui7t'[39m, timestamp: [32m'1757789337235'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:57)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:57) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[TEST-BEFORE] Starting beforeEach setup...
[TEST-BEFORE] Registering inventory module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:57) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337233_p0b34ti7x'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337233_kxn90h1eh'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[TEST-BEFORE] Registering customers module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337235_rzs1jee50'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[TEST-BEFORE] Registering sales module...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337239_rtxfp7q0m'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337239_2tc0w3ptx'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337236_9jd63ii8l'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337236_nhyknnqvb'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[TEST-BEFORE] beforeEach setup completed!

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337241_0wwsw6hkv'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757789337237_eim57v8pj) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757789337237_ys3f9dwpx) [moduleId: anonymous]

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337237_eim57v8pj'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337237_ys3f9dwpx'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Processing event sales.order.created: Found 3 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[TestCustomers] Updated activity for customer CUST-VIP-001

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337242_ujm2fz0gm'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337242_2lvcmm2c7'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Subscription added: inventory.stock.low (sub_1757789337244_ml9lbfnly) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757789337244_sv7gs0x7v) [moduleId: anonymous]
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337244_ml9lbfnly'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337244_sv7gs0x7v'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Processing event inventory.stock.low: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[TestSales] Handling low stock for undefined

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Processing event sales.order.created: Found 3 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[TestCustomers] Updated activity for customer CUST-REG-001

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[OfflineIntegration] Queueing event for offline sync: inventory.stock.low priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[EventBus] Processing event sales.order.created: Found 3 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters
[TestCustomers] Updated activity for customer CUST-VIP-002

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[TestCustomers] Updated activity for customer undefined

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[OfflineIntegration] Queueing event for offline sync: sales.order.created priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Online/Offline State Handling > should cache events for replay after reconnection 110ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:57) { noncePrefix: [32m'5g1namnl'[39m, timestamp: [32m'1757789337390'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:57)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:57) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[TEST-BEFORE] Starting beforeEach setup...
[TEST-BEFORE] Registering inventory module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337391_ul9t7nzkv'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337391_prg7r1o8y'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[TEST-BEFORE] Registering customers module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337393_p9tmr0ggm'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[TEST-BEFORE] Registering sales module...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337394_tnbzl4iz7'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337394_7tzu2no49'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[TEST-BEFORE] beforeEach setup completed!

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Adding subscription to weak subscription manager for pattern: test.priority.event
[EventBus] Subscription added: test.priority.event (sub_1757789337395_yo420vejn) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: test.priority.event
[EventBus] Subscription added: test.priority.event (sub_1757789337396_9uv4ojacc) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: test.priority.event
[EventBus] Subscription added: test.priority.event (sub_1757789337396_czwhjv8s5) [moduleId: anonymous]

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337395_yo420vejn'[39m,
  pattern: [32m'test.priority.event'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337396_9uv4ojacc'[39m,
  pattern: [32m'test.priority.event'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337396_czwhjv8s5'[39m,
  pattern: [32m'test.priority.event'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities
[EventBus] Processing event test.priority.event: Found 3 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Error unsubscribing sub_1757789337242_ujm2fz0gm: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789337242_2lvcmm2c7: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Error unsubscribing sub_1757789337241_0wwsw6hkv: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Error unsubscribing sub_1757789337239_rtxfp7q0m: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789337239_2tc0w3ptx: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:48:57)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:48:57)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:57) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:57)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:57) { noncePrefix: [32m'92y1bwis'[39m, timestamp: [32m'1757789337411'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:57)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:57) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337412_utqeol4tk'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337412_rbc9qbkth'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337414_nt9vfy8v2'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337415_jrfeycpiw'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337415_rd93g1uy1'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Error unsubscribing sub_1757789337415_jrfeycpiw: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789337415_rd93g1uy1: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Error unsubscribing sub_1757789337414_nt9vfy8v2: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Error unsubscribing sub_1757789337412_utqeol4tk: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789337412_rbc9qbkth: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:48:57)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:48:57)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:57) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:57)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:57) { noncePrefix: [32m'5ve4sk38'[39m, timestamp: [32m'1757789337428'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:57)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:57) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337430_sefvyae12'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337430_s3mud5pa2'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337432_esqjcymch'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337433_h97firewr'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337433_3hf0k2m12'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Error unsubscribing sub_1757789337433_h97firewr: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789337433_3hf0k2m12: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Error unsubscribing sub_1757789337432_esqjcymch: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Error unsubscribing sub_1757789337430_sefvyae12: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789337430_s3mud5pa2: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:48:57)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:48:57)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:57) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:57)

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should sync module events when going online 175ms
 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should handle module health during offline periods 18ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:57) { noncePrefix: [32m'x7400d85'[39m, timestamp: [32m'1757789337447'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:57)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:57) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Processing event sales.order.created: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] Queueing event for offline sync: sales.order.created priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Processing event inventory.stock.updated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] Queueing event for offline sync: inventory.stock.updated priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Processing event payments.payment.processed: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] Queueing event for offline sync: payments.payment.processed priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Processing event sales.order.completed: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] Queueing event for offline sync: sales.order.completed priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should handle event subscriptions with filters 158ms
stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:57) { noncePrefix: [32m'83mfx7ku'[39m, timestamp: [32m'1757789337538'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:57)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:57) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337539_bmaywumao'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337540_3gr561em1'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337541_yp3fx63fj'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-customers' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337543_ola51dgmr'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337543_x0qu8biyt'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m, [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337548_b7f68ao1k'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337548_ckrtt8t2c'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-staff' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Deactivating dependent module 'test-sales' before deactivating 'test-inventory'

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Module Integration with Offline Sync > should maintain module dependencies during offline operation 18ms
stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Error unsubscribing sub_1757789337543_ola51dgmr: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789337543_x0qu8biyt: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Error unsubscribing sub_1757789337539_bmaywumao: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789337540_3gr561em1: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order
[EventBus] Processing event global.eventbus.module-deactivated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:57) { noncePrefix: [32m'daciedwu'[39m, timestamp: [32m'1757789337567'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:57)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:57) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337568_43pz9830v'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337568_o0ubvbdzw'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337570_6464uhfe8'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Module 'test-customers' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337571_3oszhsfsh'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337572_s03kpgbsg'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m, [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337573_jfppn9dek'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337573_3lw00vxjm'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Module 'test-staff' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Adding subscription to weak subscription manager for pattern: global.eventbus.module-deactivated
[EventBus] Subscription added: global.eventbus.module-deactivated (sub_1757789337574_wdk3g0zm9) [moduleId: anonymous]

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337574_wdk3g0zm9'[39m,
  pattern: [32m'global.eventbus.module-deactivated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Deactivating module 'test-staff'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-staff'

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Error unsubscribing sub_1757789337573_jfppn9dek: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789337573_3lw00vxjm: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[TestStaffModule] Deactivating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[ModuleRegistry] Module 'test-staff' deactivated successfully
[EventBus] Module deactivated: test-staff

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events
[EventBus] Processing event global.eventbus.module-deactivated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:48:57)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:48:57)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:57) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:57)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:57) { noncePrefix: [32m'lopg7c8q'[39m, timestamp: [32m'1757789337605'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:57)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:57) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[EventBus] Processing event inventory.stock.updated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[OfflineIntegration] Queueing event for offline sync: inventory.stock.updated priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[EventBus] Processing event inventory.stock.low: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[OfflineIntegration] Queueing event for offline sync: inventory.stock.low priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[EventBus] Processing event inventory.restock.requested: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[OfflineIntegration] Queueing event for offline sync: inventory.restock.requested priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Event Subscription and Routing > should maintain event subscription priorities 148ms
 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should deactivate modules in reverse dependency order 29ms
 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should emit deactivation events 66ms
stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:57) { noncePrefix: [32m'kmjvoyrq'[39m, timestamp: [32m'1757789337633'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:57)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:57) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337634_e8xrria8f'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337634_fgu05cfa7'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337636_hl9bu72gh'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Module 'test-customers' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337637_g3hkfv6qg'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337638_f4rxsg8su'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m, [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337639_ac4xb94ke'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337639_tdj08m1n7'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Module 'test-staff' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Subscription added: staff.clock.in (sub_1757789337640_etq0hqng8) [moduleId: anonymous]

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337640_etq0hqng8'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Deactivating module 'test-staff'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-staff'

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Error unsubscribing sub_1757789337639_ac4xb94ke: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789337639_tdj08m1n7: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[TestStaffModule] Deactivating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[ModuleRegistry] Module 'test-staff' deactivated successfully
[EventBus] Module deactivated: test-staff

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event global.eventbus.module-deactivated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Processing event staff.clock.in: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation
[EventBus] Subscription removed: staff.clock.in (sub_1757789337640_etq0hqng8)

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:57) { noncePrefix: [32m'd4pnhxes'[39m, timestamp: [32m'1757789337697'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:57)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:57) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337698_um3y14ezm'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337698_xhh8ogozh'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337700_mpc5gdnwt'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-customers' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337701_6fuzcx29n'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337701_pohkp24lc'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m, [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337703_emf5evft5'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337703_lzq0panbx'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-staff' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Deactivating module 'test-staff'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-staff'

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Error unsubscribing sub_1757789337703_emf5evft5: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789337703_lzq0panbx: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[TestStaffModule] Deactivating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-staff' deactivated successfully
[EventBus] Module deactivated: test-staff

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle complete order flow with offline sync 159ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:48:57)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:48:57)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:57) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:57)

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Error unsubscribing sub_1757789337701_6fuzcx29n: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789337701_pohkp24lc: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:57) { noncePrefix: [32m'8o7hn3i0'[39m, timestamp: [32m'1757789337717'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:57)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:57) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[EventBus] Processing event staff.clock.in: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[OfflineIntegration] Queueing event for offline sync: staff.clock.in priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[EventBus] Processing event staff.break.started: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[OfflineIntegration] Queueing event for offline sync: staff.break.started priority: [33m2[39m

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Error unsubscribing sub_1757789337700_mpc5gdnwt: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[EventBus] Processing event staff.clock.out: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[OfflineIntegration] Queueing event for offline sync: staff.clock.out priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Error unsubscribing sub_1757789337698_um3y14ezm: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789337698_xhh8ogozh: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:48:57)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:48:57)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:57) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:57)

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:57) { noncePrefix: [32m'56w52shr'[39m, timestamp: [32m'1757789337722'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:57)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:57) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337723_5ic3p4k68'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337723_p3vhb19ez'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337725_nrttje58o'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337726_qadkt1bth'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337726_z5yw8e3w7'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m, [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337727_i377byt2z'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337727_p3ba0uh9j'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[ModuleRegistry] Module 'test-staff' is already active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event global.eventbus.module-activated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.metrics: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST] Metrics event received: {
  uptime: [33m1008[39m,
  totalEvents: [33m7[39m,
  eventsPerSecond: [33m0.11666666666666667[39m,
  activeModules: [33m4[39m,
  activeSubscriptions: [33m8[39m,
  queueSize: [33m0[39m,
  errorRate: [33m0[39m,
  avgLatencyMs: [33m0.3828125[39m,
  memoryUsageMB: [33m0.008[39m,
  modules: {},
  eventPatterns: {
    [32m'global.eventbus.initialized'[39m: {
      totalEvents: [33m1[39m,
      avgLatencyMs: [33m1.5[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    },
    [32m'global.eventbus.module-registered'[39m: {
      totalEvents: [33m4[39m,
      avgLatencyMs: [33m0.4375[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    },
    [32m'global.eventbus.module-activated'[39m: {
      totalEvents: [33m2[39m,
      avgLatencyMs: [33m0.25[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    }
  }
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757789337728_g3ik95o6o) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.checked
[EventBus] Subscription added: inventory.stock.checked (sub_1757789337729_1rx2zotlh) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: staff.notified
[EventBus] Subscription added: staff.notified (sub_1757789337729_jcbtr255d) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.order.received
[EventBus] Subscription added: kitchen.order.received (sub_1757789337729_jbqc288oa) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: payments.payment.requested
[EventBus] Subscription added: payments.payment.requested (sub_1757789337729_b64214orh) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: payments.payment.completed
[EventBus] Subscription added: payments.payment.completed (sub_1757789337729_otv2k924y) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.order.completed
[EventBus] Subscription added: kitchen.order.completed (sub_1757789337729_h1og15enz) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Subscription added: sales.order.completed (sub_1757789337729_264eq4fp4) [moduleId: anonymous]

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337728_g3ik95o6o'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337729_1rx2zotlh'[39m,
  pattern: [32m'inventory.stock.checked'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337729_jcbtr255d'[39m,
  pattern: [32m'staff.notified'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337729_jbqc288oa'[39m,
  pattern: [32m'kitchen.order.received'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337729_b64214orh'[39m,
  pattern: [32m'payments.payment.requested'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337729_otv2k924y'[39m,
  pattern: [32m'payments.payment.completed'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337729_h1og15enz'[39m,
  pattern: [32m'kitchen.order.completed'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337729_264eq4fp4'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[TestCustomers] Updated activity for customer CUST-VIP-001

 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should cleanup module subscriptions on deactivation 64ms
 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Module Deactivation and Cleanup > should handle graceful shutdown of all modules 25ms
stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event inventory.stock.checked: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event staff.notified: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event payments.payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[EventBus] Processing event sales.order.completed: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow
[TestInventory] Updating stock for order ORD-001

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle inventory management with offline sync 112ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:48:57)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:48:57)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:57)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:57) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:57)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:57) { noncePrefix: [32m'8i3i7m30'[39m, timestamp: [32m'1757789337828'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:57)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:57) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[EventBus] Processing event test.sync.retry: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[OfflineIntegration] Queueing event for offline sync: test.sync.retry priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
Auto-sync failed: Error: Sync failed (attempt 1)
    at MockOfflineSync.<anonymous> [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\integration\offline-integration.test.ts:539:17[90m)[39m
    at MockOfflineSync.mockCall [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+spy@3.2.4/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at MockOfflineSync.syncPendingOperations [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/tinyspy@4.0.3/node_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at MockOfflineSync.autoSync [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\integration\offline-integration.test.ts:61:18[90m)[39m
    at MockOfflineSync.setOnline [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\integration\offline-integration.test.ts:51:12[90m)[39m
    at [90mI:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\integration\offline-integration.test.ts:553:23
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[OfflineIntegration] Auto-triggering sync with [33m1[39m queued operations...

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[OfflineIntegration] Auto-sync failed: Error: Sync failed (attempt 2)
    at MockOfflineSync.<anonymous> [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\integration\offline-integration.test.ts:539:17[90m)[39m
    at MockOfflineSync.mockCall [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+spy@3.2.4/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at MockOfflineSync.syncPendingOperations [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/tinyspy@4.0.3/node_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at [90mI:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\integration\offline-integration.test.ts:181:33

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Business Logic Integration > should handle staff management events with offline sync 111ms
 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle complete restaurant workflow 260ms
stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:57) { noncePrefix: [32m'atzkehzw'[39m, timestamp: [32m'1757789337982'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:57)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:57) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337983_whg19xdbq'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337983_g8rshr36d'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337984_pr3074pb6'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337985_1acfhwh3x'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:57) {
  subscriptionId: [32m'sub_1757789337985_wbnutcop5'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
‚ÑπÔ∏è [EventBus] Module registered (03:48:57) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-0

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-1

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-2

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-3

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-4

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-5

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-6

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-7

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-8

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-9

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-0

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-1

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-2

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-3

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-4

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-5

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-6

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-7

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-8

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-9

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-0

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-1

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-2

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-3

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-4

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-5

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-6

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-7

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-8

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-9

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-0

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-1

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-2

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-3

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-4

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-5

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-6

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-7

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-8

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-9

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-0

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-1

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-2

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-3

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-4

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-5

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-6

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-7

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-8

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[EventBus] Processing event sales.order.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios
[TestCustomers] Updated activity for customer CUST-9

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:58) { noncePrefix: [32m'1fwabu33'[39m, timestamp: [32m'1757789338016'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:58)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:58)

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:58) {
  subscriptionId: [32m'sub_1757789338018_vn5qnsnkk'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:58) {
  subscriptionId: [32m'sub_1757789338018_hryilllz1'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
‚ÑπÔ∏è [EventBus] Module registered (03:48:58) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:58) {
  subscriptionId: [32m'sub_1757789338019_guy5xip26'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
‚ÑπÔ∏è [EventBus] Module registered (03:48:58) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:58) {
  subscriptionId: [32m'sub_1757789338020_zdnpmomhn'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:58) {
  subscriptionId: [32m'sub_1757789338020_2ensfxtpg'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
‚ÑπÔ∏è [EventBus] Module registered (03:48:58) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757789338021_84gkzli1f) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757789338021_ao2bnwsag) [moduleId: anonymous]

stderr | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:58) {
  subscriptionId: [32m'sub_1757789338021_84gkzli1f'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:58) {
  subscriptionId: [32m'sub_1757789338021_ao2bnwsag'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[TestCustomers] Updated activity for customer undefined

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[TestCustomers] Updated activity for customer undefined

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:48:58)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:48:58)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:58)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:58)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:58)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:58) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:58)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:58) { noncePrefix: [32m'4bzopk50'[39m, timestamp: [32m'1757789338045'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:58)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:58)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[EventBus] Processing event sales.order.created: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[OfflineIntegration] Queueing event for offline sync: sales.order.created priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[EventBus] Processing event sales.order.created: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[OfflineIntegration] Queueing event for offline sync: sales.order.created priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[EventBus] Processing event sales.order.created: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[OfflineIntegration] Queueing event for offline sync: sales.order.created priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[OfflineIntegration] Auto-triggering sync with [33m1[39m queued operations...

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[TestCustomers] Updated activity for customer undefined

stdout | src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should handle peak load scenarios 35ms
 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle sync failures and retry 217ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:48:58)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:48:58)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:58)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:58)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:58)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:58) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:58)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:58) { noncePrefix: [32m'vouw4i4p'[39m, timestamp: [32m'1757789338261'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:58)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:58)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Processing event test.order.1: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[OfflineIntegration] Queueing event for offline sync: test.order.1 priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Processing event test.order.2: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[OfflineIntegration] Queueing event for offline sync: test.order.2 priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Processing event test.order.3: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[OfflineIntegration] Queueing event for offline sync: test.order.3 priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Processing event test.order.4: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[OfflineIntegration] Queueing event for offline sync: test.order.4 priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

 ‚úì src/lib/events/__tests__/integration/module-lifecycle.test.ts > EventBus - Module Lifecycle Integration > Real-world Integration Scenarios > should maintain data consistency across module interactions 256ms
 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should handle partial sync failures 216ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:48:58)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:48:58)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:58)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:58)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:58)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:58) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:58)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:58) { noncePrefix: [32m'akaadydw'[39m, timestamp: [32m'1757789338375'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:58)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:58)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event test.volume.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Queueing event for offline sync: test.volume.event priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Error Recovery and Resilience > should maintain event ordering during sync 114ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:48:58)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:48:58)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:58)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:58)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:58)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:58) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:58)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:58) { noncePrefix: [32m'6g0rm4g2'[39m, timestamp: [32m'1757789338608'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:58)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:58)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event test.concurrent.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Queueing event for offline sync: test.concurrent.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle high-volume event queuing 233ms
stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.metrics: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST] Metrics event received: {
  uptime: [33m2010[39m,
  totalEvents: [33m8[39m,
  eventsPerSecond: [33m0.13333333333333333[39m,
  activeModules: [33m4[39m,
  activeSubscriptions: [33m8[39m,
  queueSize: [33m0[39m,
  errorRate: [33m0[39m,
  avgLatencyMs: [33m0.69140625[39m,
  memoryUsageMB: [33m0.008[39m,
  modules: {},
  eventPatterns: {
    [32m'global.eventbus.initialized'[39m: {
      totalEvents: [33m1[39m,
      avgLatencyMs: [33m1.5[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    },
    [32m'global.eventbus.module-registered'[39m: {
      totalEvents: [33m4[39m,
      avgLatencyMs: [33m0.4375[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    },
    [32m'global.eventbus.module-activated'[39m: {
      totalEvents: [33m2[39m,
      avgLatencyMs: [33m0.25[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    },
    [32m'global.eventbus.metrics'[39m: {
      totalEvents: [33m1[39m,
      avgLatencyMs: [33m0.5[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    }
  }
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:48:58)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:48:58)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:58)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:58)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:58)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:58) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:58)

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[OfflineIntegration] Setting up test environment...
[OfflineIntegration] Creating EventBus with offline config...
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:58) { noncePrefix: [32m'02nn0mg6'[39m, timestamp: [32m'1757789338778'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:58)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:48:58)

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[OfflineIntegration] MockOfflineSync went offline, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[EventBus] Processing event global.eventbus.network-offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-offline

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[EventBus] Processing event test.large.offline: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[OfflineIntegration] Queueing event for offline sync: test.large.offline priority: [33m2[39m

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[OfflineIntegration] MockOfflineSync went online, emitting EventBus event...

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[EventBus] Processing event global.eventbus.network-online: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[OfflineIntegration] Skipping system event for test queue: global.eventbus.network-online

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should handle concurrent offline operations 170ms
stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:48:58)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:48:58)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:58)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:58)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:58)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:58) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:58)

 ‚úì src/lib/events/__tests__/integration/offline-integration.test.ts > EventBus - Offline Integration > Performance Under Offline Conditions > should maintain performance with large payloads offline 114ms
stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Processing event global.eventbus.metrics: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST] Metrics event received: {
  uptime: [33m3018[39m,
  totalEvents: [33m9[39m,
  eventsPerSecond: [33m0.15[39m,
  activeModules: [33m4[39m,
  activeSubscriptions: [33m8[39m,
  queueSize: [33m0[39m,
  errorRate: [33m0[39m,
  avgLatencyMs: [33m0.845703125[39m,
  memoryUsageMB: [33m0.008[39m,
  modules: {},
  eventPatterns: {
    [32m'global.eventbus.initialized'[39m: {
      totalEvents: [33m1[39m,
      avgLatencyMs: [33m1.5[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    },
    [32m'global.eventbus.module-registered'[39m: {
      totalEvents: [33m4[39m,
      avgLatencyMs: [33m0.4375[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    },
    [32m'global.eventbus.module-activated'[39m: {
      totalEvents: [33m2[39m,
      avgLatencyMs: [33m0.25[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    },
    [32m'global.eventbus.metrics'[39m: {
      totalEvents: [33m2[39m,
      avgLatencyMs: [33m0.75[39m,
      errorRate: [33m0[39m,
      subscriberCount: [33m0[39m,
      lastEvent: {}
    }
  }
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST] Health events received: [33m3[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Module health changed: test-kitchen-failing -> error
[ModuleRegistry] Module 'test-kitchen-failing' health changed: active -> error

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[HEALTH-TEST-AFTER] Cleaning up health monitoring tests...
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Deactivating module 'test-kitchen-failing'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-kitchen-failing'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Error unsubscribing sub_1757789336742_c01v5a7a1: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[TestKitchenModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Module 'test-kitchen-failing' deactivated successfully
[EventBus] Module deactivated: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Error unsubscribing sub_1757789336740_nkzwpx0z8: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789336740_kqwpadp1w: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Error unsubscribing sub_1757789336738_dkhpuf7if: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Error unsubscribing sub_1757789336734_rsyij1kd7: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789336735_tj62yqrhw: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:48:59)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:48:59)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:59)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:59)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:59)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:59) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:59)

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[HEALTH-TEST-BEFORE] Starting health monitoring test setup...
‚ÑπÔ∏è [Security] New CSP nonce generated (03:48:59) { noncePrefix: [32m'7m9m0wjk'[39m, timestamp: [32m'1757789339782'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:48:59)

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:59) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:48:59) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:59) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:59) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:59) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (03:48:59) {
  keyVersion: [32m'key_1757789339782_ruwvb2na'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (03:48:59) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:48:59) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: **
[EventBus] Subscription added: ** (sub_1757789339784_0e74gfx4a) [moduleId: anonymous]
[HEALTH-TEST-BEFORE] Health monitoring test setup completed! ‚úÖ

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:59) {
  subscriptionId: [32m'sub_1757789339784_0e74gfx4a'[39m,
  pattern: [32m'**'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:59) {
  subscriptionId: [32m'sub_1757789339785_1995jl1ju'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:59) {
  subscriptionId: [32m'sub_1757789339786_lh2zbeyzc'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ÑπÔ∏è [EventBus] Module registered (03:48:59) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[HEALTH-TEST] Successfully registered module: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:59) {
  subscriptionId: [32m'sub_1757789339787_p39e31vgx'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ÑπÔ∏è [EventBus] Module registered (03:48:59) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[HEALTH-TEST] Successfully registered module: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:59) {
  subscriptionId: [32m'sub_1757789339789_2ky2cy4fr'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:59) {
  subscriptionId: [32m'sub_1757789339789_rbsfzrax0'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ÑπÔ∏è [EventBus] Module registered (03:48:59) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[HEALTH-TEST] Successfully registered module: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Activation order calculated: [
  [32m'test-inventory'[39m,
  [32m'test-customers'[39m,
  [32m'test-sales'[39m,
  [32m'test-kitchen-failing'[39m
]
[ModuleRegistry] Module 'test-kitchen-failing' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Activating module 'test-kitchen-failing'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Directly activating module 'test-kitchen-failing'...
[TestKitchenModule] Attempting activation...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Registering 1 subscriptions for module 'test-kitchen-failing'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Module health changed: test-kitchen-failing -> active
[ModuleRegistry] Module 'test-kitchen-failing' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Module 'test-kitchen-failing' activated directly
[EventBus] Module activated: test-kitchen-failing
[EventBus] Auto-registering handlers for module: test-kitchen-failing
[EventBus] Auto-registered handler: test-kitchen-failing.processOrder for pattern: orders.new
[EventBus] Auto-registered 1/1 handlers for module: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: orders.new

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:59) {
  subscriptionId: [32m'sub_1757789339790_itn4h2ul0'[39m,
  pattern: [32m'orders.new'[39m,
  moduleId: [32m'test-kitchen-failing'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ÑπÔ∏è [EventBus] Module registered (03:48:59) {
  moduleId: [32m'test-kitchen-failing'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Kitchen Module (Failing)'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[HEALTH-TEST] Successfully registered module: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: global.eventbus.module-recovered
[EventBus] Subscription added: global.eventbus.module-recovered (sub_1757789339792_zhux09x96) [moduleId: anonymous]
[ModuleRegistry] Module 'test-kitchen-failing' is already active

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:59) {
  subscriptionId: [32m'sub_1757789339792_zhux09x96'[39m,
  pattern: [32m'global.eventbus.module-recovered'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Processing event global.eventbus.module-activated: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should continuously monitor module health 3058ms
stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Processing event global.eventbus.metrics: Found 1 matching subscriptions

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (03:49:01) {
  handlerId: [32m'sub_1757789336732_nar375k7o'[39m,
  pattern: [32m'global.eventbus.module-registered'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757789336735_d99e3e10-ae30-4f28-8f34-b23eb0cc0f87'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (03:49:01) {
  handlerId: [32m'sub_1757789336732_nar375k7o'[39m,
  pattern: [32m'global.eventbus.module-registered'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757789336738_17f5681a-b5b6-47de-a576-aa952e135017'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (03:49:01) {
  handlerId: [32m'sub_1757789336732_nar375k7o'[39m,
  pattern: [32m'global.eventbus.module-registered'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757789336740_a6639c71-802f-4672-9965-6420c4ac5b1b'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (03:49:01) {
  handlerId: [32m'sub_1757789336732_nar375k7o'[39m,
  pattern: [32m'global.eventbus.module-registered'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757789336743_fc913d47-9850-4829-9fa2-0a816f9de876'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (03:49:01) {
  handlerId: [32m'sub_1757789336732_nar375k7o'[39m,
  pattern: [32m'global.eventbus.module-activated'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757789336744_b47047f1-1b46-4b2c-9e7d-ffb3e2739941'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (03:49:01) {
  handlerId: [32m'sub_1757789336732_nar375k7o'[39m,
  pattern: [32m'global.eventbus.module-activated'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757789336745_78572780-c5e0-4a55-b029-d08842ccb4bd'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Module health changed: test-kitchen-failing -> error
[ModuleRegistry] Module 'test-kitchen-failing' health changed: active -> error

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[HEALTH-TEST] Final module status: error

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[HEALTH-TEST-AFTER] Cleaning up health monitoring tests...
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Deactivating module 'test-kitchen-failing'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-kitchen-failing'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Error unsubscribing sub_1757789339790_itn4h2ul0: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[TestKitchenModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Module 'test-kitchen-failing' deactivated successfully
[EventBus] Module deactivated: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Error unsubscribing sub_1757789339789_2ky2cy4fr: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789339789_rbsfzrax0: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Error unsubscribing sub_1757789339787_p39e31vgx: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Error unsubscribing sub_1757789339785_1995jl1ju: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789339786_lh2zbeyzc: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:49:01)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:49:01)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:49:01)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:01)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:49:01)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:49:01) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:49:01)

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[HEALTH-TEST-BEFORE] Starting health monitoring test setup...
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:01) { noncePrefix: [32m'j83aq1on'[39m, timestamp: [32m'1757789341824'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:01)

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:49:01) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:01) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:01) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:01) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:01) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (03:49:01) {
  keyVersion: [32m'key_1757789341823_fvthyn3i'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (03:49:01) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:01) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Adding subscription to weak subscription manager for pattern: **
[EventBus] Subscription added: ** (sub_1757789341826_sn0iubey1) [moduleId: anonymous]
[HEALTH-TEST-BEFORE] Health monitoring test setup completed! ‚úÖ

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:01) {
  subscriptionId: [32m'sub_1757789341826_sn0iubey1'[39m,
  pattern: [32m'**'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:01) {
  subscriptionId: [32m'sub_1757789341827_7d2izy3kn'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:01) {
  subscriptionId: [32m'sub_1757789341827_9lfo54zuo'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ÑπÔ∏è [EventBus] Module registered (03:49:01) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[HEALTH-TEST] Successfully registered module: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:01) {
  subscriptionId: [32m'sub_1757789341829_cy5xqdx5d'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ÑπÔ∏è [EventBus] Module registered (03:49:01) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[HEALTH-TEST] Successfully registered module: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:01) {
  subscriptionId: [32m'sub_1757789341831_6f3tfxk3m'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:01) {
  subscriptionId: [32m'sub_1757789341831_r5s1jvmnc'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ÑπÔ∏è [EventBus] Module registered (03:49:01) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[HEALTH-TEST] Successfully registered module: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Activation order calculated: [
  [32m'test-inventory'[39m,
  [32m'test-customers'[39m,
  [32m'test-sales'[39m,
  [32m'test-kitchen-failing'[39m
]
[ModuleRegistry] Module 'test-kitchen-failing' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Activating module 'test-kitchen-failing'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Directly activating module 'test-kitchen-failing'...
[TestKitchenModule] Attempting activation...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Registering 1 subscriptions for module 'test-kitchen-failing'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Module health changed: test-kitchen-failing -> active
[ModuleRegistry] Module 'test-kitchen-failing' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-kitchen-failing' activated directly
[EventBus] Module activated: test-kitchen-failing
[EventBus] Auto-registering handlers for module: test-kitchen-failing
[EventBus] Auto-registered handler: test-kitchen-failing.processOrder for pattern: orders.new
[EventBus] Auto-registered 1/1 handlers for module: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Adding subscription to weak subscription manager for pattern: orders.new

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:01) {
  subscriptionId: [32m'sub_1757789341832_to0bkdclw'[39m,
  pattern: [32m'orders.new'[39m,
  moduleId: [32m'test-kitchen-failing'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ÑπÔ∏è [EventBus] Module registered (03:49:01) {
  moduleId: [32m'test-kitchen-failing'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Kitchen Module (Failing)'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[HEALTH-TEST] Successfully registered module: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Processing event global.eventbus.module-activated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-kitchen-failing' is already active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Processing event global.eventbus.module-activated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[HEALTH-TEST-AFTER] Cleaning up health monitoring tests...
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Deactivating module 'test-kitchen-failing'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-kitchen-failing'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Error unsubscribing sub_1757789341832_to0bkdclw: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[TestKitchenModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-kitchen-failing' deactivated successfully
[EventBus] Module deactivated: test-kitchen-failing

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Error unsubscribing sub_1757789341831_6f3tfxk3m: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789341831_r5s1jvmnc: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Error unsubscribing sub_1757789341829_cy5xqdx5d: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Error unsubscribing sub_1757789341827_7d2izy3kn: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789341827_9lfo54zuo: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:49:01)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:49:01)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:49:01)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:01)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:49:01)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:49:01) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:49:01)

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[HEALTH-TEST-BEFORE] Starting health monitoring test setup...
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:01) { noncePrefix: [32m'bzrgesyr'[39m, timestamp: [32m'1757789341850'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:01)

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:49:01) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:01) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:01) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:01) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:01) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (03:49:01) {
  keyVersion: [32m'key_1757789341850_l8myv0qw'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (03:49:01) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:01) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Adding subscription to weak subscription manager for pattern: **
[EventBus] Subscription added: ** (sub_1757789341853_sdojgq3ls) [moduleId: anonymous]
[HEALTH-TEST-BEFORE] Health monitoring test setup completed! ‚úÖ

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:01) {
  subscriptionId: [32m'sub_1757789341853_sdojgq3ls'[39m,
  pattern: [32m'**'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:01) {
  subscriptionId: [32m'sub_1757789341854_dcg3wpave'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:01) {
  subscriptionId: [32m'sub_1757789341854_cbuu66g8q'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ÑπÔ∏è [EventBus] Module registered (03:49:01) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[HEALTH-TEST] Successfully registered module: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:01) {
  subscriptionId: [32m'sub_1757789341855_rut2xbves'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ÑπÔ∏è [EventBus] Module registered (03:49:01) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[HEALTH-TEST] Successfully registered module: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:01) {
  subscriptionId: [32m'sub_1757789341857_i4wp0f566'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:01) {
  subscriptionId: [32m'sub_1757789341857_tp9frvnbu'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event global.eventbus.module-registered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ÑπÔ∏è [EventBus] Module registered (03:49:01) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[HEALTH-TEST] Successfully registered module: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Activation order calculated: [
  [32m'test-inventory'[39m,
  [32m'test-customers'[39m,
  [32m'test-sales'[39m,
  [32m'test-kitchen-failing'[39m
]
[ModuleRegistry] Module 'test-kitchen-failing' registered successfully

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Activating module 'test-kitchen-failing'...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Directly activating module 'test-kitchen-failing'...
[TestKitchenModule] Attempting activation...

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Failed to activate module 'test-kitchen-failing' directly: Error: Kitchen equipment not responding
    at Object.onActivate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\helpers\test-modules.ts:264:13[90m)[39m
    at ModuleRegistry.activateModuleDirectly [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:518:33[90m)[39m
    at ModuleRegistry.activateModule [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:153:18[90m)[39m
    at ModuleRegistry.registerModule [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:119:7[90m)[39m
    at EventBus.registerModule [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:322:5[90m)[39m
    at [90mI:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\integration\health-monitoring.test.ts:59:11

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Failed to activate module 'test-kitchen-failing': Error: Kitchen equipment not responding
    at Object.onActivate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\helpers\test-modules.ts:264:13[90m)[39m
    at ModuleRegistry.activateModuleDirectly [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:518:33[90m)[39m
    at ModuleRegistry.activateModule [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:153:18[90m)[39m
    at ModuleRegistry.registerModule [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:119:7[90m)[39m
    at EventBus.registerModule [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:322:5[90m)[39m
    at [90mI:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\integration\health-monitoring.test.ts:59:11

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[HEALTH-TEST] Failed to register module test-kitchen-failing: Failed to activate module 'test-kitchen-failing': Kitchen equipment not responding

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event global.eventbus.module-activated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[HEALTH-TEST] Generating activity for metrics...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should handle module recovery scenarios 2041ms
 ‚úì src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should isolate failing modules from healthy ones 27ms
stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (03:49:02) {
  handlerId: [32m'sub_1757789336744_8fa5z4h0z'[39m,
  pattern: [32m'global.eventbus.metrics'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757789337732_8adfe484-19d8-4b7d-ace5-571c78759f7c'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (03:49:02) {
  handlerId: [32m'sub_1757789336732_nar375k7o'[39m,
  pattern: [32m'global.eventbus.metrics'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757789337732_8adfe484-19d8-4b7d-ace5-571c78759f7c'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Processing event global.eventbus.metrics: Found 1 matching subscriptions

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (03:49:03) {
  handlerId: [32m'sub_1757789336744_8fa5z4h0z'[39m,
  pattern: [32m'global.eventbus.metrics'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757789338734_41a94d55-75cf-4916-8452-d54a076c103b'[39m
}

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (03:49:03) {
  handlerId: [32m'sub_1757789336732_nar375k7o'[39m,
  pattern: [32m'global.eventbus.metrics'[39m,
  timeoutMs: [32m'5000'[39m,
  eventId: [32m'evt_1757789338734_41a94d55-75cf-4916-8452-d54a076c103b'[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[HEALTH-TEST] Health metrics: {
  eventsProcessed: [33m2[39m,
  eventsEmitted: [33m24[39m,
  errorRate: [33m0.4300769525864552[39m,
  avgProcessingTimeMs: [33m6.559034284375759[39m,
  queueSize: [33m4[39m
}

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[HEALTH-TEST-AFTER] Cleaning up health monitoring tests...
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Error unsubscribing sub_1757789341857_i4wp0f566: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789341857_tp9frvnbu: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Error unsubscribing sub_1757789341855_rut2xbves: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Error unsubscribing sub_1757789341854_dcg3wpave: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789341854_cbuu66g8q: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:49:03)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:49:03)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:49:03)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:03)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:49:03)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:49:03) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:49:03)

stdout | src/lib/events/__tests__/integration/health-monitoring.test.ts
[EventBus] Processing event global.eventbus.metrics: Found 0 matching subscriptions

 ‚úì src/lib/events/__tests__/integration/health-monitoring.test.ts > EventBus - Health Monitoring Integration > Health Monitoring and Recovery > should provide detailed health metrics 2037ms

 Test Files  4 passed (4)
      Tests  61 passed (61)
   Start at  15:48:53
   Duration  10.03s (transform 546ms, setup 1.39s, collect 1.57s, tests 11.01s, environment 6.07s, prepare 863ms)

