
 RUN  v3.2.4 I:/Programacion/Proyectos/g-mini

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should execute fast handler successfully
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:16) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should refuse to initialize without crypto support
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:16) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should refuse to initialize without crypto support
❌ [Security] [SECURITY] THREAT: Crypto validation failed (03:49:17) { error: [32m'Crypto not available'[39m, context: [32m'validateCryptoSupport'[39m }
❌ [Security] [SECURITY] THREAT: Crypto API unavailable - refusing insecure fallback (03:49:17) {
  userAgent: [32m'Mozilla/5.0 (win32) AppleWebKit/537.36 (KHTML, like Gecko) jsdom/26.1.0'[39m,
  context: [32m'SecureRandomGenerator initialization'[39m
}

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should refuse to initialize without crypto support
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should allow handlers that complete under 5 seconds
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:16)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should never use Math.random() fallbacks
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:17) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Storage Operations > should store and retrieve client ID with integrity protection
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:49:16) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'a54bfa69...'[39m }

stderr | src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should timeout handlers that exceed 5 seconds
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:17)

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Storage Operations > should store and retrieve client ID with integrity protection
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:49:17) { reason: [32m'No valid existing ID found'[39m, newId: [32m'a54bfa69...'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with default configuration
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:16) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 1: <script>alert("XSS")</script>...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:16) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Storage Operations > should store data in sessionStorage by default
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:49:17) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'6bb5d7b9...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Storage Operations > should store data in sessionStorage by default
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:49:17) { reason: [32m'No valid existing ID found'[39m, newId: [32m'6bb5d7b9...'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should allow requests within IP limits
❌ [Security] [SECURITY] RateLimiter initialized (03:49:16) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with default configuration
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:16) {
  keyVersion: [32m'key_1757789356980_7c0s6y5b'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with default configuration
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:16) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Storage Operations > should use memory storage when configured
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:49:17) { storageType: [32m'memory'[39m, clientIdPrefix: [32m'07457ee2...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Storage Operations > should use memory storage when configured
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:49:17) { reason: [32m'No valid existing ID found'[39m, newId: [32m'07457ee2...'[39m }

stderr | src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should respect custom timeout per subscription (capped at 10s)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:17)

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with default configuration
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:16) {
  keyVersion: [32m'key_1757789356980_7c0s6y5b'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with default configuration
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:16) { enabled: [32m'true'[39m, sensitivePatterns: [32m'7'[39m, compression: [32m'true'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should detect and reject tampered data
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:49:17) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'1ae64d1b...'[39m }

stderr | src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should enforce maximum 10s timeout limit
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:17)

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should detect and reject tampered data
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:49:17) { reason: [32m'No valid existing ID found'[39m, newId: [32m'1ae64d1b...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should detect and reject tampered data
❌ [Security] [SECURITY] ANOMALY: Client data cleared (03:49:17)

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with default configuration
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:16)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should allow requests within IP limits
ℹ️ [Security] Request rate limit check passed (03:49:16) {
  ip: [32m'192.168.1.100'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789356987_edrygldlsv42'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should detect and reject tampered data
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:49:17) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'3b53977b...'[39m }

stderr | src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should track timeout statistics
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:17)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should allow requests within IP limits
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:16) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with default configuration
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:16)

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should detect and reject tampered data
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:49:17) { reason: [32m'No valid existing ID found'[39m, newId: [32m'3b53977b...'[39m }

 ✓ src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should allow handlers that complete under 5 seconds 41ms
 ✓ src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should timeout handlers that exceed 5 seconds 5ms
 ✓ src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should respect custom timeout per subscription (capped at 10s) 7ms
 ✓ src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should enforce maximum 10s timeout limit 1ms
 ✓ src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should track timeout statistics 2ms
stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should allow requests within IP limits
ℹ️ [Security] Request rate limit check passed (03:49:16) {
  ip: [32m'192.168.1.100'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757789356987_b612ni2vh68e'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 2: <script type="text/javascript">alert("XSS")</scrip...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should reject invalid data structure
❌ [Security] [SECURITY] VIOLATION: Invalid client data structure detected (03:49:17)
❌ [Security] [SECURITY] ANOMALY: Client data cleared (03:49:17)

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with custom passphrase
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:17) {
  keyVersion: [32m'key_1757789357029_b4pknbsa'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should never use Math.random() fallbacks
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:49:17)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should allow requests within IP limits
ℹ️ [Security] Request rate limit check passed (03:49:16) {
  ip: [32m'192.168.1.100'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757789356987_0nfdpjyj7ttk'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should reject invalid data structure
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:49:17) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'918ff5f1...'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with custom passphrase
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:17) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should generate cryptographically secure UUIDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:17) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should allow requests within IP limits
ℹ️ [Security] Request rate limit check passed (03:49:16) {
  ip: [32m'192.168.1.100'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757789356987_zeehfwnhsjh6'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 3: <script>document.location="http://evil.com"</scrip...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should reject invalid data structure
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:49:17) { reason: [32m'No valid existing ID found'[39m, newId: [32m'918ff5f1...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should work with integrity checks disabled
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:49:17) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'c449cd80...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should work with integrity checks disabled
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:49:17) { reason: [32m'No valid existing ID found'[39m, newId: [32m'c449cd80...'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should allow requests within IP limits
ℹ️ [Security] Request rate limit check passed (03:49:16) {
  ip: [32m'192.168.1.100'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757789356987_xyqogjgmbhft'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 4: <img src="x" onerror="alert(\"XSS\")">...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should allow requests within IP limits
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:16)

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should reject expired client data
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:49:17) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'f1982a46...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should reject expired client data
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:49:17) { reason: [32m'No valid existing ID found'[39m, newId: [32m'f1982a46...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should reject expired client data
❌ [Security] [SECURITY] ANOMALY: Client ID expired, clearing (03:49:17)
❌ [Security] [SECURITY] ANOMALY: Client data cleared (03:49:17)

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with custom passphrase
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:17) {
  keyVersion: [32m'key_1757789357029_b4pknbsa'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should reject expired client data
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:49:17) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'ea564712...'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 5: <div onclick="alert(\"XSS\")">Click me</div>...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with custom passphrase
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:17) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should reject expired client data
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:49:17) { reason: [32m'No valid existing ID found'[39m, newId: [32m'ea564712...'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with custom passphrase
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with custom passphrase
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357041_vo1qk7lyeggx'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should rotate client ID when rotation interval exceeded
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:49:17) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'df0d0124...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should rotate client ID when rotation interval exceeded
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:49:17) { reason: [32m'No valid existing ID found'[39m, newId: [32m'df0d0124...'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757789357041_hzj0du3o8aff'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should handle disabled encryption
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:17) {
  keyVersion: [32m'key_1757789357037_zu2ztpwx'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 6: <input onfocus="alert(\"XSS\")" autofocus>...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should handle disabled encryption
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:17) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should handle disabled encryption
ℹ️ [Security] Encryption disabled - skipping initialization (03:49:17)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757789357041_3x5gama2nugt'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should handle disabled encryption
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757789357041_yosw0udrdaqv'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should handle disabled encryption
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757789357041_nuo4uhrpw2vt'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should correctly identify sensitive patterns
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:17) {
  keyVersion: [32m'key_1757789357043_xzib4ndh'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 7: <body onload="alert(\"XSS\")">...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should correctly identify sensitive patterns
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:17) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'4'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757789357041_watqvky0uzyq'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'3'[39m,
  suspicionScore: [32m'49'[39m,
  requestId: [32m'req_1757789357041_tm1oy6l2vll6'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should correctly identify sensitive patterns
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'2'[39m,
  suspicionScore: [32m'51'[39m,
  requestId: [32m'req_1757789357041_3q7qqt5g6lzq'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 8: javascript:alert("XSS")...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'1'[39m,
  suspicionScore: [32m'53'[39m,
  requestId: [32m'req_1757789357041_811o6ti70jrj'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'0'[39m,
  suspicionScore: [32m'55'[39m,
  requestId: [32m'req_1757789357041_6oeprg2q6wre'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 9: javascript:void(0)...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:17) { ip: [32m'192.168.1.101'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should handle case-insensitive pattern matching
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:17) {
  keyVersion: [32m'key_1757789357045_6mibej34'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should handle case-insensitive pattern matching
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:17) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should handle case-insensitive pattern matching
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 10: vbscript:msgbox("XSS")...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should handle wildcard patterns correctly
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:17) {
  keyVersion: [32m'key_1757789357051_ubs46c4e'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357057_9zp4lug1nttc'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should handle wildcard patterns correctly
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:17) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757789357057_ly9ovrkb4lcj'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757789357057_pa0qdzyky9a0'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should handle wildcard patterns correctly
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757789357057_6xkf5qxkbxs1'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should handle wildcard patterns correctly
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757789357057_3rpwk7bk0puj'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 11: data:text/html,<script>alert("XSS")</script>...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'4'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757789357057_nln6bpu4o5pe'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt simple payloads
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:17) {
  keyVersion: [32m'key_1757789357055_ger7foaa'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'3'[39m,
  suspicionScore: [32m'49'[39m,
  requestId: [32m'req_1757789357057_da72slp13xvj'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt simple payloads
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:17) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'2'[39m,
  suspicionScore: [32m'51'[39m,
  requestId: [32m'req_1757789357057_jqisi20o612b'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 12: data:text/html;base64,PHNjcmlwdD5hbGVydCgiWFNTIik8...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'1'[39m,
  suspicionScore: [32m'53'[39m,
  requestId: [32m'req_1757789357057_363qwlrgt35b'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'0'[39m,
  suspicionScore: [32m'55'[39m,
  requestId: [32m'req_1757789357057_228b5ccjpijp'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 13: expression(alert("XSS"))...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:17) { ip: [32m'192.168.1.102'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt simple payloads
❌ [Security] [SECURITY] Payload encrypted (03:49:17) {
  eventPattern: [32m'payment.card'[39m,
  originalSize: [32m'110'[39m,
  encryptedSize: [32m'126'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt simple payloads
❌ [Security] [SECURITY] Payload decrypted (03:49:17) {
  keyVersion: [32m'key_1757789357055_ger7foaa'[39m,
  originalSize: [32m'110'[39m,
  compressed: [32m'false'[39m,
  decryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 14: style="expression(alert(\"XSS\"))"...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt simple payloads
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Sensitive Data Sanitization > should redact password fields 35ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Sensitive Data Sanitization > should redact multiple sensitive field patterns 2ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Sensitive Data Sanitization > should handle nested sensitive data 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > XSS Pattern Detection > should detect and sanitize script tags 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > XSS Pattern Detection > should detect javascript: URLs 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > XSS Pattern Detection > should detect event handlers in strings 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Secret Pattern Detection > should detect Stripe API keys 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Secret Pattern Detection > should detect bearer tokens 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Secret Pattern Detection > should detect hex-encoded secrets 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Size Limits and Truncation > should truncate large strings 2ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Size Limits and Truncation > should truncate entire payload if too large 3ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Log Level Control > should respect log level hierarchy 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Log Level Control > should always log errors regardless of level 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Production Safety > should disable logging in production by default 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Production Safety > should still log errors in production even when disabled 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Security Event Detection > should detect high error rates 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Security Event Detection > should count XSS pattern detections 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Security Event Detection > should track security events separately 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Convenience Loggers > should provide EventBusLogger shortcuts 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Convenience Loggers > should provide SecurityLogger with threat classification 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Log Export and History > should maintain log history within limits 18ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Log Export and History > should export logs in JSON format 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Log Export and History > should clear history when requested 0ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Edge Cases and Robustness > should handle null and undefined data gracefully 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Edge Cases and Robustness > should handle circular references in objects 2ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Edge Cases and Robustness > should handle arrays with sensitive data 1ms
stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 15: <meta http-equiv="refresh" content="0;url=javascri...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Rate limiter cleanup completed (03:49:27) {
  globalRecords: [32m'1'[39m,
  ipRecords: [32m'1'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'1'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'1'[39m
}
ℹ️ [Security] Rate limiter cleanup completed (03:49:37) {
  globalRecords: [32m'1'[39m,
  ipRecords: [32m'1'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'1'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'1'[39m
}
ℹ️ [Security] Rate limiter cleanup completed (03:49:47) {
  globalRecords: [32m'1'[39m,
  ipRecords: [32m'1'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'1'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'1'[39m
}
ℹ️ [Security] Rate limiter cleanup completed (03:49:57) {
  globalRecords: [32m'0'[39m,
  ipRecords: [32m'0'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'0'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'0'[39m
}
ℹ️ [Security] Rate limiter cleanup completed (03:50:07) {
  globalRecords: [32m'0'[39m,
  ipRecords: [32m'0'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'0'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'0'[39m
}
ℹ️ [Security] Rate limiter cleanup completed (03:50:17) {
  globalRecords: [32m'0'[39m,
  ipRecords: [32m'0'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'0'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'0'[39m
}
ℹ️ [Security] Request rate limit check passed (03:50:18) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789418057_gbb2f4ulffps'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt complex nested objects
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:17) {
  keyVersion: [32m'key_1757789357062_cjwqlsu7'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 16: &#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
❌ [Security] [SECURITY] RateLimiter destroyed (03:50:18)

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt complex nested objects
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:17) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt complex nested objects
❌ [Security] [SECURITY] Payload encrypted (03:49:17) {
  eventPattern: [32m'customer.pii.update'[39m,
  originalSize: [32m'441'[39m,
  encryptedSize: [32m'457'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357069_7hpqooqrckaj'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt complex nested objects
❌ [Security] [SECURITY] Payload decrypted (03:49:17) {
  keyVersion: [32m'key_1757789357062_cjwqlsu7'[39m,
  originalSize: [32m'441'[39m,
  compressed: [32m'false'[39m,
  decryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757789357069_6y125fe1nq71'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 17: \u006A\u0061\u0076\u0061\u0073\u0063\u0072\u0069\u...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757789357069_fj0o4s9m3nmc'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt complex nested objects
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 18: <svg onload="alert(\"XSS\")">...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757789357069_a85qyks1kzfo'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should handle large payloads efficiently
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:17) {
  keyVersion: [32m'key_1757789357067_57rqkrex'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 19: <svg><script>alert("XSS")</script></svg>...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757789357069_dalf04tk7fwy'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should handle large payloads efficiently
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:17) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 20: {{constructor.constructor("alert(\"XSS\")")()}}...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'4'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757789357069_lq1geclzuya3'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should handle large payloads efficiently
❌ [Security] [SECURITY] Payload encrypted (03:49:17) {
  eventPattern: [32m'sensitive.large'[39m,
  originalSize: [32m'10083'[39m,
  encryptedSize: [32m'10099'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 21: ${alert("XSS")}...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'3'[39m,
  suspicionScore: [32m'49'[39m,
  requestId: [32m'req_1757789357069_9xpwaaib9ijf'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should handle large payloads efficiently
❌ [Security] [SECURITY] Payload decrypted (03:49:17) {
  keyVersion: [32m'key_1757789357067_57rqkrex'[39m,
  originalSize: [32m'10083'[39m,
  compressed: [32m'false'[39m,
  decryptionTimeMs: [32m'0.00'[39m
}

 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 1: <script>alert("XSS")</script>... 52ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 2: <script type="text/javascript">alert("XSS")</scrip... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 3: <script>document.location="http://evil.com"</scrip... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 4: <img src="x" onerror="alert(\"XSS\")">... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 5: <div onclick="alert(\"XSS\")">Click me</div>... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 6: <input onfocus="alert(\"XSS\")" autofocus>... 6ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 7: <body onload="alert(\"XSS\")">... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 8: javascript:alert("XSS")... 3ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 9: javascript:void(0)... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 10: vbscript:msgbox("XSS")... 3ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 11: data:text/html,<script>alert("XSS")</script>... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 12: data:text/html;base64,PHNjcmlwdD5hbGVydCgiWFNTIik8... 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 13: expression(alert("XSS"))... 3ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 14: style="expression(alert(\"XSS\"))"... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 15: <meta http-equiv="refresh" content="0;url=javascri... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 16: &#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 17: \u006A\u0061\u0076\u0061\u0073\u0063\u0072\u0069\u... 3ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 18: <svg onload="alert(\"XSS\")">... 3ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 19: <svg><script>alert("XSS")</script></svg>... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 20: {{constructor.constructor("alert(\"XSS\")")()}}... 2ms
stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'2'[39m,
  suspicionScore: [32m'51'[39m,
  requestId: [32m'req_1757789357069_bkmbrvd3khps'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should handle large payloads efficiently
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 22: <iframe src="javascript:alert(\"XSS\")"></iframe>...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'1'[39m,
  suspicionScore: [32m'53'[39m,
  requestId: [32m'req_1757789357069_sbmz7qnq4t7q'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should apply compression when beneficial
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:17) {
  keyVersion: [32m'key_1757789357075_1mqlk2o2'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 23: <iframe src="data:text/html,<script>alert(\"XSS\")...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'0'[39m,
  suspicionScore: [32m'55'[39m,
  requestId: [32m'req_1757789357069_xm1q0gjs3xu8'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should apply compression when beneficial
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:17) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 24: <object data="javascript:alert(\"XSS\")"></object>...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:17) { ip: [32m'192.168.1.103'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should apply compression when beneficial
❌ [Security] [SECURITY] Payload encrypted (03:49:17) {
  eventPattern: [32m'sensitive.compressible'[39m,
  originalSize: [32m'2674'[39m,
  encryptedSize: [32m'2690'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.104'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357069_2o31mkjyh01v'[39m
}

 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with default configuration 50ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with custom passphrase 8ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should handle disabled encryption 5ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should correctly identify sensitive patterns 3ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should handle case-insensitive pattern matching 6ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should handle wildcard patterns correctly 3ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt simple payloads 7ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt complex nested objects 5ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should handle large payloads efficiently 8ms
stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 25: <embed src="javascript:alert(\"XSS\")">...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should apply compression when beneficial
❌ [Security] [SECURITY] Payload decrypted (03:49:17) {
  keyVersion: [32m'key_1757789357075_1mqlk2o2'[39m,
  originalSize: [32m'2674'[39m,
  compressed: [32m'false'[39m,
  decryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should apply compression when beneficial
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.200'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357079_ezydxsqzrby1'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should maintain data integrity with special characters
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:17) {
  keyVersion: [32m'key_1757789357082_c8fb766z'[39m,
  rotationInterval: [32m'3600000'[39m
}

 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Client ID Generation > should generate secure client ID using crypto.randomUUID 3ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Client ID Generation > should fallback to crypto.getRandomValues when randomUUID unavailable 1ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Client ID Generation > should throw error when no crypto available 2ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Storage Operations > should store and retrieve client ID with integrity protection 36ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Storage Operations > should store data in sessionStorage by default 4ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Storage Operations > should use memory storage when configured 3ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should detect and reject tampered data 5ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should reject invalid data structure 2ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should work with integrity checks disabled 2ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should reject expired client data 3ms
stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.201'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357079_z7nmqfh1wss0'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should maintain data integrity with special characters
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:17) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 26: <link rel="stylesheet" href="javascript:alert(\"XS...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.202'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357079_k8o17kcld37x'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should maintain data integrity with special characters
❌ [Security] [SECURITY] Payload encrypted (03:49:17) {
  eventPattern: [32m'auth.special'[39m,
  originalSize: [32m'217'[39m,
  encryptedSize: [32m'233'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.203'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357079_zfym9qev8rpq'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should maintain data integrity with special characters
❌ [Security] [SECURITY] Payload decrypted (03:49:17) {
  keyVersion: [32m'key_1757789357082_c8fb766z'[39m,
  originalSize: [32m'217'[39m,
  compressed: [32m'false'[39m,
  decryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.204'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357079_xieead67ibjy'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should maintain data integrity with special characters
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.205'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357079_38ytzmzxh8ru'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should generate unique IVs for each encryption
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:17) {
  keyVersion: [32m'key_1757789357087_7elkk4t0'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.206'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357079_6xqnp6z4jgl1'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should generate unique IVs for each encryption
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:17) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.207'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357079_m6x7rdfjjn3g'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should generate unique IVs for each encryption
❌ [Security] [SECURITY] Payload encrypted (03:49:17) {
  eventPattern: [32m'payment.test'[39m,
  originalSize: [32m'15'[39m,
  encryptedSize: [32m'31'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.208'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357079_tpriuq6hlmex'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should generate unique IVs for each encryption
❌ [Security] [SECURITY] Payload encrypted (03:49:17) {
  eventPattern: [32m'payment.test'[39m,
  originalSize: [32m'15'[39m,
  encryptedSize: [32m'31'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 27: <form action="javascript:alert(\"XSS\")"><input ty...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.209'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357079_om6mf3r1urwz'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should generate unique IVs for each encryption
❌ [Security] [SECURITY] Payload decrypted (03:49:17) {
  keyVersion: [32m'key_1757789357087_7elkk4t0'[39m,
  originalSize: [32m'15'[39m,
  compressed: [32m'false'[39m,
  decryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.210'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357079_yk3zpvw7lvpr'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should generate unique IVs for each encryption
❌ [Security] [SECURITY] Payload decrypted (03:49:17) {
  keyVersion: [32m'key_1757789357087_7elkk4t0'[39m,
  originalSize: [32m'15'[39m,
  compressed: [32m'false'[39m,
  decryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.211'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357079_w7ejvrrn7ioy'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should generate unique IVs for each encryption
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.212'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357079_y0qxk8i6ygb3'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.213'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357079_kzx1aoqzdsup'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.214'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357079_til75ld52xjk'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.215'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357079_go82sywzu6mm'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered data
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:17) {
  keyVersion: [32m'key_1757789357094_wo09u13x'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.216'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357079_3pgyc15yf1j7'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered data
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:17) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.217'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357079_f5e6kc88ts4n'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should allow safe HTML-like content
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.218'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357079_tg153dkczp8h'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.219'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357079_urtzj87oapic'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.220'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357079_v1zn9oz264ci'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.221'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357079_v8gu0wanh0i2'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.222'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357079_4esv26iaucby'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered data
❌ [Security] [SECURITY] Payload encrypted (03:49:17) {
  eventPattern: [32m'auth.test'[39m,
  originalSize: [32m'20'[39m,
  encryptedSize: [32m'36'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.223'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357079_6nb870jf270o'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.224'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357079_ykedtswvne9i'[39m
}

 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should allow requests within IP limits 55ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits 15ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window 13ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently 9ms
stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered data
❌ [Security] [SECURITY] ANOMALY: Decryption failed (03:49:17) { keyVersion: [32m'key_1757789357094_wo09u13x'[39m, error: {} }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.200'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_df69tflajjhe'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.201'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_rqf0an10p61y'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.202'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_sb39dqdg8oui'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.203'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_8usoze6rsqyr'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.204'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_zfv5w8row8oa'[39m
}

 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should refuse to initialize without crypto support 35ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should never use Math.random() fallbacks 20ms
stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.205'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_9tr368et7yn3'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered data
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should generate cryptographically secure UUIDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:49:17)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.206'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_ulo16g20wzx9'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.207'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_e5ed4bfs6m82'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 1: 1' UNION SELECT * FROM users--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique event IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:17) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered authentication tag
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:17) {
  keyVersion: [32m'key_1757789357099_1u4h5dt2'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.208'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_6fkjsmfc5y5s'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered authentication tag
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:17) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.209'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_cuwpsbps7lyh'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.210'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_qq0q1124slps'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.211'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_uj554af6fj1j'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.212'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_23o715ys5fig'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered authentication tag
❌ [Security] [SECURITY] Payload encrypted (03:49:17) {
  eventPattern: [32m'auth.test'[39m,
  originalSize: [32m'20'[39m,
  encryptedSize: [32m'36'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.213'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_3q0k6194heev'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered authentication tag
❌ [Security] [SECURITY] ANOMALY: Decryption failed (03:49:17) { keyVersion: [32m'key_1757789357099_1u4h5dt2'[39m, error: {} }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 2: ' OR 1=1--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.214'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_j8p9d60kaiax'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered authentication tag
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 3: admin'--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.215'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_tnwuwbn4dy0p'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered IV
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:17) {
  keyVersion: [32m'key_1757789357102_n7kbwlbj'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 4: ' OR 'a'='a
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.216'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_60j5g1x6mase'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered IV
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:17) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 5: 1' AND 1=1--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.217'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_5kepfwa5wd7v'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered IV
❌ [Security] [SECURITY] Payload encrypted (03:49:17) {
  eventPattern: [32m'auth.test'[39m,
  originalSize: [32m'20'[39m,
  encryptedSize: [32m'36'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 6: 1' AND 1=2--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.218'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_w4en0j4jcz3d'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered IV
❌ [Security] [SECURITY] ANOMALY: Decryption failed (03:49:17) { keyVersion: [32m'key_1757789357102_n7kbwlbj'[39m, error: {} }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 7: 1'; WAITFOR DELAY '00:00:05'--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.219'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_3muv0j2i4sw8'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered IV
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.220'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_07ywkey2lqjr'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should reject encryption of non-sensitive patterns
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:17) {
  keyVersion: [32m'key_1757789357108_gdnic5j9'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 8: 1' AND (SELECT COUNT(*) FROM sysobjects)>0--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.221'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_v490l15tpbvs'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should reject encryption of non-sensitive patterns
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:17) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.222'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_7fszqse9dynd'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should reject encryption of non-sensitive patterns
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.223'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_k8wbc3mmuoox'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Key Management > should track key version in encrypted payloads
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:17) {
  keyVersion: [32m'key_1757789357110_53bojxlz'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.224'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_j3thhhg5r67k'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Key Management > should track key version in encrypted payloads
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:17) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.225'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_y72t1b1vx3ly'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Key Management > should track key version in encrypted payloads
❌ [Security] [SECURITY] Payload encrypted (03:49:17) {
  eventPattern: [32m'payment.test'[39m,
  originalSize: [32m'15'[39m,
  encryptedSize: [32m'31'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.226'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_i1ly8acqt24p'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Key Management > should track key version in encrypted payloads
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.227'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_rh1oe5tgd1xd'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Key Management > should handle key rotation gracefully
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:17) {
  keyVersion: [32m'key_1757789357112_7i2qp8hc'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.228'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_q03wtby1f69i'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Key Management > should handle key rotation gracefully
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:17) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 9: 1' UNION SELECT username, password FROM users--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.229'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_dog9wp31e76g'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Key Management > should handle key rotation gracefully
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.230'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_f2xjrfm601zg'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle malformed encrypted payloads
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:17) {
  keyVersion: [32m'key_1757789357113_q9u50nfu'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.231'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_tn0r597wmd6h'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle malformed encrypted payloads
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:17) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.232'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_wptqwbtj5vvj'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle malformed encrypted payloads
❌ [Security] [SECURITY] ANOMALY: Decryption failed (03:49:17) { keyVersion: [32m'test-key'[39m, error: {} }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.233'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_2w73f2752xmu'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle malformed encrypted payloads
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.234'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_tk04zwr8za3l'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.235'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_oxj1ny0ro0u3'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.236'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_y2ro611hfa13'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.237'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_om1vpbw6cz5g'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.238'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_w4ykhy0rb9gp'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 10: 1' UNION SELECT NULL, @@version--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.239'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_pzwdmdourlx1'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.240'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_i3dz2h3gyaiu'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.241'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_lbi7ccoyexgy'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle unsupported encryption algorithms
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:17) {
  keyVersion: [32m'key_1757789357116_9yqvp08f'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should execute fast handler successfully
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:17)

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 11: '; EXEC xp_cmdshell('dir')--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.242'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_j81p2wuoll26'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle unsupported encryption algorithms
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:17) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should timeout slow handler after configured limit
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:17) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.243'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_xuoobshlo80s'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle unsupported encryption algorithms
❌ [Security] [SECURITY] Payload encrypted (03:49:17) {
  eventPattern: [32m'payment.test'[39m,
  originalSize: [32m'15'[39m,
  encryptedSize: [32m'31'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.244'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_vt8wphos11et'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 12: '; EXEC sp_configure--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle unsupported encryption algorithms
❌ [Security] [SECURITY] ANOMALY: Decryption failed (03:49:17) { keyVersion: [32m'key_1757789357116_9yqvp08f'[39m, error: {} }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.245'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_odgo04vbddpl'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle unsupported encryption algorithms
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.246'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_7eex7sbr8x7e'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle encryption service not initialized
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:17) {
  keyVersion: [32m'key_1757789357126_rz9bbgro'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.247'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_dkljwubmisb0'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle encryption service not initialized
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:17) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.248'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_mdncy0e1qhc1'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle encryption service not initialized
❌ [Security] [SECURITY] ANOMALY: Encryption failed (03:49:17) { eventPattern: [32m'payment.test'[39m, error: {} }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.2.249'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357098_7aits3t26x6s'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle encryption service not initialized
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 13: 1'; DROP TABLE users--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
❌ [Security] [SECURITY] THREAT: User rate limit exceeded (03:49:17) { userId: [32m'user-456'[39m, count: [32m'51'[39m, limit: [32m'50'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle encryption service not initialized
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-789'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357130_njuxh38k3omk'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-789'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757789357130_a7dab02wwmto'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-789'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757789357130_suqy7qrwpdck'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-789'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757789357130_h09oqx1te4uy'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-789'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757789357130_jvj6x6hilr4r'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Utility Functions > should correctly identify encrypted payloads
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:17) {
  keyVersion: [32m'key_1757789357129_zr3lccct'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-789'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'4'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757789357130_18tkkoqipzb0'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-789'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'3'[39m,
  suspicionScore: [32m'49'[39m,
  requestId: [32m'req_1757789357130_xbyyzgd64352'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Utility Functions > should correctly identify encrypted payloads
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:17) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-789'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'2'[39m,
  suspicionScore: [32m'51'[39m,
  requestId: [32m'req_1757789357130_e3vobfbbryob'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 14: '; TRUNCATE TABLE logs--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-789'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'1'[39m,
  suspicionScore: [32m'53'[39m,
  requestId: [32m'req_1757789357130_emd2ttimheg6'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Utility Functions > should correctly identify encrypted payloads
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-012'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'0'[39m,
  suspicionScore: [32m'55'[39m,
  requestId: [32m'req_1757789357130_04lml4gt3sd8'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 15: '; DELETE FROM users WHERE 1=1--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Utility Functions > should provide accurate statistics
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:17) {
  keyVersion: [32m'key_1757789357131_34o3cox4'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to payment events
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Utility Functions > should provide accurate statistics
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:17) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to payment events
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.108'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357138_moyyw03u44db'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Utility Functions > should provide accurate statistics
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to payment events
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.108'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757789357138_pj1f6mu874k0'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 16: 1' AND ASCII(SUBSTRING((SELECT TOP 1 name FROM sysobjects),1,1))>64--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to payment events
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.108'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757789357138_jqmv2j3hbub4'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should encrypt small payloads quickly
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:17) {
  keyVersion: [32m'key_1757789357133_mxsp4bmx'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should encrypt small payloads quickly
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:17) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to payment events
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.108'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757789357138_5qaslipldopl'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to payment events
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.108'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757789357138_sosv5vdv49a8'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 17: 1'; BENCHMARK(5000000,MD5(1))--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should encrypt small payloads quickly
❌ [Security] [SECURITY] Payload encrypted (03:49:17) {
  eventPattern: [32m'payment.small'[39m,
  originalSize: [32m'22'[39m,
  encryptedSize: [32m'38'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to payment events
❌ [Security] [SECURITY] THREAT: Event pattern rate limit exceeded (03:49:17) { eventPattern: [32m'payment.process'[39m, count: [32m'6'[39m, limit: [32m'5'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should encrypt small payloads quickly
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to payment events
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:17) {
  keyVersion: [32m'key_1757789357136_u5fqvhlh'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to auth events
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:17) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 18: 1' AND (SELECT pg_sleep(5))--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to auth events
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.109'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'auth.login'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357142_rj12nqanq8y2'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to auth events
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.109'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'auth.login'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757789357142_t2r5sde1jat2'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to auth events
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.109'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'auth.login'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757789357142_5zrskv9cum1h'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (03:49:17) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (03:49:17) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to auth events
❌ [Security] [SECURITY] THREAT: Event pattern rate limit exceeded (03:49:17) { eventPattern: [32m'auth.login'[39m, count: [32m'4'[39m, limit: [32m'3'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 19: '; db.users.drop(); //
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (03:49:17) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to auth events
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (03:49:17) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (03:49:17) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should use pattern matching for event limits
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (03:49:17) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (03:49:17) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 20: $ne: null
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (03:49:17) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should use pattern matching for event limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.110'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357148_2jqim9yuevjs'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (03:49:17) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should use pattern matching for event limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.110'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.validate'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757789357148_c28m8vrxlzn2'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (03:49:17) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should use pattern matching for event limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.110'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.complete'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757789357148_00hivie99qdp'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 21: '; return true; //
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should use pattern matching for event limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.110'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.refund'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757789357148_3zt32bs5i18h'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should use pattern matching for event limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.110'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.capture'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757789357148_5qisoirstsrh'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 22: )(|(objectClass=*))
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should use pattern matching for event limits
❌ [Security] [SECURITY] THREAT: Event pattern rate limit exceeded (03:49:17) { eventPattern: [32m'payment.cancel'[39m, count: [32m'6'[39m, limit: [32m'5'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should cleanup resources on destroy
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:17) {
  keyVersion: [32m'key_1757789357146_mucajfwq'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should use pattern matching for event limits
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should cleanup resources on destroy
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:17) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 23: *)(uid=*))(|(uid=*
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should cleanup resources on destroy
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should cleanup resources on destroy
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should handle multiple destroy calls gracefully
❌ [Security] [SECURITY] EncryptionKeyManager initialized (03:49:17) {
  keyVersion: [32m'key_1757789357147_0tnv1fd1'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should allow safe query-like content
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.111'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357153_vmgvcyivzgda'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should handle multiple destroy calls gracefully
❌ [Security] [SECURITY] EncryptedEventStore initialized (03:49:17) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should handle multiple destroy calls gracefully
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.111'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757789357153_g07g9lyigzf8'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should handle multiple destroy calls gracefully
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > HTML Sanitization Tests > should remove HTML tags from user content
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.111'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757789357153_ayir4w819jrd'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.111'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757789357153_gq0o2ovu8z8w'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.111'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757789357153_guf2zu0ajyyt'[39m
}

 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should apply compression when beneficial 7ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should maintain data integrity with special characters 5ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should generate unique IVs for each encryption 6ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered data 5ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered authentication tag 3ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered IV 6ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should reject encryption of non-sensitive patterns 2ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Key Management > should track key version in encrypted payloads 2ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Key Management > should handle key rotation gracefully 1ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle malformed encrypted payloads 3ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle unsupported encryption algorithms 9ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle encryption service not initialized 5ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Utility Functions > should correctly identify encrypted payloads 2ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Utility Functions > should provide accurate statistics 2ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should encrypt small payloads quickly 3ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions 10ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should cleanup resources on destroy 2ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should handle multiple destroy calls gracefully 2ms
stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through
❌ [Security] [SECURITY] THREAT: Event pattern rate limit exceeded (03:49:17) { eventPattern: [32m'payment.process'[39m, count: [32m'6'[39m, limit: [32m'5'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > HTML Sanitization Tests > should handle HTML entities
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.111'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'inventory.update'[39m,
  remainingRequests: [32m'4'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757789357153_48by8kx144qh'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'999'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357158_kmsphlki02oe'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'1000'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'998'[39m,
  suspicionScore: [32m'19'[39m,
  requestId: [32m'req_1757789357208_j6m89ocpsylg'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'997'[39m,
  suspicionScore: [32m'21'[39m,
  requestId: [32m'req_1757789357258_v3ok9y165twb'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 1: javascript:alert("XSS")
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'996'[39m,
  suspicionScore: [32m'23'[39m,
  requestId: [32m'req_1757789357308_ntaouk4fiq9e'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'995'[39m,
  suspicionScore: [32m'25'[39m,
  requestId: [32m'req_1757789357358_bx85gqj19tnc'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'994'[39m,
  suspicionScore: [32m'27'[39m,
  requestId: [32m'req_1757789357408_oefqsqx2fsrr'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'993'[39m,
  suspicionScore: [32m'29'[39m,
  requestId: [32m'req_1757789357458_p1cwdrop1zcm'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'992'[39m,
  suspicionScore: [32m'31'[39m,
  requestId: [32m'req_1757789357508_u574wpyse81z'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'991'[39m,
  suspicionScore: [32m'33'[39m,
  requestId: [32m'req_1757789357558_cl69dza5i7ia'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 2: vbscript:msgbox("Attack")
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'990'[39m,
  suspicionScore: [32m'35'[39m,
  requestId: [32m'req_1757789357608_ff24855jfooo'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'989'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357658_thp7fn84z99r'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'988'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757789357708_s387r5pzm0tw'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'987'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757789357758_kwilgasfrh2j'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 3: data:text/html,<script>alert("XSS")</script>
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'986'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757789357808_sew0g99yi9oe'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'985'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757789357858_9byofhnxmccs'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'984'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757789357908_u4051j5qelsl'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 4: file:///etc/passwd
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'983'[39m,
  suspicionScore: [32m'49'[39m,
  requestId: [32m'req_1757789357958_g9ypbfp786qx'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'982'[39m,
  suspicionScore: [32m'51'[39m,
  requestId: [32m'req_1757789358008_8k9wgxomra8u'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'981'[39m,
  suspicionScore: [32m'53'[39m,
  requestId: [32m'req_1757789358058_qy5dh9skw4tz'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 5: ftp://malicious-site.com/payload.exe
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'980'[39m,
  suspicionScore: [32m'55'[39m,
  requestId: [32m'req_1757789358108_ntiibkpy8wmc'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'979'[39m,
  suspicionScore: [32m'57'[39m,
  requestId: [32m'req_1757789358158_ntbexs2pi8bh'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'978'[39m,
  suspicionScore: [32m'59'[39m,
  requestId: [32m'req_1757789358208_bbvnbp32f43u'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should allow safe protocols
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'977'[39m,
  suspicionScore: [32m'61'[39m,
  requestId: [32m'req_1757789358258_isy7sv5g5y28'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'976'[39m,
  suspicionScore: [32m'63'[39m,
  requestId: [32m'req_1757789358308_ed4213ys5pig'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'975'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789358358_t52nnawkf7c6'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'974'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789358408_hnj5jnkmak56'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Size and Structure Limits > should truncate oversized strings
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'973'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789358458_hpta6ot7fsna'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'972'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789358508_8ml2x3wwie89'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'971'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789358558_m1xfi8th5mje'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'970'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789358608_e6w66fsvu797'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Size and Structure Limits > should handle deeply nested objects
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'969'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789358658_y5b3pzhhxjal'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:18)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:18)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357172_y9u34iq2xf9y'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757789357272_u8549h2s6p7z'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757789357372_yxwca200rntj'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Size and Structure Limits > should truncate oversized arrays
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757789357472_8oamngbkzm2d'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757789357572_1f646jdezsuo'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'4'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757789357672_im10h118uqg1'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'3'[39m,
  suspicionScore: [32m'49'[39m,
  requestId: [32m'req_1757789357772_4ujhnqbv6itj'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'2'[39m,
  suspicionScore: [32m'51'[39m,
  requestId: [32m'req_1757789357872_03qdck3t844b'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'1'[39m,
  suspicionScore: [32m'53'[39m,
  requestId: [32m'req_1757789357972_d68ip1wrgh99'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'0'[39m,
  suspicionScore: [32m'55'[39m,
  requestId: [32m'req_1757789358072_1izmdr0f49w9'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:18) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:18) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:18) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:18) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:18) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:18) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:18) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:18) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:18) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:19) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:19) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:19) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:19) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:19) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:19) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:19) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:19) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:19) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:19) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:20) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:20) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:20) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:20) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:20) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:20) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:20) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:20) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 21: ${alert("XSS")}... 3ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 22: <iframe src="javascript:alert(\"XSS\")"></iframe>... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 23: <iframe src="data:text/html,<script>alert(\"XSS\")... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 24: <object data="javascript:alert(\"XSS\")"></object>... 3ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 25: <embed src="javascript:alert(\"XSS\")">... 3ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 26: <link rel="stylesheet" href="javascript:alert(\"XS... 4ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 27: <form action="javascript:alert(\"XSS\")"><input ty... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should allow safe HTML-like content 4ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 1: 1' UNION SELECT * FROM users-- 3ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 2: ' OR 1=1-- 3ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 3: admin'-- 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 4: ' OR 'a'='a 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 5: 1' AND 1=1-- 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 6: 1' AND 1=2-- 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 7: 1'; WAITFOR DELAY '00:00:05'-- 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 8: 1' AND (SELECT COUNT(*) FROM sysobjects)>0-- 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 9: 1' UNION SELECT username, password FROM users-- 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 10: 1' UNION SELECT NULL, @@version-- 3ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 11: '; EXEC xp_cmdshell('dir')-- 3ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 12: '; EXEC sp_configure-- 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 13: 1'; DROP TABLE users-- 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 14: '; TRUNCATE TABLE logs-- 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 15: '; DELETE FROM users WHERE 1=1-- 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 16: 1' AND ASCII(SUBSTRING((SELECT TOP 1 name FROM sysobjects),1,1))>64-- 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 17: 1'; BENCHMARK(5000000,MD5(1))-- 3ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 18: 1' AND (SELECT pg_sleep(5))-- 3ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 19: '; db.users.drop(); // 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 20: $ne: null 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 21: '; return true; // 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 22: )(|(objectClass=*)) 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 23: *)(uid=*))(|(uid=* 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should allow safe query-like content 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > HTML Sanitization Tests > should remove HTML tags from user content 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > HTML Sanitization Tests > should handle HTML entities 3ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 1: javascript:alert("XSS") 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 2: vbscript:msgbox("Attack") 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 3: data:text/html,<script>alert("XSS")</script> 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 4: file:///etc/passwd 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 5: ftp://malicious-site.com/payload.exe 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should allow safe protocols 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Size and Structure Limits > should truncate oversized strings 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Size and Structure Limits > should handle deeply nested objects 7ms
stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:20) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Complex Payload Tests > should handle realistic G-Admin business payloads
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:20) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:21) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:21) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:21) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:21) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:21) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:21) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Complex Payload Tests > should handle malicious business payload
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:21) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:21) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:21) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:21) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:22) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:22) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:22) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:22) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:22) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:22) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:22)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'999'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357194_0jnrjvgepa9r'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'1000'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'998'[39m,
  suspicionScore: [32m'19'[39m,
  requestId: [32m'req_1757789357244_ek0a5wunj4ip'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'997'[39m,
  suspicionScore: [32m'21'[39m,
  requestId: [32m'req_1757789357294_j16hyvqkp762'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'996'[39m,
  suspicionScore: [32m'23'[39m,
  requestId: [32m'req_1757789357344_viiki8n322n7'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Performance Tests > should validate large payloads efficiently
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'995'[39m,
  suspicionScore: [32m'25'[39m,
  requestId: [32m'req_1757789357394_cnki2ch1ingq'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'994'[39m,
  suspicionScore: [32m'27'[39m,
  requestId: [32m'req_1757789357444_at10eaw4vgdh'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'993'[39m,
  suspicionScore: [32m'29'[39m,
  requestId: [32m'req_1757789357494_ahwix4kapua9'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'992'[39m,
  suspicionScore: [32m'31'[39m,
  requestId: [32m'req_1757789357544_3a6z74isb3i0'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'991'[39m,
  suspicionScore: [32m'33'[39m,
  requestId: [32m'req_1757789357594_jijsuhtb2ueh'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'990'[39m,
  suspicionScore: [32m'35'[39m,
  requestId: [32m'req_1757789357644_i7dd7wts5zqc'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'989'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357694_b237dtdeho12'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'988'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757789357744_h3o3j1kutcb2'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'987'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757789357794_jq4aa6sei26l'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'986'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757789357844_avha7fx4epj1'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'985'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757789357894_759ihv74xwqz'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'984'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757789357944_dfow6yltwdnq'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'983'[39m,
  suspicionScore: [32m'49'[39m,
  requestId: [32m'req_1757789357994_2q8e5av9vz93'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'982'[39m,
  suspicionScore: [32m'51'[39m,
  requestId: [32m'req_1757789358044_3tuegw9s1km0'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'981'[39m,
  suspicionScore: [32m'53'[39m,
  requestId: [32m'req_1757789358094_07fralabyst3'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'980'[39m,
  suspicionScore: [32m'55'[39m,
  requestId: [32m'req_1757789358144_cxdoo0ovhdsa'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'979'[39m,
  suspicionScore: [32m'57'[39m,
  requestId: [32m'req_1757789358194_ftg4uztofrb9'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'978'[39m,
  suspicionScore: [32m'59'[39m,
  requestId: [32m'req_1757789358244_sdrjn8i7igh6'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'977'[39m,
  suspicionScore: [32m'61'[39m,
  requestId: [32m'req_1757789358294_hfe63e1wnidz'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'976'[39m,
  suspicionScore: [32m'63'[39m,
  requestId: [32m'req_1757789358344_eqd3g4g0yk0b'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'975'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789358394_28q4glv4oh20'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'974'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789358444_cgx0eve32ohy'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'973'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789358494_36iv0x854cfg'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'972'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789358544_glr59z24679u'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'971'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789358594_tp8zc551tnqw'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'970'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789358644_4siksx7krzyf'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'969'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789358694_11efu3v457rx'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'968'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789358744_y43bggnld2qj'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'967'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789358794_ibwb8lsoahq8'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'966'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789358844_hcqeofkvi9cb'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'965'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789358894_6406hkjhoqu6'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'964'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789358944_jlv6pp23wfh6'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:18) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'963'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789358994_vrch69u0peg9'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:19) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'962'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789359044_aee5cz71uhhr'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:19) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'961'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789359094_t1jah86pom9a'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:19) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'960'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789359144_t787duegtng2'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:19) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'959'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789359194_1ly17nyxyonh'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:19) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'958'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789359244_i9puk3g9a65n'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:19) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'957'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789359294_9sqnim20nyqh'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:19) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'956'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789359344_nbpkshz0n5uk'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:19) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'955'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789359394_07b97dcu2m6d'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:19) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'954'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789359444_0uqzl0ba540i'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:19) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'953'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789359494_mcxhpb4kyuj2'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:19) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'952'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789359544_nrwva9jkiokw'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:19) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'951'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789359594_sdd6hzdmlhgx'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] ATTACK: DDoS pattern detected (03:49:19) {
  ip: [32m'192.168.1.114'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  requestCount: [32m'50'[39m,
  suspicionScore: [32m'65'[39m,
  attackPattern: {
    rapid_fire: [32m'50'[39m,
    pattern_repetition: [32m'0'[39m,
    burst_spikes: [32m'1'[39m,
    geographic_anomaly: [32m'0'[39m
  },
  threshold: [32m'50'[39m
}
❌ [Security] [SECURITY] ATTACK: DDoS attack detected and IP blocked (03:49:19) {
  ip: [32m'192.168.1.114'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789359644_f55gynobry8e'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] THREAT: Request from blocked IP attempted (03:49:19) {
  ip: [32m'192.168.1.114'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  requestId: [32m'req_1757789359694_5i1fn74u24lt'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] THREAT: Request from blocked IP attempted (03:49:19) {
  ip: [32m'192.168.1.114'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  requestId: [32m'req_1757789359744_jjzbyt382chm'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] THREAT: Request from blocked IP attempted (03:49:19) {
  ip: [32m'192.168.1.114'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  requestId: [32m'req_1757789359794_qubns5virqn5'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] THREAT: Request from blocked IP attempted (03:49:19) {
  ip: [32m'192.168.1.114'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  requestId: [32m'req_1757789359844_cgi5t3h0bem8'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] THREAT: Request from blocked IP attempted (03:49:19) {
  ip: [32m'192.168.1.114'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  requestId: [32m'req_1757789359894_nrpl0iat2rme'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] THREAT: Request from blocked IP attempted (03:49:19) {
  ip: [32m'192.168.1.114'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  requestId: [32m'req_1757789359944_prb06yk83y3w'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (03:49:25) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'999'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789365944_xwt8ie16wb9f'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] IP automatically unblocked after duration expired (03:49:25) { ip: [32m'192.168.1.114'[39m, blockDuration: [32m'5000'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:25)

 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits 19ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits 32ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently 8ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to payment events 4ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to auth events 6ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should use pattern matching for event limits 5ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through 5ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks 14ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached 22ms
stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect suspicious user agents
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect suspicious user agents
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.115'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'62'[39m,
  requestId: [32m'req_1757789357222_xcpu3c8nxaps'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect suspicious user agents
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should handle geographic anomalies when enabled
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should handle geographic anomalies when enabled
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.116'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'42'[39m,
  requestId: [32m'req_1757789357223_67emga1onfjk'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should handle geographic anomalies when enabled
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should handle geographic anomalies when enabled
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should handle geographic anomalies when enabled
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP blocking
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP blocking
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.117'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357226_fcji6egqurgl'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP blocking
❌ [Security] [SECURITY] IP manually blocked (03:49:17) {
  ip: [32m'192.168.1.117'[39m,
  reason: [32m'Manual block for testing'[39m,
  durationMs: [32m'undefined'[39m
}
❌ [Security] [SECURITY] THREAT: Request from blocked IP attempted (03:49:17) {
  ip: [32m'192.168.1.117'[39m,
  eventPattern: [32m'test.event'[39m,
  requestId: [32m'req_1757789357226_2xyy6mxkam96'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP blocking
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP unblocking
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP unblocking
❌ [Security] [SECURITY] IP manually blocked (03:49:17) { ip: [32m'192.168.1.118'[39m, reason: [32m'Test block'[39m, durationMs: [32m'undefined'[39m }
❌ [Security] [SECURITY] THREAT: Request from blocked IP attempted (03:49:17) {
  ip: [32m'192.168.1.118'[39m,
  eventPattern: [32m'test.event'[39m,
  requestId: [32m'req_1757789357228_eyr6435a4ihk'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP unblocking
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.118'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357228_n16xc304fy4c'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP unblocking
❌ [Security] [SECURITY] IP manually unblocked (03:49:17) { ip: [32m'192.168.1.118'[39m, reason: [32m'Test unblock'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP unblocking
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.119'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357231_sy2z4yypc8nv'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.119'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757789357231_yv19b4d6sb3a'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.119'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757789357231_ahrdt4o28ey6'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.119'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757789357231_00e8gz5q65fg'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.119'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757789357231_3jlch8n0htpe'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.120'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357231_uxm1e1ugrjv5'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.120'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757789357231_rypboxaclzor'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.120'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757789357231_aawofiv52h8y'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.120'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757789357231_2o9qgrig881s'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.120'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757789357231_to4texnj1ppk'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.121'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357231_1jxp86ww44gd'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.121'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757789357231_lfcg50mlebt2'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.121'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757789357231_s7jh97yz9pmn'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.121'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757789357231_uiouny627kap'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.121'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757789357231_okgxbxju9ntb'[39m
}

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should execute fast handler successfully 151ms
stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track blocked IPs in statistics
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track blocked IPs in statistics
❌ [Security] [SECURITY] IP manually blocked (03:49:17) {
  ip: [32m'192.168.1.122'[39m,
  reason: [32m'Test blocking stats'[39m,
  durationMs: [32m'undefined'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track blocked IPs in statistics
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357242_fd550n8yeysy'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757789357292_qzx3dl3qw00o'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757789357342_q40bwae7pjcs'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757789357392_4h5htu62j1bu'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757789357442_pseso82r3l08'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Performance Tests > should have quick validation for hot paths
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'4'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757789357492_02fa5cn0yina'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'3'[39m,
  suspicionScore: [32m'49'[39m,
  requestId: [32m'req_1757789357542_n8k50289hnn0'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'2'[39m,
  suspicionScore: [32m'51'[39m,
  requestId: [32m'req_1757789357592_9vdtn1q7g9sw'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Performance Tests > should detect malicious content in quick validation
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'1'[39m,
  suspicionScore: [32m'53'[39m,
  requestId: [32m'req_1757789357642_gkt6ud40aajz'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'0'[39m,
  suspicionScore: [32m'55'[39m,
  requestId: [32m'req_1757789357692_urvee4gr781l'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Configuration Tests > should disable specific protection when configured
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:17) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:17) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:17) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:17) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Configuration Tests > should respect custom size limits
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:17) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:17) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:17) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:18) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:18) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:18) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (03:49:18) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:18)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Memory Management and Cleanup > should cleanup expired records
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Memory Management and Cleanup > should cleanup expired records
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.124'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357253_032tg6wcbffh'[39m
}

 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Size and Structure Limits > should truncate oversized arrays 11ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Complex Payload Tests > should handle realistic G-Admin business payloads 4ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Complex Payload Tests > should handle malicious business payload 3ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Performance Tests > should validate large payloads efficiently 50ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Performance Tests > should have quick validation for hot paths 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Performance Tests > should detect malicious content in quick validation 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Configuration Tests > should disable specific protection when configured 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Configuration Tests > should respect custom size limits 2ms
stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Memory Management and Cleanup > should cleanup expired records
ℹ️ [Security] Rate limiter cleanup completed (03:49:27) {
  globalRecords: [32m'1'[39m,
  ipRecords: [32m'1'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'1'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'1'[39m
}
ℹ️ [Security] Rate limiter cleanup completed (03:49:37) {
  globalRecords: [32m'1'[39m,
  ipRecords: [32m'1'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'1'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'1'[39m
}
ℹ️ [Security] Rate limiter cleanup completed (03:49:47) {
  globalRecords: [32m'1'[39m,
  ipRecords: [32m'1'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'1'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'1'[39m
}
ℹ️ [Security] Rate limiter cleanup completed (03:49:57) {
  globalRecords: [32m'0'[39m,
  ipRecords: [32m'0'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'0'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'0'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Memory Management and Cleanup > should cleanup expired records
❌ [Security] [SECURITY] RateLimiter destroyed (03:50:02)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Memory Management and Cleanup > should handle cleanup gracefully
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Memory Management and Cleanup > should handle cleanup gracefully
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Memory Management and Cleanup > should handle cleanup gracefully
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should handle malformed input gracefully
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should handle malformed input gracefully
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m''[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m''[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357258_7tsj4af96abq'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should handle malformed input gracefully
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should fail-safe on internal errors
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should fail-safe on internal errors
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.125'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357260_tquw66hgal2s'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should fail-safe on internal errors
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should fail-safe on internal errors
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should fail-safe on internal errors
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should work with minimal configuration
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should work with minimal configuration
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.126'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357263_npqb4ri7oz04'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should work with minimal configuration
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should work with minimal configuration
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should work with minimal configuration
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should respect custom event pattern limits
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should respect custom event pattern limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.127'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'custom.event.test'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789357265_ctsxou9la57e'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should respect custom event pattern limits
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should respect custom event pattern limits
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.127'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'custom.event.another'[39m,
  remainingRequests: [32m'98'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757789357265_vj5qfv4ekbff'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should respect custom event pattern limits
❌ [Security] [SECURITY] THREAT: Event pattern rate limit exceeded (03:49:17) { eventPattern: [32m'custom.event.final'[39m, count: [32m'3'[39m, limit: [32m'2'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should respect custom event pattern limits
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should respect custom event pattern limits
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should disable features when configured
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should disable features when configured
ℹ️ [Security] Request rate limit check passed (03:49:17) {
  ip: [32m'192.168.1.128'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'0'[39m,
  requestId: [32m'req_1757789357268_smq2n1unrz6l'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should disable features when configured
❌ [Security] [SECURITY] RateLimiter initialized (03:49:17) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'false'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should disable features when configured
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should disable features when configured
❌ [Security] [SECURITY] RateLimiter destroyed (03:49:17)

 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration 28ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect suspicious user agents 2ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should handle geographic anomalies when enabled 2ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP blocking 3ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP unblocking 3ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics 10ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track blocked IPs in statistics 1ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity 10ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Memory Management and Cleanup > should cleanup expired records 2ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Memory Management and Cleanup > should handle cleanup gracefully 3ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should handle malformed input gracefully 2ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should fail-safe on internal errors 3ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should work with minimal configuration 2ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should respect custom event pattern limits 3ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should disable features when configured 2ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should generate cryptographically secure UUIDs 67ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique event IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique subscription IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:17) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should rotate client ID when rotation interval exceeded
❌ [Security] [SECURITY] ANOMALY: Client ID rotation needed - clearing for automatic rotation (03:49:17)
❌ [Security] [SECURITY] ANOMALY: Client data cleared (03:49:17)

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should rotate client ID when rotation interval exceeded
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:49:17) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'b16a664f...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should rotate client ID when rotation interval exceeded
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:49:17) { reason: [32m'No valid existing ID found'[39m, newId: [32m'b16a664f...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should force rotation when requested
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:49:17) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'eec775c0...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should force rotation when requested
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:49:17) { reason: [32m'No valid existing ID found'[39m, newId: [32m'eec775c0...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should force rotation when requested
❌ [Security] [SECURITY] ANOMALY: Client data cleared (03:49:17)

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should force rotation when requested
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:49:17) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'c1911003...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should force rotation when requested
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:49:17) { reason: [32m'No valid existing ID found'[39m, newId: [32m'c1911003...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Legacy Migration > should detect and migrate legacy localStorage data
❌ [Security] [SECURITY] ANOMALY: Legacy localStorage client ID found during migration (03:49:17) { legacyPrefix: [32m'legacy-c...'[39m }
❌ [Security] [SECURITY] ANOMALY: Legacy localStorage cleared (03:49:17)

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Security Status Monitoring > should provide accurate security status
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:49:17) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'4310188b...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Security Status Monitoring > should provide accurate security status
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:49:17) { reason: [32m'No valid existing ID found'[39m, newId: [32m'4310188b...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Security Status Monitoring > should indicate when rotation is needed
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:49:17) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'df5bc82b...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Security Status Monitoring > should indicate when rotation is needed
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:49:17) { reason: [32m'No valid existing ID found'[39m, newId: [32m'df5bc82b...'[39m }

stdout | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Security Status Monitoring > should indicate when rotation is needed
Client ID created: success
Data stored: yes
Initial timestamp: [33m1757789357663[39m

 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should rotate client ID when rotation interval exceeded 617ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should force rotation when requested 1ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Legacy Migration > should detect and migrate legacy localStorage data 1ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Legacy Migration > should report no migration when no legacy data exists 0ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Legacy Migration > should handle localStorage unavailable gracefully 0ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Security Status Monitoring > should provide accurate security status 1ms
stdout | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Security Status Monitoring > should indicate when rotation is needed
Time elapsed since storage: [33m162[39m ms
Should need rotation: [33mtrue[39m

stdout | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Security Status Monitoring > should indicate when rotation is needed
Status: {
  needsRotation: [33mtrue[39m,
  lastRotation: [35m2025-09-13T18:49:17.663Z[39m,
  hasValidClient: [33mtrue[39m
}

stdout | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle sessionStorage quota exceeded
Mock setItem called - throwing QuotaExceededError

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle sessionStorage quota exceeded
❌ [Security] [SECURITY] VIOLATION: SessionStorage quota exceeded (03:49:17)
❌ [Security] [SECURITY] THREAT: Failed to store client ID securely (03:49:17) { error: [32m'Storage quota exceeded'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle corrupted JSON in storage
❌ [Security] [SECURITY] VIOLATION: Failed to parse stored client data (03:49:17) { error: [32m`Unexpected token 'i', "invalid-json{" is not valid JSON`[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle corrupted JSON in storage
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:49:17) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'c734f415...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle corrupted JSON in storage
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:49:17) { reason: [32m'No valid existing ID found'[39m, newId: [32m'c734f415...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should clear data when retrieval fails
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:49:17) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'b61c4552...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should clear data when retrieval fails
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:49:17) { reason: [32m'No valid existing ID found'[39m, newId: [32m'b61c4552...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should clear data when retrieval fails
❌ [Security] [SECURITY] VIOLATION: Failed to parse stored client data (03:49:17) { error: [32m'Parse error'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle missing sessionStorage gracefully
❌ [Security] [SECURITY] THREAT: Failed to store client ID securely (03:49:17) { error: [32m'SessionStorage not available'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle missing sessionStorage gracefully
❌ [Security] [SECURITY] THREAT: Failed to get secure client ID (03:49:17) { error: [32m'SessionStorage not available'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Configuration Management > should merge partial configuration with defaults
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:49:17) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'fe86c6d1...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Configuration Management > should merge partial configuration with defaults
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:49:17) { reason: [32m'No valid existing ID found'[39m, newId: [32m'fe86c6d1...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Multiple Instance Isolation > should maintain separate data for different storage types
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:49:17) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'1f0aaacc...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Multiple Instance Isolation > should maintain separate data for different storage types
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:49:17) { reason: [32m'No valid existing ID found'[39m, newId: [32m'1f0aaacc...'[39m }

 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Security Status Monitoring > should indicate when rotation is needed 163ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle sessionStorage quota exceeded 2ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle corrupted JSON in storage 1ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should clear data when retrieval fails 1ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle missing sessionStorage gracefully 1ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Configuration Management > should apply configuration correctly 0ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Configuration Management > should merge partial configuration with defaults 1ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Multiple Instance Isolation > should maintain separate data for different storage types 1ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique event IDs 224ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique subscription IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:49:17)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique trace IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:17) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique subscription IDs 624ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique trace IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:49:18)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique span IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:18) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique trace IDs 129ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique span IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:49:18)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique test IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:18) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique span IDs 498ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique test IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:49:19)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique transaction IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:19) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should timeout slow handler after configured limit
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:19)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should respect custom timeout parameter
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:19) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should timeout slow handler after configured limit 2011ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique test IDs 510ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique transaction IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:49:19)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Secure Number Generation > should generate secure integers within range
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:19) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique transaction IDs 496ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Secure Number Generation > should generate secure integers within range
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:49:19)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Secure Number Generation > should generate secure floats between 0 and 1
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:19) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Secure Number Generation > should generate secure integers within range 408ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Secure Number Generation > should generate secure floats between 0 and 1
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:49:20)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Secure Number Generation > should generate secure booleans with fair distribution
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:20) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Secure Number Generation > should generate secure booleans with fair distribution
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:49:20)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Entropy Quality Tests > should pass entropy quality tests
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:20) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stdout | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Entropy Quality Tests > should pass entropy quality tests
Entropy Test Results: {
  quality: [32m'good'[39m,
  entropy: [33m0.9988586122891054[39m,
  uniformity: [33m0.9089[39m,
  predictability: [33m0.333028480227087[39m
}

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Entropy Quality Tests > should pass entropy quality tests
❌ [Security] [SECURITY] ANOMALY: Entropy test completed (03:49:20) {
  sampleSize: [32m'10000'[39m,
  quality: [32m'good'[39m,
  entropy: [32m'0.9988586122891054'[39m,
  uniformity: [32m'0.9089'[39m,
  predictability: [32m'0.333028480227087'[39m
}

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Entropy Quality Tests > should pass entropy quality tests
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:49:20)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Entropy Quality Tests > should maintain consistent entropy across multiple tests
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:20) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Entropy Quality Tests > should maintain consistent entropy across multiple tests
❌ [Security] [SECURITY] ANOMALY: Entropy test completed (03:49:20) {
  sampleSize: [32m'1000'[39m,
  quality: [32m'good'[39m,
  entropy: [32m'0.9919782232309271'[39m,
  uniformity: [32m'0.9674'[39m,
  predictability: [32m'0.33129729471566555'[39m
}
❌ [Security] [SECURITY] ANOMALY: Entropy test completed (03:49:20) {
  sampleSize: [32m'1000'[39m,
  quality: [32m'good'[39m,
  entropy: [32m'0.9907273599065853'[39m,
  uniformity: [32m'0.9494'[39m,
  predictability: [32m'0.3209784502865983'[39m
}
❌ [Security] [SECURITY] ANOMALY: Entropy test completed (03:49:20) {
  sampleSize: [32m'1000'[39m,
  quality: [32m'good'[39m,
  entropy: [32m'0.9883813540590157'[39m,
  uniformity: [32m'0.8486'[39m,
  predictability: [32m'0.33121218878679815'[39m
}
❌ [Security] [SECURITY] ANOMALY: Entropy test completed (03:49:20) {
  sampleSize: [32m'1000'[39m,
  quality: [32m'good'[39m,
  entropy: [32m'0.9883651095995992'[39m,
  uniformity: [32m'0.904'[39m,
  predictability: [32m'0.3427457312425902'[39m
}
❌ [Security] [SECURITY] ANOMALY: Entropy test completed (03:49:20) {
  sampleSize: [32m'1000'[39m,
  quality: [32m'good'[39m,
  entropy: [32m'0.9900144130828744'[39m,
  uniformity: [32m'0.9256'[39m,
  predictability: [32m'0.3243664670947686'[39m
}

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Entropy Quality Tests > should maintain consistent entropy across multiple tests
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:49:20)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Performance and Security Balance > should generate IDs quickly while maintaining security
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:20) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stdout | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Performance and Security Balance > should generate IDs quickly while maintaining security
Average time per ID generation: 0.016ms

 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Secure Number Generation > should generate secure floats between 0 and 1 394ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Secure Number Generation > should generate secure booleans with fair distribution 35ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Entropy Quality Tests > should pass entropy quality tests 36ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Entropy Quality Tests > should maintain consistent entropy across multiple tests 19ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Performance and Security Balance > should generate IDs quickly while maintaining security
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:49:20)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Performance and Security Balance > should handle concurrent generation without collisions
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:20) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Performance and Security Balance > should handle concurrent generation without collisions
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:49:20)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Error Handling > should handle invalid integer range parameters
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:20) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Error Handling > should handle invalid integer range parameters
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:49:20)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Error Handling > should handle edge cases in number generation
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:20) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Error Handling > should handle edge cases in number generation
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:49:20)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Memory Management > should properly cleanup resources on destroy
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:20) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Memory Management > should properly cleanup resources on destroy
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:20) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
❌ [Security] [SECURITY] ANOMALY: Entropy test completed (03:49:20) {
  sampleSize: [32m'100'[39m,
  quality: [32m'good'[39m,
  entropy: [32m'0.8731101936650197'[39m,
  uniformity: [32m'0.9400000000000001'[39m,
  predictability: [32m'0.35151399643339143'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:49:20)
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:20) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:49:20)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Memory Management > should properly cleanup resources on destroy
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:49:20)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Integration > should integrate properly with EventBus
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:20) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:49:20)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Integration > should maintain singleton pattern correctly
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:20) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:49:20)
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:20) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (03:49:20)

 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Performance and Security Balance > should generate IDs quickly while maintaining security 63ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Performance and Security Balance > should handle concurrent generation without collisions 9ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Error Handling > should handle invalid integer range parameters 1ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Error Handling > should handle edge cases in number generation 1ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Memory Management > should properly cleanup resources on destroy 1ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Integration > should integrate properly with EventBus 0ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Integration > should maintain singleton pattern correctly 1ms
stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should respect custom timeout parameter
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:21)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should enforce maximum timeout limit
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:21) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should respect custom timeout parameter 2519ms
stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should enforce maximum timeout limit
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:21)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Error Handling > should handle handler errors without timeout
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:21) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Error Handling > should handle handler errors without timeout
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:21)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Error Handling > should track handler statistics correctly
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:21) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should enforce maximum timeout limit 102ms
 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Error Handling > should handle handler errors without timeout 1ms
stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Error Handling > should track handler statistics correctly
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:21)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Circuit Breaker Functionality > should trip circuit breaker after consecutive failures
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:21) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Circuit Breaker Functionality > should trip circuit breaker after consecutive failures
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:21)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Circuit Breaker Functionality > should reset circuit breaker manually
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:21) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Circuit Breaker Functionality > should reset circuit breaker manually
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:21)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Circuit Breaker Functionality > should reset consecutive failures on successful execution
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:21) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Circuit Breaker Functionality > should reset consecutive failures on successful execution
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:21)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Performance Monitoring > should log warning for slow handlers
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:21) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Error Handling > should track handler statistics correctly 114ms
 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Circuit Breaker Functionality > should trip circuit breaker after consecutive failures 2ms
 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Circuit Breaker Functionality > should reset circuit breaker manually 1ms
 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Circuit Breaker Functionality > should reset consecutive failures on successful execution 61ms
stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Performance Monitoring > should log warning for slow handlers
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:22)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Performance Monitoring > should provide security status metrics
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:22) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Performance Monitoring > should log warning for slow handlers 602ms
stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Performance Monitoring > should provide security status metrics
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:22)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Performance Monitoring > should clean up old handler stats
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:22) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Performance Monitoring > should clean up old handler stats
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:22)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Concurrent Handler Execution > should execute multiple handlers concurrently
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:22) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Performance Monitoring > should provide security status metrics 115ms
 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Performance Monitoring > should clean up old handler stats 1ms
stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Concurrent Handler Execution > should execute multiple handlers concurrently
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:22)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Concurrent Handler Execution > should handle concurrent timeouts
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:22) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Concurrent Handler Execution > should execute multiple handlers concurrently 152ms
stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Concurrent Handler Execution > should handle concurrent timeouts
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:23)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Configuration > should apply custom configuration
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:23) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Concurrent Handler Execution > should handle concurrent timeouts 1015ms
stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Configuration > should apply custom configuration
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:23)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Configuration > should disable circuit breaker when configured
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:23) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Configuration > should disable circuit breaker when configured
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:23)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts
❌ [Security] [SECURITY] THREAT: Handler execution timeout - possible DoS attack (03:49:23) {
  handlerId: [32m'slow-warning-test'[39m,
  pattern: [32m'test.slow.warning'[39m,
  timeoutMs: [32m'2000'[39m,
  eventId: [32m'test-event-id'[39m
}

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Configuration > should apply custom configuration 112ms
 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Configuration > should disable circuit breaker when configured 1ms

 Test Files  8 passed (8)
      Tests  217 passed (217)
   Start at  15:49:13
   Duration  10.50s (transform 726ms, setup 3.35s, collect 1.32s, tests 12.26s, environment 18.29s, prepare 2.12s)

