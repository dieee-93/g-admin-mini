
 RUN  v3.2.4 I:/Programacion/Proyectos/g-mini

stderr | src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should allow handlers that complete under 5 seconds
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:02:05)

stderr | src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should timeout handlers that exceed 5 seconds
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:02:05)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should execute fast handler successfully
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:02:05) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

stderr | src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should respect custom timeout per subscription (capped at 10s)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:02:05)

stderr | src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should enforce maximum 10s timeout limit
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:02:05)

stderr | src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should track timeout statistics
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:02:05)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should refuse to initialize without crypto support
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:02:05) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

 ✓ src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should allow handlers that complete under 5 seconds 31ms
 ✓ src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should timeout handlers that exceed 5 seconds 4ms
 ✓ src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should respect custom timeout per subscription (capped at 10s) 2ms
 ✓ src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should enforce maximum 10s timeout limit 1ms
 ✓ src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should track timeout statistics 2ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should refuse to initialize without crypto support
❌ [Security] [SECURITY] THREAT: Crypto validation failed (05:02:05) { error: [32m'Crypto not available'[39m, context: [32m'validateCryptoSupport'[39m }
❌ [Security] [SECURITY] THREAT: Crypto API unavailable - refusing insecure fallback (05:02:05) {
  userAgent: [32m'Mozilla/5.0 (win32) AppleWebKit/537.36 (KHTML, like Gecko) jsdom/26.1.0'[39m,
  context: [32m'SecureRandomGenerator initialization'[39m
}

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should refuse to initialize without crypto support
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should allow requests within IP limits
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should never use Math.random() fallbacks
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:02:05) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should allow requests within IP limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.100'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725340_3r8p4pvdpo1l'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should allow requests within IP limits
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:02:05) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should allow requests within IP limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.100'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757793725340_ovtx9ngk1xx5'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should allow requests within IP limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.100'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757793725340_lnihwvxky63c'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Storage Operations > should store and retrieve client ID with integrity protection
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:02:05) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'22a1b52a...'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should allow requests within IP limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.100'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757793725340_hjtvc3b7x8za'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Storage Operations > should store and retrieve client ID with integrity protection
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:02:05) { reason: [32m'No valid existing ID found'[39m, newId: [32m'22a1b52a...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Storage Operations > should store data in sessionStorage by default
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:02:05) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'2045e726...'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should allow requests within IP limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.100'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757793725340_tskjnxa1t5fy'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Storage Operations > should store data in sessionStorage by default
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:02:05) { reason: [32m'No valid existing ID found'[39m, newId: [32m'2045e726...'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 1: <script>alert("XSS")</script>...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should allow requests within IP limits
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Storage Operations > should use memory storage when configured
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:02:05) { storageType: [32m'memory'[39m, clientIdPrefix: [32m'588052ab...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Storage Operations > should use memory storage when configured
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:02:05) { reason: [32m'No valid existing ID found'[39m, newId: [32m'588052ab...'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with default configuration
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:02:05) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should never use Math.random() fallbacks
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725390_s4xwutisu356'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should detect and reject tampered data
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:02:05) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'6caec1bd...'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with default configuration
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725335_3f917eib'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should detect and reject tampered data
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:02:05) { reason: [32m'No valid existing ID found'[39m, newId: [32m'6caec1bd...'[39m }

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should generate cryptographically secure UUIDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:02:05) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757793725390_d2sylo1jyeop'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with default configuration
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should detect and reject tampered data
❌ [Security] [SECURITY] ANOMALY: Client data cleared (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757793725390_q88t9n3p7rtd'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with default configuration
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725335_3f917eib'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should detect and reject tampered data
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:02:05) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'badd8771...'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757793725390_w34t5laiccvi'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should detect and reject tampered data
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:02:05) { reason: [32m'No valid existing ID found'[39m, newId: [32m'badd8771...'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with default configuration
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'7'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757793725390_7b166mvcx0z6'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should reject invalid data structure
❌ [Security] [SECURITY] VIOLATION: Invalid client data structure detected (05:02:05)
❌ [Security] [SECURITY] ANOMALY: Client data cleared (05:02:05)

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with default configuration
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should reject invalid data structure
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:02:05) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'bf381b3f...'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with default configuration
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'4'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757793725390_8kiep35vweym'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should reject invalid data structure
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:02:05) { reason: [32m'No valid existing ID found'[39m, newId: [32m'bf381b3f...'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'3'[39m,
  suspicionScore: [32m'49'[39m,
  requestId: [32m'req_1757793725390_x4fj6aw3lvfz'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should work with integrity checks disabled
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:02:05) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'3c878223...'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'2'[39m,
  suspicionScore: [32m'51'[39m,
  requestId: [32m'req_1757793725390_w7r0ndsnpjbu'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should work with integrity checks disabled
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:02:05) { reason: [32m'No valid existing ID found'[39m, newId: [32m'3c878223...'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with custom passphrase
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725392_znt3p0uk'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'1'[39m,
  suspicionScore: [32m'53'[39m,
  requestId: [32m'req_1757793725390_trfeqrzqqfrx'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with custom passphrase
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 2: <script type="text/javascript">alert("XSS")</scrip...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should reject expired client data
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:02:05) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'15ff9e55...'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'0'[39m,
  suspicionScore: [32m'55'[39m,
  requestId: [32m'req_1757793725390_vifs3o07m9v3'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should reject expired client data
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:02:05) { reason: [32m'No valid existing ID found'[39m, newId: [32m'15ff9e55...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should reject expired client data
❌ [Security] [SECURITY] ANOMALY: Client ID expired, clearing (05:02:05)
❌ [Security] [SECURITY] ANOMALY: Client data cleared (05:02:05)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:05) { ip: [32m'192.168.1.101'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should reject expired client data
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:02:05) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'c378bab0...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should reject expired client data
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:02:05) { reason: [32m'No valid existing ID found'[39m, newId: [32m'c378bab0...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should rotate client ID when rotation interval exceeded
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:02:05) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'274a7910...'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 3: <script>document.location="http://evil.com"</scrip...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should rotate client ID when rotation interval exceeded
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:02:05) { reason: [32m'No valid existing ID found'[39m, newId: [32m'274a7910...'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with custom passphrase
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725392_znt3p0uk'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725408_j3jwzopdzoqz'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 4: <img src="x" onerror="alert(\"XSS\")">...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with custom passphrase
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757793725408_6qsgpu1devp4'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 5: <div onclick="alert(\"XSS\")">Click me</div>...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with custom passphrase
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757793725408_gezlqttiipuv'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 6: <input onfocus="alert(\"XSS\")" autofocus>...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with custom passphrase
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757793725408_sxa4l085zbhh'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 7: <body onload="alert(\"XSS\")">...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should handle disabled encryption
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725404_ghzlamuc'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757793725408_nhf637tm4er8'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should handle disabled encryption
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'4'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757793725408_kp1rucusvc53'[39m
}

stdout | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should handle disabled encryption
ℹ️ [Security] Encryption disabled - skipping initialization (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'3'[39m,
  suspicionScore: [32m'49'[39m,
  requestId: [32m'req_1757793725408_k56v1oobhh00'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should handle disabled encryption
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 8: javascript:alert("XSS")...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'2'[39m,
  suspicionScore: [32m'51'[39m,
  requestId: [32m'req_1757793725408_65ackn25knxn'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should handle disabled encryption
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'1'[39m,
  suspicionScore: [32m'53'[39m,
  requestId: [32m'req_1757793725408_a3n87xk6hex8'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should correctly identify sensitive patterns
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725407_gboafnep'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'0'[39m,
  suspicionScore: [32m'55'[39m,
  requestId: [32m'req_1757793725408_le8j8ponxpjq'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should correctly identify sensitive patterns
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:05) { ip: [32m'192.168.1.102'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should correctly identify sensitive patterns
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should handle case-insensitive pattern matching
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725410_4mfjg4yp'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should handle case-insensitive pattern matching
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should handle case-insensitive pattern matching
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should handle wildcard patterns correctly
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725412_docfdwfn'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should handle wildcard patterns correctly
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should handle wildcard patterns correctly
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should handle wildcard patterns correctly
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Rate limiter cleanup completed (05:02:15) {
  globalRecords: [32m'1'[39m,
  ipRecords: [32m'1'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'1'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'1'[39m
}
ℹ️ [Security] Rate limiter cleanup completed (05:02:25) {
  globalRecords: [32m'1'[39m,
  ipRecords: [32m'1'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'1'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'1'[39m
}
ℹ️ [Security] Rate limiter cleanup completed (05:02:35) {
  globalRecords: [32m'1'[39m,
  ipRecords: [32m'1'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'1'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'1'[39m
}
ℹ️ [Security] Rate limiter cleanup completed (05:02:45) {
  globalRecords: [32m'0'[39m,
  ipRecords: [32m'0'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'0'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'0'[39m
}
ℹ️ [Security] Rate limiter cleanup completed (05:02:55) {
  globalRecords: [32m'0'[39m,
  ipRecords: [32m'0'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'0'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'0'[39m
}
ℹ️ [Security] Rate limiter cleanup completed (05:03:05) {
  globalRecords: [32m'0'[39m,
  ipRecords: [32m'0'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'0'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'0'[39m
}
ℹ️ [Security] Request rate limit check passed (05:03:06) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793786408_r1vbtn9cj13p'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt simple payloads
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725414_dzg2955y'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 9: javascript:void(0)...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt simple payloads
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
❌ [Security] [SECURITY] RateLimiter destroyed (05:03:06)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725423_hx5vu4i10m25'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 10: vbscript:msgbox("XSS")...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt simple payloads
❌ [Security] [SECURITY] Payload encrypted (05:02:05) {
  eventPattern: [32m'payment.card'[39m,
  originalSize: [32m'110'[39m,
  encryptedSize: [32m'126'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757793725423_94gsbral80fu'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757793725423_o1w79kq545to'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757793725423_kmgx0tnhphw0'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt simple payloads
❌ [Security] [SECURITY] Payload decrypted (05:02:05) {
  keyVersion: [32m'key_1757793725414_dzg2955y'[39m,
  originalSize: [32m'110'[39m,
  compressed: [32m'false'[39m,
  decryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 11: data:text/html,<script>alert("XSS")</script>...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757793725423_89mc2q15193p'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt simple payloads
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 12: data:text/html;base64,PHNjcmlwdD5hbGVydCgiWFNTIik8...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'4'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757793725423_ft1x0g1wk3s1'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'3'[39m,
  suspicionScore: [32m'49'[39m,
  requestId: [32m'req_1757793725423_ax67qrfjljvi'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt complex nested objects
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725422_5juj6g2e'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 13: expression(alert("XSS"))...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt complex nested objects
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'2'[39m,
  suspicionScore: [32m'51'[39m,
  requestId: [32m'req_1757793725423_bwrhe89996ef'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'1'[39m,
  suspicionScore: [32m'53'[39m,
  requestId: [32m'req_1757793725423_n2a10wjlgzn6'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt complex nested objects
❌ [Security] [SECURITY] Payload encrypted (05:02:05) {
  eventPattern: [32m'customer.pii.update'[39m,
  originalSize: [32m'441'[39m,
  encryptedSize: [32m'457'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'0'[39m,
  suspicionScore: [32m'55'[39m,
  requestId: [32m'req_1757793725423_mopwosvuu9hj'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 14: style="expression(alert(\"XSS\"))"...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt complex nested objects
❌ [Security] [SECURITY] Payload decrypted (05:02:05) {
  keyVersion: [32m'key_1757793725422_5juj6g2e'[39m,
  originalSize: [32m'441'[39m,
  compressed: [32m'false'[39m,
  decryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:05) { ip: [32m'192.168.1.103'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt complex nested objects
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.104'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725423_wfw4c8bswtw7'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 15: <meta http-equiv="refresh" content="0;url=javascri...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should handle large payloads efficiently
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725427_gtmh1nao'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should handle large payloads efficiently
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 16: &#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Sensitive Data Sanitization > should redact password fields 41ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Sensitive Data Sanitization > should redact multiple sensitive field patterns 3ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Sensitive Data Sanitization > should handle nested sensitive data 2ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > XSS Pattern Detection > should detect and sanitize script tags 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > XSS Pattern Detection > should detect javascript: URLs 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > XSS Pattern Detection > should detect event handlers in strings 1ms
 × src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Secret Pattern Detection > should detect Stripe API keys 16ms
   → expected 'pk_test_fake_public_key_for_testing' to be '[SECRET_PATTERN_DETECTED]' // Object.is equality
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Secret Pattern Detection > should detect bearer tokens 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Secret Pattern Detection > should detect hex-encoded secrets 2ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Size Limits and Truncation > should truncate large strings 2ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Size Limits and Truncation > should truncate entire payload if too large 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Log Level Control > should respect log level hierarchy 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Log Level Control > should always log errors regardless of level 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Production Safety > should disable logging in production by default 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Production Safety > should still log errors in production even when disabled 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Security Event Detection > should detect high error rates 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Security Event Detection > should count XSS pattern detections 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Security Event Detection > should track security events separately 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Convenience Loggers > should provide EventBusLogger shortcuts 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Convenience Loggers > should provide SecurityLogger with threat classification 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Log Export and History > should maintain log history within limits 12ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Log Export and History > should export logs in JSON format 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Log Export and History > should clear history when requested 0ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Edge Cases and Robustness > should handle null and undefined data gracefully 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Edge Cases and Robustness > should handle circular references in objects 2ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Edge Cases and Robustness > should handle arrays with sensitive data 1ms
stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.200'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725435_qfi10c323d2a'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should handle large payloads efficiently
❌ [Security] [SECURITY] Payload encrypted (05:02:05) {
  eventPattern: [32m'sensitive.large'[39m,
  originalSize: [32m'10083'[39m,
  encryptedSize: [32m'10099'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 17: \u006A\u0061\u0076\u0061\u0073\u0063\u0072\u0069\u...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.201'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725435_290yzor7ifc9'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should handle large payloads efficiently
❌ [Security] [SECURITY] Payload decrypted (05:02:05) {
  keyVersion: [32m'key_1757793725427_gtmh1nao'[39m,
  originalSize: [32m'10083'[39m,
  compressed: [32m'false'[39m,
  decryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 18: <svg onload="alert(\"XSS\")">...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.202'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725435_skmatfc6km03'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should handle large payloads efficiently
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.203'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725435_nc5yrt86rmru'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should apply compression when beneficial
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725432_hw2y68mt'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.204'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725435_zpnyt7edvs3h'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should apply compression when beneficial
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.205'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725435_r9q1njuhdo3x'[39m
}

 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with default configuration 58ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with custom passphrase 12ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should handle disabled encryption 3ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should correctly identify sensitive patterns 3ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should handle case-insensitive pattern matching 2ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should handle wildcard patterns correctly 2ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt simple payloads 8ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt complex nested objects 4ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should handle large payloads efficiently 6ms
stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 19: <svg><script>alert("XSS")</script></svg>...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.206'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725435_6blg7fsbg3pq'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should apply compression when beneficial
❌ [Security] [SECURITY] Payload encrypted (05:02:05) {
  eventPattern: [32m'sensitive.compressible'[39m,
  originalSize: [32m'2674'[39m,
  encryptedSize: [32m'2690'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.207'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725435_yejd53omznk8'[39m
}

 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 1: <script>alert("XSS")</script>... 57ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 2: <script type="text/javascript">alert("XSS")</scrip... 4ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 3: <script>document.location="http://evil.com"</scrip... 6ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 4: <img src="x" onerror="alert(\"XSS\")">... 3ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 5: <div onclick="alert(\"XSS\")">Click me</div>... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 6: <input onfocus="alert(\"XSS\")" autofocus>... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 7: <body onload="alert(\"XSS\")">... 3ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 8: javascript:alert("XSS")... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 9: javascript:void(0)... 3ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 10: vbscript:msgbox("XSS")... 3ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 11: data:text/html,<script>alert("XSS")</script>... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 12: data:text/html;base64,PHNjcmlwdD5hbGVydCgiWFNTIik8... 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 13: expression(alert("XSS"))... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 14: style="expression(alert(\"XSS\"))"... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 15: <meta http-equiv="refresh" content="0;url=javascri... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 16: &#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 17: \u006A\u0061\u0076\u0061\u0073\u0063\u0072\u0069\u... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 18: <svg onload="alert(\"XSS\")">... 2ms
stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.208'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725435_gwfwi68gsrgt'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should apply compression when beneficial
❌ [Security] [SECURITY] Payload decrypted (05:02:05) {
  keyVersion: [32m'key_1757793725432_hw2y68mt'[39m,
  originalSize: [32m'2674'[39m,
  compressed: [32m'false'[39m,
  decryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 20: {{constructor.constructor("alert(\"XSS\")")()}}...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.209'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725435_scvkjbsx41qz'[39m
}

 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Client ID Generation > should generate secure client ID using crypto.randomUUID 3ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Client ID Generation > should fallback to crypto.getRandomValues when randomUUID unavailable 1ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Client ID Generation > should throw error when no crypto available 2ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Storage Operations > should store and retrieve client ID with integrity protection 44ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Storage Operations > should store data in sessionStorage by default 3ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Storage Operations > should use memory storage when configured 2ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should detect and reject tampered data 5ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should reject invalid data structure 2ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should work with integrity checks disabled 2ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should reject expired client data 5ms
stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should apply compression when beneficial
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.210'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725435_jygi08sgop8i'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should maintain data integrity with special characters
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725437_zf2j9oek'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.211'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725435_t3ea7bvhg6b4'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should maintain data integrity with special characters
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should maintain data integrity with special characters
❌ [Security] [SECURITY] Payload encrypted (05:02:05) {
  eventPattern: [32m'auth.special'[39m,
  originalSize: [32m'217'[39m,
  encryptedSize: [32m'233'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.212'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725435_1vody4owtbjt'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should maintain data integrity with special characters
❌ [Security] [SECURITY] Payload decrypted (05:02:05) {
  keyVersion: [32m'key_1757793725437_zf2j9oek'[39m,
  originalSize: [32m'217'[39m,
  compressed: [32m'false'[39m,
  decryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should maintain data integrity with special characters
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should generate unique IVs for each encryption
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725441_vgptmtw1'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 21: ${alert("XSS")}...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should generate unique IVs for each encryption
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should generate unique IVs for each encryption
❌ [Security] [SECURITY] Payload encrypted (05:02:05) {
  eventPattern: [32m'payment.test'[39m,
  originalSize: [32m'15'[39m,
  encryptedSize: [32m'31'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 22: <iframe src="javascript:alert(\"XSS\")"></iframe>...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should generate unique IVs for each encryption
❌ [Security] [SECURITY] Payload encrypted (05:02:05) {
  eventPattern: [32m'payment.test'[39m,
  originalSize: [32m'15'[39m,
  encryptedSize: [32m'31'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.213'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725435_f1t3ftv4nx4j'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.214'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725435_pbhu6onh59q9'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should generate unique IVs for each encryption
❌ [Security] [SECURITY] Payload decrypted (05:02:05) {
  keyVersion: [32m'key_1757793725441_vgptmtw1'[39m,
  originalSize: [32m'15'[39m,
  compressed: [32m'false'[39m,
  decryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 23: <iframe src="data:text/html,<script>alert(\"XSS\")...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.215'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725435_b3c5dnj939hl'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should generate unique IVs for each encryption
❌ [Security] [SECURITY] Payload decrypted (05:02:05) {
  keyVersion: [32m'key_1757793725441_vgptmtw1'[39m,
  originalSize: [32m'15'[39m,
  compressed: [32m'false'[39m,
  decryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should generate unique IVs for each encryption
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.216'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725435_ummpt6cwlqww'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 24: <object data="javascript:alert(\"XSS\")"></object>...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.217'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725435_5u3kzeo249f4'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered data
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725448_abgwsqx7'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered data
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.218'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725435_vh1ydhwe38se'[39m
}

 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should refuse to initialize without crypto support 40ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should never use Math.random() fallbacks 17ms
stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.219'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725435_43u5vf61wuzc'[39m
}

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should generate cryptographically secure UUIDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered data
❌ [Security] [SECURITY] Payload encrypted (05:02:05) {
  eventPattern: [32m'auth.test'[39m,
  originalSize: [32m'20'[39m,
  encryptedSize: [32m'36'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 25: <embed src="javascript:alert(\"XSS\")">...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.220'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725435_srff4nj4w76d'[39m
}

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique event IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:02:05) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.221'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725435_45iinb5jg46f'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered data
❌ [Security] [SECURITY] ANOMALY: Decryption failed (05:02:05) { keyVersion: [32m'key_1757793725448_abgwsqx7'[39m, error: {} }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 26: <link rel="stylesheet" href="javascript:alert(\"XS...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.222'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725435_xz4d7s89e838'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.223'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725435_s00q7d2leqli'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered data
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.224'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725435_mdtr6wdiq282'[39m
}

 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should allow requests within IP limits 51ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits 17ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window 15ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently 12ms
stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 27: <form action="javascript:alert(\"XSS\")"><input ty...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered authentication tag
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725453_yu57qodf'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered authentication tag
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered authentication tag
❌ [Security] [SECURITY] Payload encrypted (05:02:05) {
  eventPattern: [32m'auth.test'[39m,
  originalSize: [32m'20'[39m,
  encryptedSize: [32m'36'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.200'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_3xpve7o7g6tu'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should allow safe HTML-like content
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered authentication tag
❌ [Security] [SECURITY] ANOMALY: Decryption failed (05:02:05) { keyVersion: [32m'key_1757793725453_yu57qodf'[39m, error: {} }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.201'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_6pofmkx7hc96'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered authentication tag
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.202'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_a15vw56br51f'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.203'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_c6ial2ygl71r'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.204'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_gdvko7bbqnfd'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered IV
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725456_qtppo4o6'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered IV
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.205'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_lj1x7trsv3jr'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.206'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_daps2c94sml3'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered IV
❌ [Security] [SECURITY] Payload encrypted (05:02:05) {
  eventPattern: [32m'auth.test'[39m,
  originalSize: [32m'20'[39m,
  encryptedSize: [32m'36'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.207'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_y6j9l1qaur1j'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered IV
❌ [Security] [SECURITY] ANOMALY: Decryption failed (05:02:05) { keyVersion: [32m'key_1757793725456_qtppo4o6'[39m, error: {} }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 1: 1' UNION SELECT * FROM users--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.208'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_61ok6w3689uj'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered IV
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.209'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_s11t4r4x8v1y'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.210'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_tv9hybvj4hh8'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should reject encryption of non-sensitive patterns
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725459_yyomm7mb'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.211'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_gxpiu5tek8q4'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should reject encryption of non-sensitive patterns
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.212'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_3gtpg4joai3j'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 2: ' OR 1=1--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should reject encryption of non-sensitive patterns
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.213'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_zditc4nvcuqh'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.214'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_7e1qhfiwxqpb'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.215'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_h6dqhxjftixa'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Key Management > should track key version in encrypted payloads
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725461_oln789q7'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Key Management > should track key version in encrypted payloads
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.216'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_15ugtvob8mic'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 3: admin'--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Key Management > should track key version in encrypted payloads
❌ [Security] [SECURITY] Payload encrypted (05:02:05) {
  eventPattern: [32m'payment.test'[39m,
  originalSize: [32m'15'[39m,
  encryptedSize: [32m'31'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.217'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_rq5wet5b9v7m'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 4: ' OR 'a'='a
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Key Management > should track key version in encrypted payloads
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.218'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_4l3lp4r6w0g8'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 5: 1' AND 1=1--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Key Management > should handle key rotation gracefully
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725463_96mwzzud'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should execute fast handler successfully
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.219'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_r2k289yk3ljr'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 6: 1' AND 1=2--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Key Management > should handle key rotation gracefully
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.220'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_9cxq60gbj6m6'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 7: 1'; WAITFOR DELAY '00:00:05'--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Key Management > should handle key rotation gracefully
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.221'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_pvzk864j4z01'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 8: 1' AND (SELECT COUNT(*) FROM sysobjects)>0--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle malformed encrypted payloads
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725464_nwvbz0lz'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.222'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_ojt02676wvve'[39m
}

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should timeout slow handler after configured limit
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:02:05) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle malformed encrypted payloads
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.223'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_29k5ot83fpep'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle malformed encrypted payloads
❌ [Security] [SECURITY] ANOMALY: Decryption failed (05:02:05) { keyVersion: [32m'test-key'[39m, error: {} }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.224'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_3gxtdzeu0xh6'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle malformed encrypted payloads
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.225'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_4rnsyxql86xj'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle unsupported encryption algorithms
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725466_k4s4yepq'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.226'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_f92gxh33bro4'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle unsupported encryption algorithms
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.227'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_qq33gsq3yb1s'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 9: 1' UNION SELECT username, password FROM users--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle unsupported encryption algorithms
❌ [Security] [SECURITY] Payload encrypted (05:02:05) {
  eventPattern: [32m'payment.test'[39m,
  originalSize: [32m'15'[39m,
  encryptedSize: [32m'31'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.228'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_a5bj4n8pbfb1'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle unsupported encryption algorithms
❌ [Security] [SECURITY] ANOMALY: Decryption failed (05:02:05) { keyVersion: [32m'key_1757793725466_k4s4yepq'[39m, error: {} }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.229'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_0g128iv1v4o7'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle unsupported encryption algorithms
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.230'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_mjqvlw4ylngy'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle encryption service not initialized
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725470_533b0bkm'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.231'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_pmsf80pjml7z'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle encryption service not initialized
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.232'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_wudu5tjbfywk'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle encryption service not initialized
❌ [Security] [SECURITY] ANOMALY: Encryption failed (05:02:05) { eventPattern: [32m'payment.test'[39m, error: {} }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.233'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_erku21kmxo5z'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle encryption service not initialized
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.234'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_ldsai5pltmd6'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle encryption service not initialized
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.235'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_xd02uw912kp3'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Utility Functions > should correctly identify encrypted payloads
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725473_8x5bn749'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.236'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_l7n14q0hrjzl'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Utility Functions > should correctly identify encrypted payloads
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.237'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_uf5jum8phowt'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Utility Functions > should correctly identify encrypted payloads
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.238'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_fkl9k57ccrti'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Utility Functions > should provide accurate statistics
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725475_xq89a7xh'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.239'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_ypgeagm5y3ur'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 10: 1' UNION SELECT NULL, @@version--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Utility Functions > should provide accurate statistics
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.240'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_21u48j688qba'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Utility Functions > should provide accurate statistics
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.241'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_eooplxjavyx8'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should encrypt small payloads quickly
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725477_1ajsvlkh'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should encrypt small payloads quickly
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.242'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_7zln3yl870oh'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 11: '; EXEC xp_cmdshell('dir')--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should encrypt small payloads quickly
❌ [Security] [SECURITY] Payload encrypted (05:02:05) {
  eventPattern: [32m'payment.small'[39m,
  originalSize: [32m'22'[39m,
  encryptedSize: [32m'38'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.243'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_ebg7efa8o78g'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should encrypt small payloads quickly
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.244'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_qw7fwjv09g9l'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 12: '; EXEC sp_configure--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725479_b7cqrtrb'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.245'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_zlgzp17099aw'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.246'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_9zox84nm4bs6'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.247'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_nur0cz1a12pa'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 13: 1'; DROP TABLE users--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (05:02:05) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (05:02:05) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.248'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_qtkf14fg4l1w'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (05:02:05) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.2.249'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725461_y0a9eyr5mkil'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (05:02:05) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (05:02:05) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
❌ [Security] [SECURITY] THREAT: User rate limit exceeded (05:02:05) { userId: [32m'user-456'[39m, count: [32m'51'[39m, limit: [32m'50'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (05:02:05) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 14: '; TRUNCATE TABLE logs--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (05:02:05) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (05:02:05) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (05:02:05) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (05:02:05) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 15: '; DELETE FROM users WHERE 1=1--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-789'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725491_owu82h2k64lz'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-789'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757793725491_17a840nvoupe'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-789'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757793725491_zz2wx5th2g77'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-789'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757793725491_55a0ibiw6s3u'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 16: 1' AND ASCII(SUBSTRING((SELECT TOP 1 name FROM sysobjects),1,1))>64--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-789'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757793725491_5xje3ixx4gg4'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should cleanup resources on destroy
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725487_7zt0udan'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-789'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'4'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757793725491_ikegs1hflq54'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should cleanup resources on destroy
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 17: 1'; BENCHMARK(5000000,MD5(1))--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-789'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'3'[39m,
  suspicionScore: [32m'49'[39m,
  requestId: [32m'req_1757793725491_dceapdd4iyia'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should cleanup resources on destroy
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-789'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'2'[39m,
  suspicionScore: [32m'51'[39m,
  requestId: [32m'req_1757793725491_lvd1lyy3obli'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should cleanup resources on destroy
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-789'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'1'[39m,
  suspicionScore: [32m'53'[39m,
  requestId: [32m'req_1757793725491_50d8os5yynd8'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 18: 1' AND (SELECT pg_sleep(5))--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-012'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'0'[39m,
  suspicionScore: [32m'55'[39m,
  requestId: [32m'req_1757793725491_8cjzo8z9hc6u'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should handle multiple destroy calls gracefully
❌ [Security] [SECURITY] EncryptionKeyManager initialized (05:02:05) {
  keyVersion: [32m'key_1757793725489_hmg0por6'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should handle multiple destroy calls gracefully
❌ [Security] [SECURITY] EncryptedEventStore initialized (05:02:05) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should handle multiple destroy calls gracefully
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 19: '; db.users.drop(); //
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should handle multiple destroy calls gracefully
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to payment events
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to payment events
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.108'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725498_akx221ryymie'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to payment events
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.108'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757793725498_m1ifxncxuf3w'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 20: $ne: null
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to payment events
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.108'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757793725498_uj6f2oz9m5h7'[39m
}

 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should apply compression when beneficial 4ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should maintain data integrity with special characters 5ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should generate unique IVs for each encryption 6ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered data 5ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered authentication tag 3ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered IV 3ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should reject encryption of non-sensitive patterns 2ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Key Management > should track key version in encrypted payloads 2ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Key Management > should handle key rotation gracefully 1ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle malformed encrypted payloads 2ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle unsupported encryption algorithms 4ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle encryption service not initialized 3ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Utility Functions > should correctly identify encrypted payloads 2ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Utility Functions > should provide accurate statistics 2ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should encrypt small payloads quickly 2ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions 7ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should cleanup resources on destroy 3ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should handle multiple destroy calls gracefully 2ms
stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to payment events
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.108'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757793725498_fos7smt25y31'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 21: '; return true; //
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to payment events
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.108'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757793725498_59vtqtotyu91'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to payment events
❌ [Security] [SECURITY] THREAT: Event pattern rate limit exceeded (05:02:05) { eventPattern: [32m'payment.process'[39m, count: [32m'6'[39m, limit: [32m'5'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to payment events
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to auth events
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to auth events
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.109'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'auth.login'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725502_8q2fgcwjplvt'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 22: )(|(objectClass=*))
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to auth events
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.109'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'auth.login'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757793725502_6v7wrwbpaf25'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to auth events
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.109'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'auth.login'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757793725502_zvsl6uk3epxm'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to auth events
❌ [Security] [SECURITY] THREAT: Event pattern rate limit exceeded (05:02:05) { eventPattern: [32m'auth.login'[39m, count: [32m'4'[39m, limit: [32m'3'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to auth events
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 23: *)(uid=*))(|(uid=*
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should use pattern matching for event limits
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should use pattern matching for event limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.110'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725504_r6zgv4wro9gv'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should allow safe query-like content
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should use pattern matching for event limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.110'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.validate'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757793725504_80re4vg633w3'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should use pattern matching for event limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.110'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.complete'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757793725504_4q3lz081q9b7'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should use pattern matching for event limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.110'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.refund'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757793725504_43tf9o5irtma'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > HTML Sanitization Tests > should remove HTML tags from user content
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should use pattern matching for event limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.110'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.capture'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757793725504_74ruykaqt89h'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should use pattern matching for event limits
❌ [Security] [SECURITY] THREAT: Event pattern rate limit exceeded (05:02:05) { eventPattern: [32m'payment.cancel'[39m, count: [32m'6'[39m, limit: [32m'5'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should use pattern matching for event limits
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.111'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725507_ofxuhulyf5a7'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > HTML Sanitization Tests > should handle HTML entities
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.111'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757793725507_6fw9te1oilig'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.111'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757793725507_tnmxdrevxqf0'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.111'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757793725507_jcxsg295bnsz'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.111'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757793725507_qvxgjy4slxoo'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through
❌ [Security] [SECURITY] THREAT: Event pattern rate limit exceeded (05:02:05) { eventPattern: [32m'payment.process'[39m, count: [32m'6'[39m, limit: [32m'5'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.111'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'inventory.update'[39m,
  remainingRequests: [32m'4'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757793725507_m8q4juijb5uy'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 1: javascript:alert("XSS")
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'999'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725512_in7hm29tsm19'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'1000'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'998'[39m,
  suspicionScore: [32m'19'[39m,
  requestId: [32m'req_1757793725562_sggkkd9yryxu'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 2: vbscript:msgbox("Attack")
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'997'[39m,
  suspicionScore: [32m'21'[39m,
  requestId: [32m'req_1757793725612_s3kymnlyow0d'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'996'[39m,
  suspicionScore: [32m'23'[39m,
  requestId: [32m'req_1757793725662_c1fegvpmfkk1'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'995'[39m,
  suspicionScore: [32m'25'[39m,
  requestId: [32m'req_1757793725712_fz8buhsh9axs'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'994'[39m,
  suspicionScore: [32m'27'[39m,
  requestId: [32m'req_1757793725762_hisywhfmvxwr'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'993'[39m,
  suspicionScore: [32m'29'[39m,
  requestId: [32m'req_1757793725812_tv4ondm0lx7v'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 3: data:text/html,<script>alert("XSS")</script>
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'992'[39m,
  suspicionScore: [32m'31'[39m,
  requestId: [32m'req_1757793725862_jq9wdkioampo'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'991'[39m,
  suspicionScore: [32m'33'[39m,
  requestId: [32m'req_1757793725912_yf9a4mqahrv8'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'990'[39m,
  suspicionScore: [32m'35'[39m,
  requestId: [32m'req_1757793725962_n9n0z1lz5kp7'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'989'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793726012_wucasccvtoaf'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'988'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757793726062_3baa3doe5o7h'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 4: file:///etc/passwd
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'987'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757793726112_wlthv5nkkv75'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'986'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757793726162_6nywphxdslee'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'985'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757793726212_b3ntm9npdeqg'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'984'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757793726262_7pty9tclglcf'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'983'[39m,
  suspicionScore: [32m'49'[39m,
  requestId: [32m'req_1757793726312_md8jg9yaxr59'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 5: ftp://malicious-site.com/payload.exe
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'982'[39m,
  suspicionScore: [32m'51'[39m,
  requestId: [32m'req_1757793726362_moqmd8n7uuiw'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'981'[39m,
  suspicionScore: [32m'53'[39m,
  requestId: [32m'req_1757793726412_8kv4g0ayynu1'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'980'[39m,
  suspicionScore: [32m'55'[39m,
  requestId: [32m'req_1757793726462_avp8vudt1pdt'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'979'[39m,
  suspicionScore: [32m'57'[39m,
  requestId: [32m'req_1757793726512_q533nomhntmz'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'978'[39m,
  suspicionScore: [32m'59'[39m,
  requestId: [32m'req_1757793726562_6gv7r5r08meg'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should allow safe protocols
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'977'[39m,
  suspicionScore: [32m'61'[39m,
  requestId: [32m'req_1757793726612_phqprrge1h1f'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'976'[39m,
  suspicionScore: [32m'63'[39m,
  requestId: [32m'req_1757793726662_xduhpyvhhl08'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'975'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793726712_co5umz0qqkua'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'974'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793726762_exohxfaw7ae1'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'973'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793726812_uezya1vh3s3w'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Size and Structure Limits > should truncate oversized strings
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'972'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793726862_nporu1zeg5b9'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'971'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793726912_qidqx083z6hx'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'970'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793726962_6urugz7mrkhl'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (05:02:07) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'969'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793727012_vot7wi3xbxg0'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Size and Structure Limits > should handle deeply nested objects
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:07)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:07)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725530_dcvbtcsckuui'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757793725630_rln7likf7hxb'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Size and Structure Limits > should truncate oversized arrays
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757793725730_13ob0d46ez9g'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757793725830_test0k54svmw'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757793725930_63z2zydh1bd7'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'4'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757793726030_6d0r5wx5n739'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'3'[39m,
  suspicionScore: [32m'49'[39m,
  requestId: [32m'req_1757793726130_aherjtwihb0u'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'2'[39m,
  suspicionScore: [32m'51'[39m,
  requestId: [32m'req_1757793726230_87i2iu341via'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'1'[39m,
  suspicionScore: [32m'53'[39m,
  requestId: [32m'req_1757793726330_bqt1gmsdfn14'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'0'[39m,
  suspicionScore: [32m'55'[39m,
  requestId: [32m'req_1757793726430_7oab0npsowzx'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:06) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:06) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:06) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:06) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:06) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:07) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:07) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:07) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:07) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:07) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:07) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:07) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:07) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:07) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:07) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:08) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 19: <svg><script>alert("XSS")</script></svg>... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 20: {{constructor.constructor("alert(\"XSS\")")()}}... 7ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 21: ${alert("XSS")}... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 22: <iframe src="javascript:alert(\"XSS\")"></iframe>... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 23: <iframe src="data:text/html,<script>alert(\"XSS\")... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 24: <object data="javascript:alert(\"XSS\")"></object>... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 25: <embed src="javascript:alert(\"XSS\")">... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 26: <link rel="stylesheet" href="javascript:alert(\"XS... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 27: <form action="javascript:alert(\"XSS\")"><input ty... 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should allow safe HTML-like content 3ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 1: 1' UNION SELECT * FROM users-- 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 2: ' OR 1=1-- 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 3: admin'-- 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 4: ' OR 'a'='a 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 5: 1' AND 1=1-- 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 6: 1' AND 1=2-- 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 7: 1'; WAITFOR DELAY '00:00:05'-- 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 8: 1' AND (SELECT COUNT(*) FROM sysobjects)>0-- 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 9: 1' UNION SELECT username, password FROM users-- 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 10: 1' UNION SELECT NULL, @@version-- 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 11: '; EXEC xp_cmdshell('dir')-- 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 12: '; EXEC sp_configure-- 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 13: 1'; DROP TABLE users-- 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 14: '; TRUNCATE TABLE logs-- 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 15: '; DELETE FROM users WHERE 1=1-- 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 16: 1' AND ASCII(SUBSTRING((SELECT TOP 1 name FROM sysobjects),1,1))>64-- 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 17: 1'; BENCHMARK(5000000,MD5(1))-- 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 18: 1' AND (SELECT pg_sleep(5))-- 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 19: '; db.users.drop(); // 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 20: $ne: null 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 21: '; return true; // 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 22: )(|(objectClass=*)) 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 23: *)(uid=*))(|(uid=* 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should allow safe query-like content 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > HTML Sanitization Tests > should remove HTML tags from user content 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > HTML Sanitization Tests > should handle HTML entities 4ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 1: javascript:alert("XSS") 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 2: vbscript:msgbox("Attack") 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 3: data:text/html,<script>alert("XSS")</script> 3ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 4: file:///etc/passwd 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 5: ftp://malicious-site.com/payload.exe 3ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should allow safe protocols 3ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Size and Structure Limits > should truncate oversized strings 3ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Size and Structure Limits > should handle deeply nested objects 3ms
stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:08) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Complex Payload Tests > should handle realistic G-Admin business payloads
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:08) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:08) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:08) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:08) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:08) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:08) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:08) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:08) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:09) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:09) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:09) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:09) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Complex Payload Tests > should handle malicious business payload
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:09) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:09) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:09) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:09) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:09) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:09) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:10) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:10) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:10) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:10) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Performance Tests > should validate large payloads efficiently
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:10) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:10) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:10) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:10) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:10) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:10) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:11)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'999'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725558_79e1bihx1qeu'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'1000'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'998'[39m,
  suspicionScore: [32m'19'[39m,
  requestId: [32m'req_1757793725608_9ugrv77bbei2'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'997'[39m,
  suspicionScore: [32m'21'[39m,
  requestId: [32m'req_1757793725658_jhpf1nmel2om'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'996'[39m,
  suspicionScore: [32m'23'[39m,
  requestId: [32m'req_1757793725708_p711iiitfhwq'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'995'[39m,
  suspicionScore: [32m'25'[39m,
  requestId: [32m'req_1757793725758_ld02lb22svqp'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'994'[39m,
  suspicionScore: [32m'27'[39m,
  requestId: [32m'req_1757793725808_z14rq2ybt1df'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'993'[39m,
  suspicionScore: [32m'29'[39m,
  requestId: [32m'req_1757793725858_0gqc3yc8fpjx'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'992'[39m,
  suspicionScore: [32m'31'[39m,
  requestId: [32m'req_1757793725908_s24s9vj94aep'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'991'[39m,
  suspicionScore: [32m'33'[39m,
  requestId: [32m'req_1757793725958_cg0ruyi6ucbj'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'990'[39m,
  suspicionScore: [32m'35'[39m,
  requestId: [32m'req_1757793726008_wftee3ib5mbc'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'989'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793726058_x59zs9vlnpzf'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'988'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757793726108_mcoqvtlhjgd0'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'987'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757793726158_ndkm2m3vm0n6'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'986'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757793726208_ohjj3in9r5wg'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'985'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757793726258_s9lnzsvxtdz8'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'984'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757793726308_oedmpxci3efs'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'983'[39m,
  suspicionScore: [32m'49'[39m,
  requestId: [32m'req_1757793726358_0csaigt2go8c'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'982'[39m,
  suspicionScore: [32m'51'[39m,
  requestId: [32m'req_1757793726408_i5d0jg7k0yb7'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'981'[39m,
  suspicionScore: [32m'53'[39m,
  requestId: [32m'req_1757793726458_s35jjlbu2p3q'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'980'[39m,
  suspicionScore: [32m'55'[39m,
  requestId: [32m'req_1757793726508_cp296rm772i2'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'979'[39m,
  suspicionScore: [32m'57'[39m,
  requestId: [32m'req_1757793726558_7rfrrej81pmh'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'978'[39m,
  suspicionScore: [32m'59'[39m,
  requestId: [32m'req_1757793726608_0sjtfilgi2rp'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'977'[39m,
  suspicionScore: [32m'61'[39m,
  requestId: [32m'req_1757793726658_pp9arzjp7qza'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'976'[39m,
  suspicionScore: [32m'63'[39m,
  requestId: [32m'req_1757793726708_wq364mh7siqs'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'975'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793726758_8v2og01nklsz'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'974'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793726808_akim1oya0z5f'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'973'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793726858_8er4i2hsji5i'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'972'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793726908_r3xo68gi7tg5'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'971'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793726958_8nzftoaalovd'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:07) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'970'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793727008_ngrhkq2puq2s'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:07) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'969'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793727058_e973vqs3myxm'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:07) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'968'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793727108_ee5ik8bq185b'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:07) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'967'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793727158_qrb3d41raofy'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:07) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'966'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793727208_1ck2j9l4krv0'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:07) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'965'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793727258_0emwnia2afvi'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:07) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'964'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793727308_cmjh5peorgss'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:07) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'963'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793727358_lmc3zhjh6fms'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:07) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'962'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793727408_quhrlhdo0kxd'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:07) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'961'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793727458_mp56dbnf9m1u'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:07) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'960'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793727508_98bjhuxez9k9'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:07) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'959'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793727558_t7b2dto4uzgi'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:07) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'958'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793727608_kgqrgttgy0i0'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:07) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'957'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793727658_eljh987ymciy'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:07) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'956'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793727708_j54tt60ze14t'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:07) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'955'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793727758_iuquuean7bgd'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:07) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'954'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793727808_fg3tn14z35yg'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:07) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'953'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793727858_xbadc10vh6nt'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:07) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'952'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793727908_k8rnh6j5d9tx'[39m
}

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should execute fast handler successfully 141ms
stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:07) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'951'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793727958_u6my6wl680s5'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] ATTACK: DDoS pattern detected (05:02:08) {
  ip: [32m'192.168.1.114'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  requestCount: [32m'50'[39m,
  suspicionScore: [32m'65'[39m,
  attackPattern: {
    rapid_fire: [32m'50'[39m,
    pattern_repetition: [32m'0'[39m,
    burst_spikes: [32m'1'[39m,
    geographic_anomaly: [32m'0'[39m
  },
  threshold: [32m'50'[39m
}
❌ [Security] [SECURITY] ATTACK: DDoS attack detected and IP blocked (05:02:08) {
  ip: [32m'192.168.1.114'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757793728008_4avvlicqj59i'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] THREAT: Request from blocked IP attempted (05:02:08) {
  ip: [32m'192.168.1.114'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  requestId: [32m'req_1757793728058_2vjzylsvgeh4'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] THREAT: Request from blocked IP attempted (05:02:08) {
  ip: [32m'192.168.1.114'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  requestId: [32m'req_1757793728108_0y2zcwjgn3vz'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] THREAT: Request from blocked IP attempted (05:02:08) {
  ip: [32m'192.168.1.114'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  requestId: [32m'req_1757793728158_yjg2opvj3o7w'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] THREAT: Request from blocked IP attempted (05:02:08) {
  ip: [32m'192.168.1.114'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  requestId: [32m'req_1757793728208_tw68ibulqw21'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] THREAT: Request from blocked IP attempted (05:02:08) {
  ip: [32m'192.168.1.114'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  requestId: [32m'req_1757793728258_ucej8m2bgtcu'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] THREAT: Request from blocked IP attempted (05:02:08) {
  ip: [32m'192.168.1.114'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  requestId: [32m'req_1757793728308_fyhacl7b4n7q'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] IP automatically unblocked after duration expired (05:02:14) { ip: [32m'192.168.1.114'[39m, blockDuration: [32m'5000'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (05:02:14) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'999'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793734308_fp4ltn109il5'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:14)

 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits 26ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits 30ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently 7ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to payment events 4ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to auth events 2ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should use pattern matching for event limits 3ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through 4ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks 18ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached 28ms
stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:14)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect suspicious user agents
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect suspicious user agents
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.115'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'62'[39m,
  requestId: [32m'req_1757793725593_20rxwhfhz619'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect suspicious user agents
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should handle geographic anomalies when enabled
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should handle geographic anomalies when enabled
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.116'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'42'[39m,
  requestId: [32m'req_1757793725600_pjumrnrvjnd0'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should handle geographic anomalies when enabled
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should handle geographic anomalies when enabled
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should handle geographic anomalies when enabled
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP blocking
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP blocking
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.117'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725602_7a2nkx6r05z1'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP blocking
❌ [Security] [SECURITY] IP manually blocked (05:02:05) {
  ip: [32m'192.168.1.117'[39m,
  reason: [32m'Manual block for testing'[39m,
  durationMs: [32m'undefined'[39m
}
❌ [Security] [SECURITY] THREAT: Request from blocked IP attempted (05:02:05) {
  ip: [32m'192.168.1.117'[39m,
  eventPattern: [32m'test.event'[39m,
  requestId: [32m'req_1757793725602_brcr2xiwd66b'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP blocking
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP unblocking
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP unblocking
❌ [Security] [SECURITY] IP manually blocked (05:02:05) { ip: [32m'192.168.1.118'[39m, reason: [32m'Test block'[39m, durationMs: [32m'undefined'[39m }
❌ [Security] [SECURITY] THREAT: Request from blocked IP attempted (05:02:05) {
  ip: [32m'192.168.1.118'[39m,
  eventPattern: [32m'test.event'[39m,
  requestId: [32m'req_1757793725605_xkshvnl835d1'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP unblocking
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.118'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725605_ne6j7x0wa8bo'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP unblocking
❌ [Security] [SECURITY] IP manually unblocked (05:02:05) { ip: [32m'192.168.1.118'[39m, reason: [32m'Test unblock'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP unblocking
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.119'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725607_5f63navu6sd8'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.119'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757793725607_npxbvbhpuayq'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.119'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757793725607_yymywq2hagok'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.119'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757793725607_32l0yaym0mu7'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.119'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757793725607_azp64sl018pp'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.120'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725607_soj6roi4mpfl'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.120'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757793725607_sqigwqyip31l'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.120'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757793725607_9gpzcjvnhmyy'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.120'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757793725607_7bey7nndnfl8'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.120'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757793725607_n578yrnqxpok'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.121'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725607_49gpkpuhkft1'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.121'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757793725607_g85ijwh2onvu'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.121'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757793725607_s8mmct210xor'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.121'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757793725607_mbihs2fytrtz'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.121'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757793725607_9ihjpwenzsf9'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track blocked IPs in statistics
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track blocked IPs in statistics
❌ [Security] [SECURITY] IP manually blocked (05:02:05) {
  ip: [32m'192.168.1.122'[39m,
  reason: [32m'Test blocking stats'[39m,
  durationMs: [32m'undefined'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track blocked IPs in statistics
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725616_ata4ab4u6i7y'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757793725666_wxl38toaktm1'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757793725716_x8dgysb62ybb'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757793725766_qk0sgol1kpxt'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757793725816_prwc0ku42wk1'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'4'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757793725866_4dx5o7pv1hc5'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'3'[39m,
  suspicionScore: [32m'49'[39m,
  requestId: [32m'req_1757793725916_w5a3p0jw2scw'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'2'[39m,
  suspicionScore: [32m'51'[39m,
  requestId: [32m'req_1757793725966_fiep86d36zm6'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'1'[39m,
  suspicionScore: [32m'53'[39m,
  requestId: [32m'req_1757793726016_tkf4mae7274b'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (05:02:06) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'0'[39m,
  suspicionScore: [32m'55'[39m,
  requestId: [32m'req_1757793726066_k9elq2kso8wk'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:06) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Performance Tests > should have quick validation for hot paths
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:06) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:06) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:06) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:06) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:06) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Performance Tests > should detect malicious content in quick validation
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:06) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:06) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:06) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (05:02:06) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Configuration Tests > should disable specific protection when configured
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:06)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Memory Management and Cleanup > should cleanup expired records
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Memory Management and Cleanup > should cleanup expired records
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.124'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725623_0gxi0440v10c'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Configuration Tests > should respect custom size limits
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:02:05) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Memory Management and Cleanup > should cleanup expired records
ℹ️ [Security] Rate limiter cleanup completed (05:02:15) {
  globalRecords: [32m'1'[39m,
  ipRecords: [32m'1'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'1'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'1'[39m
}
ℹ️ [Security] Rate limiter cleanup completed (05:02:25) {
  globalRecords: [32m'1'[39m,
  ipRecords: [32m'1'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'1'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'1'[39m
}
ℹ️ [Security] Rate limiter cleanup completed (05:02:35) {
  globalRecords: [32m'1'[39m,
  ipRecords: [32m'1'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'1'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'1'[39m
}
ℹ️ [Security] Rate limiter cleanup completed (05:02:45) {
  globalRecords: [32m'0'[39m,
  ipRecords: [32m'0'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'0'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'0'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Memory Management and Cleanup > should cleanup expired records
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:50)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Memory Management and Cleanup > should handle cleanup gracefully
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Memory Management and Cleanup > should handle cleanup gracefully
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Memory Management and Cleanup > should handle cleanup gracefully
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should handle malformed input gracefully
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should handle malformed input gracefully
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m''[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m''[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725627_74ub41m94ygm'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should handle malformed input gracefully
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should fail-safe on internal errors
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Size and Structure Limits > should truncate oversized arrays 14ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Complex Payload Tests > should handle realistic G-Admin business payloads 6ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Complex Payload Tests > should handle malicious business payload 3ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Performance Tests > should validate large payloads efficiently 65ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Performance Tests > should have quick validation for hot paths 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Performance Tests > should detect malicious content in quick validation 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Configuration Tests > should disable specific protection when configured 2ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Configuration Tests > should respect custom size limits 2ms
stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should fail-safe on internal errors
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.125'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725628_j2ypk79aadry'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should fail-safe on internal errors
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should fail-safe on internal errors
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should fail-safe on internal errors
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should work with minimal configuration
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should work with minimal configuration
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.126'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725630_3fs8pkh697mt'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should work with minimal configuration
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should work with minimal configuration
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should work with minimal configuration
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should respect custom event pattern limits
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should respect custom event pattern limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.127'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'custom.event.test'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757793725631_sncuk6n19cac'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should respect custom event pattern limits
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should respect custom event pattern limits
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.127'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'custom.event.another'[39m,
  remainingRequests: [32m'98'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757793725631_w0obcak0u5je'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should respect custom event pattern limits
❌ [Security] [SECURITY] THREAT: Event pattern rate limit exceeded (05:02:05) { eventPattern: [32m'custom.event.final'[39m, count: [32m'3'[39m, limit: [32m'2'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should respect custom event pattern limits
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should respect custom event pattern limits
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should disable features when configured
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should disable features when configured
ℹ️ [Security] Request rate limit check passed (05:02:05) {
  ip: [32m'192.168.1.128'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'0'[39m,
  requestId: [32m'req_1757793725633_z8wnhpkl5mwf'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should disable features when configured
❌ [Security] [SECURITY] RateLimiter initialized (05:02:05) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'false'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should disable features when configured
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should disable features when configured
❌ [Security] [SECURITY] RateLimiter destroyed (05:02:05)

 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration 35ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect suspicious user agents 7ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should handle geographic anomalies when enabled 2ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP blocking 2ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP unblocking 2ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics 8ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track blocked IPs in statistics 1ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity 7ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Memory Management and Cleanup > should cleanup expired records 2ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Memory Management and Cleanup > should handle cleanup gracefully 2ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should handle malformed input gracefully 1ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should fail-safe on internal errors 2ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should work with minimal configuration 1ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should respect custom event pattern limits 2ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should disable features when configured 2ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should generate cryptographically secure UUIDs 64ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique event IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:02:05)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique subscription IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:02:05) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should rotate client ID when rotation interval exceeded
❌ [Security] [SECURITY] ANOMALY: Client ID rotation needed - clearing for automatic rotation (05:02:06)
❌ [Security] [SECURITY] ANOMALY: Client data cleared (05:02:06)

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should rotate client ID when rotation interval exceeded
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:02:06) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'b0a9c65f...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should rotate client ID when rotation interval exceeded
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:02:06) { reason: [32m'No valid existing ID found'[39m, newId: [32m'b0a9c65f...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should force rotation when requested
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:02:06) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'e3ab5625...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should force rotation when requested
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:02:06) { reason: [32m'No valid existing ID found'[39m, newId: [32m'e3ab5625...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should force rotation when requested
❌ [Security] [SECURITY] ANOMALY: Client data cleared (05:02:06)

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should force rotation when requested
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:02:06) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'02957dbe...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should force rotation when requested
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:02:06) { reason: [32m'No valid existing ID found'[39m, newId: [32m'02957dbe...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Legacy Migration > should detect and migrate legacy localStorage data
❌ [Security] [SECURITY] ANOMALY: Legacy localStorage client ID found during migration (05:02:06) { legacyPrefix: [32m'legacy-c...'[39m }
❌ [Security] [SECURITY] ANOMALY: Legacy localStorage cleared (05:02:06)

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Security Status Monitoring > should provide accurate security status
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:02:06) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'3d3a4446...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Security Status Monitoring > should provide accurate security status
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:02:06) { reason: [32m'No valid existing ID found'[39m, newId: [32m'3d3a4446...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Security Status Monitoring > should indicate when rotation is needed
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:02:06) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'3a25e8fb...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Security Status Monitoring > should indicate when rotation is needed
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:02:06) { reason: [32m'No valid existing ID found'[39m, newId: [32m'3a25e8fb...'[39m }

stdout | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Security Status Monitoring > should indicate when rotation is needed
Client ID created: success
Data stored: yes
Initial timestamp: [33m1757793726020[39m

 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should rotate client ID when rotation interval exceeded 610ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should force rotation when requested 1ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Legacy Migration > should detect and migrate legacy localStorage data 1ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Legacy Migration > should report no migration when no legacy data exists 0ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Legacy Migration > should handle localStorage unavailable gracefully 0ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Security Status Monitoring > should provide accurate security status 1ms
stdout | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Security Status Monitoring > should indicate when rotation is needed
Time elapsed since storage: [33m153[39m ms
Should need rotation: [33mtrue[39m

stdout | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Security Status Monitoring > should indicate when rotation is needed
Status: {
  needsRotation: [33mtrue[39m,
  lastRotation: [35m2025-09-13T20:02:06.020Z[39m,
  hasValidClient: [33mtrue[39m
}

stdout | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle sessionStorage quota exceeded
Mock setItem called - throwing QuotaExceededError

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle sessionStorage quota exceeded
❌ [Security] [SECURITY] VIOLATION: SessionStorage quota exceeded (05:02:06)
❌ [Security] [SECURITY] THREAT: Failed to store client ID securely (05:02:06) { error: [32m'Storage quota exceeded'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle corrupted JSON in storage
❌ [Security] [SECURITY] VIOLATION: Failed to parse stored client data (05:02:06) { error: [32m`Unexpected token 'i', "invalid-json{" is not valid JSON`[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle corrupted JSON in storage
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:02:06) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'217c2f3f...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle corrupted JSON in storage
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:02:06) { reason: [32m'No valid existing ID found'[39m, newId: [32m'217c2f3f...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should clear data when retrieval fails
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:02:06) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'58942b37...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should clear data when retrieval fails
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:02:06) { reason: [32m'No valid existing ID found'[39m, newId: [32m'58942b37...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should clear data when retrieval fails
❌ [Security] [SECURITY] VIOLATION: Failed to parse stored client data (05:02:06) { error: [32m'Parse error'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle missing sessionStorage gracefully
❌ [Security] [SECURITY] THREAT: Failed to store client ID securely (05:02:06) { error: [32m'SessionStorage not available'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle missing sessionStorage gracefully
❌ [Security] [SECURITY] THREAT: Failed to get secure client ID (05:02:06) { error: [32m'SessionStorage not available'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Configuration Management > should merge partial configuration with defaults
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:02:06) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'45a115f8...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Configuration Management > should merge partial configuration with defaults
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:02:06) { reason: [32m'No valid existing ID found'[39m, newId: [32m'45a115f8...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Multiple Instance Isolation > should maintain separate data for different storage types
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:02:06) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'c88198e5...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Multiple Instance Isolation > should maintain separate data for different storage types
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:02:06) { reason: [32m'No valid existing ID found'[39m, newId: [32m'c88198e5...'[39m }

 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Security Status Monitoring > should indicate when rotation is needed 155ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle sessionStorage quota exceeded 1ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle corrupted JSON in storage 1ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should clear data when retrieval fails 1ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle missing sessionStorage gracefully 1ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Configuration Management > should apply configuration correctly 0ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Configuration Management > should merge partial configuration with defaults 1ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Multiple Instance Isolation > should maintain separate data for different storage types 1ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique event IDs 242ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique subscription IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:02:06)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique trace IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:02:06) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique subscription IDs 556ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique trace IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:02:06)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique span IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:02:06) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique trace IDs 135ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique span IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:02:06)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique test IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:02:06) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique span IDs 483ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique test IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:02:07)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique transaction IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:02:07) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should timeout slow handler after configured limit
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:02:07)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should respect custom timeout parameter
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:02:07) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should timeout slow handler after configured limit 2014ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique test IDs 519ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique transaction IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:02:07)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Secure Number Generation > should generate secure integers within range
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:02:07) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique transaction IDs 499ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Secure Number Generation > should generate secure integers within range
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:02:08)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Secure Number Generation > should generate secure floats between 0 and 1
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:02:08) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Secure Number Generation > should generate secure integers within range 418ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Secure Number Generation > should generate secure floats between 0 and 1
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:02:08)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Secure Number Generation > should generate secure booleans with fair distribution
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:02:08) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Secure Number Generation > should generate secure booleans with fair distribution
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:02:08)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Entropy Quality Tests > should pass entropy quality tests
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:02:08) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stdout | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Entropy Quality Tests > should pass entropy quality tests
Entropy Test Results: {
  quality: [32m'good'[39m,
  entropy: [33m0.9988688330681049[39m,
  uniformity: [33m0.9446[39m,
  predictability: [33m0.33446935260554206[39m
}

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Entropy Quality Tests > should pass entropy quality tests
❌ [Security] [SECURITY] ANOMALY: Entropy test completed (05:02:08) {
  sampleSize: [32m'10000'[39m,
  quality: [32m'good'[39m,
  entropy: [32m'0.9988688330681049'[39m,
  uniformity: [32m'0.9446'[39m,
  predictability: [32m'0.33446935260554206'[39m
}

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Entropy Quality Tests > should pass entropy quality tests
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:02:08)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Entropy Quality Tests > should maintain consistent entropy across multiple tests
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:02:08) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Entropy Quality Tests > should maintain consistent entropy across multiple tests
❌ [Security] [SECURITY] ANOMALY: Entropy test completed (05:02:08) {
  sampleSize: [32m'1000'[39m,
  quality: [32m'good'[39m,
  entropy: [32m'0.9859561554404614'[39m,
  uniformity: [32m'0.869'[39m,
  predictability: [32m'0.3251390099754786'[39m
}
❌ [Security] [SECURITY] ANOMALY: Entropy test completed (05:02:08) {
  sampleSize: [32m'1000'[39m,
  quality: [32m'good'[39m,
  entropy: [32m'0.9873281127952046'[39m,
  uniformity: [32m'0.895'[39m,
  predictability: [32m'0.33753829878392266'[39m
}
❌ [Security] [SECURITY] ANOMALY: Entropy test completed (05:02:08) {
  sampleSize: [32m'1000'[39m,
  quality: [32m'good'[39m,
  entropy: [32m'0.9894003626288791'[39m,
  uniformity: [32m'0.8532'[39m,
  predictability: [32m'0.3301205336525514'[39m
}
❌ [Security] [SECURITY] ANOMALY: Entropy test completed (05:02:08) {
  sampleSize: [32m'1000'[39m,
  quality: [32m'good'[39m,
  entropy: [32m'0.9891988534500605'[39m,
  uniformity: [32m'0.878'[39m,
  predictability: [32m'0.33203323384223915'[39m
}
❌ [Security] [SECURITY] ANOMALY: Entropy test completed (05:02:08) {
  sampleSize: [32m'1000'[39m,
  quality: [32m'good'[39m,
  entropy: [32m'0.9874985283343596'[39m,
  uniformity: [32m'0.9314'[39m,
  predictability: [32m'0.3227194209617597'[39m
}

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Entropy Quality Tests > should maintain consistent entropy across multiple tests
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:02:08)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Performance and Security Balance > should generate IDs quickly while maintaining security
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:02:08) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stdout | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Performance and Security Balance > should generate IDs quickly while maintaining security
Average time per ID generation: 0.018ms

 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Secure Number Generation > should generate secure floats between 0 and 1 422ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Secure Number Generation > should generate secure booleans with fair distribution 32ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Entropy Quality Tests > should pass entropy quality tests 36ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Entropy Quality Tests > should maintain consistent entropy across multiple tests 18ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Performance and Security Balance > should generate IDs quickly while maintaining security
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:02:08)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Performance and Security Balance > should handle concurrent generation without collisions
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:02:08) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Performance and Security Balance > should handle concurrent generation without collisions
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:02:08)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Error Handling > should handle invalid integer range parameters
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:02:08) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Error Handling > should handle invalid integer range parameters
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:02:08)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Error Handling > should handle edge cases in number generation
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:02:08) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Error Handling > should handle edge cases in number generation
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:02:08)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Memory Management > should properly cleanup resources on destroy
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:02:08) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Memory Management > should properly cleanup resources on destroy
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:02:08) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
❌ [Security] [SECURITY] ANOMALY: Entropy test completed (05:02:08) {
  sampleSize: [32m'100'[39m,
  quality: [32m'good'[39m,
  entropy: [32m'0.877655069295081'[39m,
  uniformity: [32m'0.924'[39m,
  predictability: [32m'0.319300407428539'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:02:08)
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:02:08) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:02:08)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Memory Management > should properly cleanup resources on destroy
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:02:08)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Integration > should integrate properly with EventBus
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:02:08) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:02:08)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Integration > should maintain singleton pattern correctly
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:02:08) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:02:08)
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:02:08) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (05:02:08)

 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Performance and Security Balance > should generate IDs quickly while maintaining security 73ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Performance and Security Balance > should handle concurrent generation without collisions 10ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Error Handling > should handle invalid integer range parameters 1ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Error Handling > should handle edge cases in number generation 1ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Memory Management > should properly cleanup resources on destroy 1ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Integration > should integrate properly with EventBus 0ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Integration > should maintain singleton pattern correctly 1ms
stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should respect custom timeout parameter
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:02:10)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should enforce maximum timeout limit
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:02:10) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should respect custom timeout parameter 2519ms
stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should enforce maximum timeout limit
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:02:10)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Error Handling > should handle handler errors without timeout
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:02:10) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Error Handling > should handle handler errors without timeout
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:02:10)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Error Handling > should track handler statistics correctly
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:02:10) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should enforce maximum timeout limit 111ms
 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Error Handling > should handle handler errors without timeout 1ms
stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Error Handling > should track handler statistics correctly
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:02:10)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Circuit Breaker Functionality > should trip circuit breaker after consecutive failures
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:02:10) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Circuit Breaker Functionality > should trip circuit breaker after consecutive failures
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:02:10)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Circuit Breaker Functionality > should reset circuit breaker manually
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:02:10) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Circuit Breaker Functionality > should reset circuit breaker manually
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:02:10)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Circuit Breaker Functionality > should reset consecutive failures on successful execution
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:02:10) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Circuit Breaker Functionality > should reset consecutive failures on successful execution
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:02:10)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Performance Monitoring > should log warning for slow handlers
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:02:10) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Error Handling > should track handler statistics correctly 110ms
 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Circuit Breaker Functionality > should trip circuit breaker after consecutive failures 1ms
 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Circuit Breaker Functionality > should reset circuit breaker manually 1ms
 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Circuit Breaker Functionality > should reset consecutive failures on successful execution 61ms
stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Performance Monitoring > should log warning for slow handlers
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:02:10)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Performance Monitoring > should provide security status metrics
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:02:10) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Performance Monitoring > should log warning for slow handlers 606ms
stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Performance Monitoring > should provide security status metrics
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:02:11)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Performance Monitoring > should clean up old handler stats
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:02:11) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Performance Monitoring > should clean up old handler stats
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:02:11)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Concurrent Handler Execution > should execute multiple handlers concurrently
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:02:11) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Performance Monitoring > should provide security status metrics 127ms
 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Performance Monitoring > should clean up old handler stats 1ms
stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Concurrent Handler Execution > should execute multiple handlers concurrently
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:02:11)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Concurrent Handler Execution > should handle concurrent timeouts
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:02:11) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Concurrent Handler Execution > should execute multiple handlers concurrently 164ms
stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Concurrent Handler Execution > should handle concurrent timeouts
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:02:12)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Configuration > should apply custom configuration
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:02:12) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Concurrent Handler Execution > should handle concurrent timeouts 1015ms
stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Configuration > should apply custom configuration
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:02:12)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Configuration > should disable circuit breaker when configured
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:02:12) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Configuration > should disable circuit breaker when configured
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:02:12)

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Configuration > should apply custom configuration 111ms
 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Configuration > should disable circuit breaker when configured 1ms

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 1 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Secret Pattern Detection > should detect Stripe API keys
AssertionError: expected 'pk_test_fake_public_key_for_testing' to be '[SECRET_PATTERN_DETECTED]' // Object.is equality

Expected: [32m"[SECRET_PATTERN_DETECTED]"[39m
Received: [31m"pk_test_fake_public_key_for_testing"[39m

 ❯ src/lib/events/__tests__/security/SecureLogger.test.ts:144:41
    142|       
    143|       const history = SecureLogger.getHistory(1);
    144|       expect(history[0].data.publicKey).toBe('[SECRET_PATTERN_DETECTED…
       |                                         ^
    145|       expect(history[0].data.secretKey).toBe('[SECRET_PATTERN_DETECTED…
    146|       expect(history[0].data.regularData).toBe('normal_value');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/1]⎯


 Test Files  1 failed | 7 passed (8)
      Tests  1 failed | 216 passed (217)
   Start at  17:02:01
   Duration  10.53s (transform 794ms, setup 3.27s, collect 1.28s, tests 12.28s, environment 18.66s, prepare 2.26s)

