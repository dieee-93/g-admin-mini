
 RUN  v3.2.4 I:/Programacion/Proyectos/g-mini

stderr | src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should allow handlers that complete under 5 seconds
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:25)

stderr | src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should timeout handlers that exceed 5 seconds
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:25)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should execute fast handler successfully
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:25) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

stderr | src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should respect custom timeout per subscription (capped at 10s)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should allow requests within IP limits
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should refuse to initialize without crypto support
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:25) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 1: <script>alert("XSS")</script>...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Storage Operations > should store and retrieve client ID with integrity protection
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:25) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'c20e9d0a...'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with default configuration
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:25) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should enforce maximum 10s timeout limit
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should allow requests within IP limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.100'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065467_wcwphnil6d11'[39m
}

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should refuse to initialize without crypto support
❌ [Security] [SECURITY] THREAT: Crypto validation failed (06:14:25) { error: [32m'Crypto not available'[39m, context: [32m'validateCryptoSupport'[39m }
❌ [Security] [SECURITY] THREAT: Crypto API unavailable - refusing insecure fallback (06:14:25) {
  userAgent: [32m'Mozilla/5.0 (win32) AppleWebKit/537.36 (KHTML, like Gecko) jsdom/26.1.0'[39m,
  context: [32m'SecureRandomGenerator initialization'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Storage Operations > should store and retrieve client ID with integrity protection
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:14:25) { reason: [32m'No valid existing ID found'[39m, newId: [32m'c20e9d0a...'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with default configuration
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065464_r7s2va6i'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should track timeout statistics
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should allow requests within IP limits
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:25) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should refuse to initialize without crypto support
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Storage Operations > should store data in sessionStorage by default
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:25) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'61971ec7...'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with default configuration
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should allow requests within IP limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.100'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757798065467_ssntuah746jz'[39m
}

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should never use Math.random() fallbacks
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:25) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Storage Operations > should store data in sessionStorage by default
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:14:25) { reason: [32m'No valid existing ID found'[39m, newId: [32m'61971ec7...'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with default configuration
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065464_r7s2va6i'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should allow requests within IP limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.100'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757798065467_yajf5masds45'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 2: <script type="text/javascript">alert("XSS")</scrip...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Storage Operations > should use memory storage when configured
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:25) { storageType: [32m'memory'[39m, clientIdPrefix: [32m'2505d5fd...'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with default configuration
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'7'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should allow requests within IP limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.100'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757798065467_5smt1dm0bd4o'[39m
}

 ✓ src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should allow handlers that complete under 5 seconds 34ms
 ✓ src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should timeout handlers that exceed 5 seconds 3ms
 ✓ src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should respect custom timeout per subscription (capped at 10s) 2ms
 ✓ src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should enforce maximum 10s timeout limit 1ms
 ✓ src/lib/events/__tests__/security/timeout-validation.test.ts > Handler Timeout Validation (5s Max) > should track timeout statistics 2ms
stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Storage Operations > should use memory storage when configured
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:14:25) { reason: [32m'No valid existing ID found'[39m, newId: [32m'2505d5fd...'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with default configuration
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should allow requests within IP limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.100'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757798065467_j7pk99wreyi8'[39m
}

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should never use Math.random() fallbacks
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should detect and reject tampered data
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:25) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'dbe4ad3b...'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with default configuration
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should allow requests within IP limits
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should generate cryptographically secure UUIDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:25) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should detect and reject tampered data
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:14:25) { reason: [32m'No valid existing ID found'[39m, newId: [32m'dbe4ad3b...'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with custom passphrase
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065512_2agbtqj2'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should detect and reject tampered data
❌ [Security] [SECURITY] ANOMALY: Client data cleared (06:14:25)

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with custom passphrase
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 3: <script>document.location="http://evil.com"</scrip...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065504_4z7kz4cgdzbc'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should detect and reject tampered data
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:25) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'557406bf...'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757798065504_pexmlelmw2j3'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should detect and reject tampered data
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:14:25) { reason: [32m'No valid existing ID found'[39m, newId: [32m'557406bf...'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757798065504_jindduvwbbh4'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should reject invalid data structure
❌ [Security] [SECURITY] VIOLATION: Invalid client data structure detected (06:14:25)
❌ [Security] [SECURITY] ANOMALY: Client data cleared (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757798065504_zeevnmztm82o'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should reject invalid data structure
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:25) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'0ce7dfdb...'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757798065504_01p9fgzq2nd7'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should reject invalid data structure
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:14:25) { reason: [32m'No valid existing ID found'[39m, newId: [32m'0ce7dfdb...'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'4'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757798065504_inzuey5xcxxy'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with custom passphrase
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065512_2agbtqj2'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should work with integrity checks disabled
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:25) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'b3f5f055...'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'3'[39m,
  suspicionScore: [32m'49'[39m,
  requestId: [32m'req_1757798065504_o7hs1wol3fj6'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with custom passphrase
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should work with integrity checks disabled
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:14:25) { reason: [32m'No valid existing ID found'[39m, newId: [32m'b3f5f055...'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'2'[39m,
  suspicionScore: [32m'51'[39m,
  requestId: [32m'req_1757798065504_w0fiqg0czvxp'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should reject expired client data
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:25) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'd75ca2a6...'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with custom passphrase
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'1'[39m,
  suspicionScore: [32m'53'[39m,
  requestId: [32m'req_1757798065504_b6nd4ucz6t94'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should reject expired client data
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:14:25) { reason: [32m'No valid existing ID found'[39m, newId: [32m'd75ca2a6...'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with custom passphrase
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.101'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'0'[39m,
  suspicionScore: [32m'55'[39m,
  requestId: [32m'req_1757798065504_dud3ms09n0g7'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should reject expired client data
❌ [Security] [SECURITY] ANOMALY: Client ID expired, clearing (06:14:25)
❌ [Security] [SECURITY] ANOMALY: Client data cleared (06:14:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:25) { ip: [32m'192.168.1.101'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should reject expired client data
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:25) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'9746feea...'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 4: <img src="x" onerror="alert(\"XSS\")">...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should reject expired client data
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:14:25) { reason: [32m'No valid existing ID found'[39m, newId: [32m'9746feea...'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should handle disabled encryption
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065519_fs3w9qrj'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should rotate client ID when rotation interval exceeded
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:25) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'a1cc513c...'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065512_cy0hxou0c8j0'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should handle disabled encryption
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should rotate client ID when rotation interval exceeded
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:14:25) { reason: [32m'No valid existing ID found'[39m, newId: [32m'a1cc513c...'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757798065512_edzwj8zansc6'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757798065512_japs5df2mn3a'[39m
}

stdout | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should handle disabled encryption
ℹ️ [Security] Encryption disabled - skipping initialization (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757798065512_bo444g6mn3wt'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should handle disabled encryption
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757798065512_f7bkibhh67fo'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should handle disabled encryption
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 5: <div onclick="alert(\"XSS\")">Click me</div>...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'4'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757798065512_aqap7co3dlux'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'3'[39m,
  suspicionScore: [32m'49'[39m,
  requestId: [32m'req_1757798065512_hofii91m5vk7'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should correctly identify sensitive patterns
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065522_yh1picxx'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'2'[39m,
  suspicionScore: [32m'51'[39m,
  requestId: [32m'req_1757798065512_pmpj6i0d45tm'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should correctly identify sensitive patterns
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'1'[39m,
  suspicionScore: [32m'53'[39m,
  requestId: [32m'req_1757798065512_ojeendkkoi77'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'0'[39m,
  suspicionScore: [32m'55'[39m,
  requestId: [32m'req_1757798065512_2fhj3za89tzt'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:25) { ip: [32m'192.168.1.102'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
ℹ️ [Security] Rate limiter cleanup completed (06:14:35) {
  globalRecords: [32m'1'[39m,
  ipRecords: [32m'1'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'1'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'1'[39m
}
ℹ️ [Security] Rate limiter cleanup completed (06:14:45) {
  globalRecords: [32m'1'[39m,
  ipRecords: [32m'1'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'1'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'1'[39m
}
ℹ️ [Security] Rate limiter cleanup completed (06:14:55) {
  globalRecords: [32m'1'[39m,
  ipRecords: [32m'1'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'1'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'1'[39m
}
ℹ️ [Security] Rate limiter cleanup completed (06:15:05) {
  globalRecords: [32m'0'[39m,
  ipRecords: [32m'0'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'0'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'0'[39m
}
ℹ️ [Security] Rate limiter cleanup completed (06:15:15) {
  globalRecords: [32m'0'[39m,
  ipRecords: [32m'0'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'0'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'0'[39m
}
ℹ️ [Security] Rate limiter cleanup completed (06:15:25) {
  globalRecords: [32m'0'[39m,
  ipRecords: [32m'0'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'0'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'0'[39m
}
ℹ️ [Security] Request rate limit check passed (06:15:26) {
  ip: [32m'192.168.1.102'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798126512_1d5z7vz81cmq'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should correctly identify sensitive patterns
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window
❌ [Security] [SECURITY] RateLimiter destroyed (06:15:26)

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 6: <input onfocus="alert(\"XSS\")" autofocus>...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065520_exl1c8wopxxo'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757798065520_t7xaa1tppr48'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757798065520_jt3dk31jgy3x'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757798065520_a37a7pe103rk'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757798065520_35zkod61w36w'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should handle case-insensitive pattern matching
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065525_524k99q6'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'4'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757798065520_70n86geqw8c0'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should handle case-insensitive pattern matching
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'3'[39m,
  suspicionScore: [32m'49'[39m,
  requestId: [32m'req_1757798065520_tuc0i8bwvjw2'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'2'[39m,
  suspicionScore: [32m'51'[39m,
  requestId: [32m'req_1757798065520_6hdfjfq8h1vq'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should handle case-insensitive pattern matching
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'1'[39m,
  suspicionScore: [32m'53'[39m,
  requestId: [32m'req_1757798065520_bpq2bhcxqgsa'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should handle wildcard patterns correctly
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065527_yvp041mj'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 7: <body onload="alert(\"XSS\")">...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.103'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'0'[39m,
  suspicionScore: [32m'55'[39m,
  requestId: [32m'req_1757798065520_76fvutmpy8sx'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should handle wildcard patterns correctly
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:25) { ip: [32m'192.168.1.103'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should handle wildcard patterns correctly
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.104'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065520_5latmyn91g2z'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should handle wildcard patterns correctly
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt simple payloads
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065529_fxx9dqqn'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 8: javascript:alert("XSS")...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt simple payloads
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.200'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065527_b6holft20on4'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt simple payloads
❌ [Security] [SECURITY] Payload encrypted (06:14:25) {
  eventPattern: [32m'payment.card'[39m,
  originalSize: [32m'110'[39m,
  encryptedSize: [32m'126'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.201'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065527_vcba8zkk1zo6'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt simple payloads
❌ [Security] [SECURITY] Payload decrypted (06:14:25) {
  keyVersion: [32m'key_1757798065529_fxx9dqqn'[39m,
  originalSize: [32m'110'[39m,
  compressed: [32m'false'[39m,
  decryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.202'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065527_cfsf0dms9fwz'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt simple payloads
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.203'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065527_sq0tv6y9dfl5'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt complex nested objects
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065536_ahd3nhbs'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.204'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065527_nnfv5l2bzqrt'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt complex nested objects
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Sensitive Data Sanitization > should redact password fields 39ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Sensitive Data Sanitization > should redact multiple sensitive field patterns 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Sensitive Data Sanitization > should handle nested sensitive data 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Sensitive Data Sanitization > CamelCase and Other Naming Conventions > should redact camelCase and PascalCase sensitive fields 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Sensitive Data Sanitization > CamelCase and Other Naming Conventions > should redact snake_case sensitive fields 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Sensitive Data Sanitization > CamelCase and Other Naming Conventions > should not redact partial matches in non-sensitive fields 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > XSS Pattern Detection > should detect and sanitize script tags 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > XSS Pattern Detection > should detect javascript: URLs 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > XSS Pattern Detection > should detect event handlers in strings 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Secret Pattern Detection > should detect Stripe API keys 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Secret Pattern Detection > should detect bearer tokens 0ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Secret Pattern Detection > should detect hex-encoded secrets 0ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Size Limits and Truncation > should truncate large strings 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Size Limits and Truncation > should truncate entire payload if too large 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Log Level Control > should respect log level hierarchy 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Log Level Control > should always log errors regardless of level 0ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Production Safety > should disable logging in production by default 0ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Production Safety > should still log errors in production even when disabled 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Security Event Detection > should detect high error rates 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Security Event Detection > should count XSS pattern detections 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Security Event Detection > should track security events separately 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Convenience Loggers > should provide EventBusLogger shortcuts 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Convenience Loggers > should provide SecurityLogger with threat classification 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Log Export and History > should maintain log history within limits 11ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Log Export and History > should export logs in JSON format 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Log Export and History > should clear history when requested 0ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Edge Cases and Robustness > should handle null and undefined data gracefully 1ms
 ✓ src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Edge Cases and Robustness > should handle circular references in objects 2ms
 × src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Edge Cases and Robustness > should handle arrays with sensitive data 10ms
   → this.sanitizeData is not a function
stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.205'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065527_up031gh3gmmh'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt complex nested objects
❌ [Security] [SECURITY] Payload encrypted (06:14:25) {
  eventPattern: [32m'customer.pii.update'[39m,
  originalSize: [32m'441'[39m,
  encryptedSize: [32m'457'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 9: javascript:void(0)...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.206'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065527_x53ysi9t1o5n'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt complex nested objects
❌ [Security] [SECURITY] Payload decrypted (06:14:25) {
  keyVersion: [32m'key_1757798065536_ahd3nhbs'[39m,
  originalSize: [32m'441'[39m,
  compressed: [32m'false'[39m,
  decryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.207'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065527_kq2za3bnct8l'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt complex nested objects
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.208'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065527_ekgoaukehmsl'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should handle large payloads efficiently
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065539_5bo4dt16'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.209'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065527_fjnrs475vrte'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should handle large payloads efficiently
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.210'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065527_v38qmlz5sb7x'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should handle large payloads efficiently
❌ [Security] [SECURITY] Payload encrypted (06:14:25) {
  eventPattern: [32m'sensitive.large'[39m,
  originalSize: [32m'10083'[39m,
  encryptedSize: [32m'10099'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.211'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065527_9au9zdn39kih'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should handle large payloads efficiently
❌ [Security] [SECURITY] Payload decrypted (06:14:25) {
  keyVersion: [32m'key_1757798065539_5bo4dt16'[39m,
  originalSize: [32m'10083'[39m,
  compressed: [32m'false'[39m,
  decryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.212'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065527_21wtc63cbj4y'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 10: vbscript:msgbox("XSS")...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should handle large payloads efficiently
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.213'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065527_ofwi8aufmmds'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should apply compression when beneficial
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065547_0fml6hwj'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.214'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065527_gavboukekw0j'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should apply compression when beneficial
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.215'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065527_0g8i6dlvmwkl'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should apply compression when beneficial
❌ [Security] [SECURITY] Payload encrypted (06:14:25) {
  eventPattern: [32m'sensitive.compressible'[39m,
  originalSize: [32m'2674'[39m,
  encryptedSize: [32m'2690'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.216'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065527_xmcnd88c47kc'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should apply compression when beneficial
❌ [Security] [SECURITY] Payload decrypted (06:14:25) {
  keyVersion: [32m'key_1757798065547_0fml6hwj'[39m,
  originalSize: [32m'2674'[39m,
  compressed: [32m'false'[39m,
  decryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.217'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065527_r6b1ym7gi2mp'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should apply compression when beneficial
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.218'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065527_xpg1jwtn7yu6'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should maintain data integrity with special characters
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065549_kz114y0e'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.219'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065527_3eka0bykzodr'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should maintain data integrity with special characters
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.220'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065527_l3sdefho05t3'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should maintain data integrity with special characters
❌ [Security] [SECURITY] Payload encrypted (06:14:25) {
  eventPattern: [32m'auth.special'[39m,
  originalSize: [32m'217'[39m,
  encryptedSize: [32m'233'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.221'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065527_wrr8xthkk2hd'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 11: data:text/html,<script>alert("XSS")</script>...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should maintain data integrity with special characters
❌ [Security] [SECURITY] Payload decrypted (06:14:25) {
  keyVersion: [32m'key_1757798065549_kz114y0e'[39m,
  originalSize: [32m'217'[39m,
  compressed: [32m'false'[39m,
  decryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.222'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065527_38opoywbpdhz'[39m
}

 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Client ID Generation > should generate secure client ID using crypto.randomUUID 3ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Client ID Generation > should fallback to crypto.getRandomValues when randomUUID unavailable 1ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Client ID Generation > should throw error when no crypto available 2ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Storage Operations > should store and retrieve client ID with integrity protection 34ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Storage Operations > should store data in sessionStorage by default 1ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Secure Storage Operations > should use memory storage when configured 1ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should detect and reject tampered data 3ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should reject invalid data structure 2ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Integrity Validation > should work with integrity checks disabled 1ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should reject expired client data 2ms
stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should maintain data integrity with special characters
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.223'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065527_rdqpe3z94jn1'[39m
}

 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 1: <script>alert("XSS")</script>... 49ms
   → Cannot read properties of null (reading 'userInput')
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 2: <script type="text/javascript">alert("XSS")</scrip... 2ms
   → Cannot read properties of null (reading 'userInput')
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 3: <script>document.location="http://evil.com"</scrip... 2ms
   → Cannot read properties of null (reading 'userInput')
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 4: <img src="x" onerror="alert(\"XSS\")">... 2ms
   → Cannot read properties of null (reading 'userInput')
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 5: <div onclick="alert(\"XSS\")">Click me</div>... 3ms
   → Cannot read properties of null (reading 'userInput')
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 6: <input onfocus="alert(\"XSS\")" autofocus>... 2ms
   → Cannot read properties of null (reading 'userInput')
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 7: <body onload="alert(\"XSS\")">... 2ms
   → Cannot read properties of null (reading 'userInput')
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 8: javascript:alert("XSS")... 2ms
   → Cannot read properties of null (reading 'userInput')
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 9: javascript:void(0)... 3ms
   → Cannot read properties of null (reading 'userInput')
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 10: vbscript:msgbox("XSS")... 2ms
   → Cannot read properties of null (reading 'userInput')
stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should generate unique IVs for each encryption
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065552_9lp5n4jh'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.224'[39m,
  userId: [32m'user-123'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065527_okytudtfzer9'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 12: data:text/html;base64,PHNjcmlwdD5hbGVydCgiWFNTIik8...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should refuse to initialize without crypto support 43ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should never use Math.random() fallbacks 15ms
stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should generate unique IVs for each encryption
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should generate cryptographically secure UUIDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should generate unique IVs for each encryption
❌ [Security] [SECURITY] Payload encrypted (06:14:25) {
  eventPattern: [32m'payment.test'[39m,
  originalSize: [32m'15'[39m,
  encryptedSize: [32m'31'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique event IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:25) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should generate unique IVs for each encryption
❌ [Security] [SECURITY] Payload encrypted (06:14:25) {
  eventPattern: [32m'payment.test'[39m,
  originalSize: [32m'15'[39m,
  encryptedSize: [32m'31'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.200'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_mfghoebm3tx1'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should generate unique IVs for each encryption
❌ [Security] [SECURITY] Payload decrypted (06:14:25) {
  keyVersion: [32m'key_1757798065552_9lp5n4jh'[39m,
  originalSize: [32m'15'[39m,
  compressed: [32m'false'[39m,
  decryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 13: expression(alert("XSS"))...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.201'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_j8n4k73ty67z'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should generate unique IVs for each encryption
❌ [Security] [SECURITY] Payload decrypted (06:14:25) {
  keyVersion: [32m'key_1757798065552_9lp5n4jh'[39m,
  originalSize: [32m'15'[39m,
  compressed: [32m'false'[39m,
  decryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.202'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_rmndkm8g40ef'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should generate unique IVs for each encryption
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.203'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_o2vgmi8s1me8'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered data
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065555_h1ip3ejy'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.204'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_eajxmbl9zelv'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered data
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.205'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_zkbozsbeqmgy'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 14: style="expression(alert(\"XSS\"))"...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered data
❌ [Security] [SECURITY] Payload encrypted (06:14:25) {
  eventPattern: [32m'auth.test'[39m,
  originalSize: [32m'20'[39m,
  encryptedSize: [32m'36'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.206'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_xp2s2shq34b4'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered data
❌ [Security] [SECURITY] ANOMALY: Decryption failed (06:14:25) { keyVersion: [32m'key_1757798065555_h1ip3ejy'[39m, error: {} }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.207'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_5r9m2l6tse4z'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered data
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.208'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_x4ar9qc45q9v'[39m
}

 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with default configuration 49ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should initialize with custom passphrase 6ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Initialization and Configuration > should handle disabled encryption 3ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should correctly identify sensitive patterns 3ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should handle case-insensitive pattern matching 2ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Pattern Matching > should handle wildcard patterns correctly 2ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt simple payloads 6ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should encrypt and decrypt complex nested objects 4ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should handle large payloads efficiently 8ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should apply compression when beneficial 3ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Encryption and Decryption > should maintain data integrity with special characters 3ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should generate unique IVs for each encryption 3ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered data 6ms
stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.209'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_wwmjbob63rck'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered authentication tag
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065561_ebzgvbr5'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.210'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_vvkqto6x9emv'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered authentication tag
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.211'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_62g79esob1jw'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered authentication tag
❌ [Security] [SECURITY] Payload encrypted (06:14:25) {
  eventPattern: [32m'auth.test'[39m,
  originalSize: [32m'20'[39m,
  encryptedSize: [32m'36'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 15: <meta http-equiv="refresh" content="0;url=javascri...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.212'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_rsbslayccu4z'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered authentication tag
❌ [Security] [SECURITY] ANOMALY: Decryption failed (06:14:25) { keyVersion: [32m'key_1757798065561_ebzgvbr5'[39m, error: {} }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.213'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_tjimzdinj4km'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered authentication tag
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.214'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_41sj5ijed58r'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered IV
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065566_mtlbg5g1'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.215'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_c31kv2my2w5y'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered IV
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.216'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_54srjp7zciy3'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered IV
❌ [Security] [SECURITY] Payload encrypted (06:14:25) {
  eventPattern: [32m'auth.test'[39m,
  originalSize: [32m'20'[39m,
  encryptedSize: [32m'36'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.217'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_hpjzi446ekns'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered IV
❌ [Security] [SECURITY] ANOMALY: Decryption failed (06:14:25) { keyVersion: [32m'key_1757798065566_mtlbg5g1'[39m, error: {} }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.218'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_o3bcfk9ljsdx'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered IV
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 16: &#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.219'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_hdp7gscp6rez'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should reject encryption of non-sensitive patterns
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065569_f42d10un'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.220'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_gdqab0onjy7e'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should reject encryption of non-sensitive patterns
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.221'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_v9u6kqccz9hm'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should reject encryption of non-sensitive patterns
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.222'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_jpx449hxmycp'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Key Management > should track key version in encrypted payloads
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065571_3m3ub5nl'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.223'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_5xuhhk9yxfc8'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Key Management > should track key version in encrypted payloads
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.224'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_1brdo9mcdfsy'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Key Management > should track key version in encrypted payloads
❌ [Security] [SECURITY] Payload encrypted (06:14:25) {
  eventPattern: [32m'payment.test'[39m,
  originalSize: [32m'15'[39m,
  encryptedSize: [32m'31'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.225'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_cwm312btrm9e'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Key Management > should track key version in encrypted payloads
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.226'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_8ivv0w8to4qn'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Key Management > should handle key rotation gracefully
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065573_jtlgbb09'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 17: \u006A\u0061\u0076\u0061\u0073\u0063\u0072\u0069\u...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.227'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_q0pvvrj2bghi'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Key Management > should handle key rotation gracefully
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.228'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_5aylja8qf6oi'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Key Management > should handle key rotation gracefully
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.229'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_jfrngg6gu96l'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle malformed encrypted payloads
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065574_b5jaj9bf'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.230'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_hsgy03ef62to'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle malformed encrypted payloads
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.231'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_6cos18su4uh1'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle malformed encrypted payloads
❌ [Security] [SECURITY] ANOMALY: Decryption failed (06:14:25) { keyVersion: [32m'test-key'[39m, error: {} }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.232'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_jq1j3vfs4ij4'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle malformed encrypted payloads
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.233'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_6a8b683xqsmc'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle unsupported encryption algorithms
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065578_tnc6zm2u'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.234'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_iv83u0nh6q1m'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle unsupported encryption algorithms
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.235'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_n9sy693f789e'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle unsupported encryption algorithms
❌ [Security] [SECURITY] Payload encrypted (06:14:25) {
  eventPattern: [32m'payment.test'[39m,
  originalSize: [32m'15'[39m,
  encryptedSize: [32m'31'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 18: <svg onload="alert(\"XSS\")">...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.236'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_sro9ljqkv66f'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle unsupported encryption algorithms
❌ [Security] [SECURITY] ANOMALY: Decryption failed (06:14:25) { keyVersion: [32m'key_1757798065578_tnc6zm2u'[39m, error: {} }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.237'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_jkpm39dc1kdp'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle unsupported encryption algorithms
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.238'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_oy43m26qpoxt'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle encryption service not initialized
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065581_71z0sp6h'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.239'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_sun6hsouzkka'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle encryption service not initialized
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.240'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_80o3qr5drvlu'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle encryption service not initialized
❌ [Security] [SECURITY] ANOMALY: Encryption failed (06:14:25) { eventPattern: [32m'payment.test'[39m, error: {} }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.241'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_xybp70d83f1l'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle encryption service not initialized
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.242'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_pimx9e2ljxyw'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle encryption service not initialized
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.243'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_q6q6gqne8ots'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Utility Functions > should correctly identify encrypted payloads
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065584_j5if0xx8'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.244'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_a81pp2b4wwnf'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Utility Functions > should correctly identify encrypted payloads
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should execute fast handler successfully
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:25)

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 19: <svg><script>alert("XSS")</script></svg>...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.245'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_rk0du64bir4s'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Utility Functions > should correctly identify encrypted payloads
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should timeout slow handler after configured limit
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:25) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.246'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_gw23orfdttda'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Utility Functions > should provide accurate statistics
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065586_9hpz1v4h'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.247'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_qspijopgeu4p'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Utility Functions > should provide accurate statistics
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.248'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_x09amjruiydd'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Utility Functions > should provide accurate statistics
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.2.249'[39m,
  userId: [32m'user-456'[39m,
  eventPattern: [32m'user.action'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065542_iaopzohdnc7q'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should encrypt small payloads quickly
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065588_d06d75fz'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 20: {{constructor.constructor("alert(\"XSS\")")()}}...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
❌ [Security] [SECURITY] THREAT: User rate limit exceeded (06:14:25) { userId: [32m'user-456'[39m, count: [32m'51'[39m, limit: [32m'50'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should encrypt small payloads quickly
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should encrypt small payloads quickly
❌ [Security] [SECURITY] Payload encrypted (06:14:25) {
  eventPattern: [32m'payment.small'[39m,
  originalSize: [32m'22'[39m,
  encryptedSize: [32m'38'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should encrypt small payloads quickly
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 21: ${alert("XSS")}...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-789'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065564_9o05i2zt9rzl'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065590_kdlmdwqz'[39m,
  rotationInterval: [32m'3600000'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-789'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757798065564_pkacnmskk4pd'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-789'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757798065564_wxpfe12gkuel'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (06:14:25) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-789'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757798065564_db38rkvey8ec'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (06:14:25) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-789'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757798065564_ft18moojqbho'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (06:14:25) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-789'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'4'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757798065564_5oek8ffa85bz'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (06:14:25) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-789'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'3'[39m,
  suspicionScore: [32m'49'[39m,
  requestId: [32m'req_1757798065564_z0rqdbxr60ry'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (06:14:25) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-789'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'2'[39m,
  suspicionScore: [32m'51'[39m,
  requestId: [32m'req_1757798065564_tkxnt7nih62t'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 22: <iframe src="javascript:alert(\"XSS\")"></iframe>...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (06:14:25) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-789'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'1'[39m,
  suspicionScore: [32m'53'[39m,
  requestId: [32m'req_1757798065564_2ou8psj31ukg'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (06:14:25) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.107'[39m,
  userId: [32m'user-012'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'0'[39m,
  suspicionScore: [32m'55'[39m,
  requestId: [32m'req_1757798065564_6twub0vob0xy'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (06:14:25) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should allow requests within IP limits 38ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should block requests exceeding IP limits 9ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should reset limits after time window 8ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Basic Rate Limiting > should handle different IPs independently 6ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should allow requests within user limits 14ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should block requests exceeding user limits 23ms
stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (06:14:25) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] Payload encrypted (06:14:25) {
  eventPattern: [32m'payment.concurrent'[39m,
  originalSize: [32m'55'[39m,
  encryptedSize: [32m'71'[39m,
  compressionRatio: [32m'null'[39m,
  encryptionTimeMs: [32m'0.00'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to payment events
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to payment events
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.108'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065571_bhra1n5ld3sf'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should cleanup resources on destroy
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065597_zxt798z2'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 23: <iframe src="data:text/html,<script>alert(\"XSS\")...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to payment events
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.108'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757798065571_wb4b8xmh6yi2'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should cleanup resources on destroy
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to payment events
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.108'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757798065571_kokpaxnuzxx5'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should cleanup resources on destroy
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to payment events
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.108'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757798065571_94o6ncgjrw4l'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should cleanup resources on destroy
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to payment events
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.108'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757798065571_v1jbc07ofwy3'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should handle multiple destroy calls gracefully
❌ [Security] [SECURITY] EncryptionKeyManager initialized (06:14:25) {
  keyVersion: [32m'key_1757798065599_6xr0a824'[39m,
  rotationInterval: [32m'3600000'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to payment events
❌ [Security] [SECURITY] THREAT: Event pattern rate limit exceeded (06:14:25) { eventPattern: [32m'payment.process'[39m, count: [32m'6'[39m, limit: [32m'5'[39m }

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should handle multiple destroy calls gracefully
❌ [Security] [SECURITY] EncryptedEventStore initialized (06:14:25) { enabled: [32m'true'[39m, sensitivePatterns: [32m'4'[39m, compression: [32m'false'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to payment events
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should handle multiple destroy calls gracefully
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to auth events
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should handle multiple destroy calls gracefully
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:25)

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to auth events
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.109'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'auth.login'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065573_ltxztm9gvnkm'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 24: <object data="javascript:alert(\"XSS\")"></object>...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to auth events
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.109'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'auth.login'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757798065573_pqdu3pp5geic'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to auth events
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.109'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'auth.login'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757798065573_264bq33w3z56'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to auth events
❌ [Security] [SECURITY] THREAT: Event pattern rate limit exceeded (06:14:25) { eventPattern: [32m'auth.login'[39m, count: [32m'4'[39m, limit: [32m'3'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to auth events
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should use pattern matching for event limits
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered authentication tag 5ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should fail decryption with tampered IV 3ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Security Features > should reject encryption of non-sensitive patterns 2ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Key Management > should track key version in encrypted payloads 2ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Key Management > should handle key rotation gracefully 1ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle malformed encrypted payloads 4ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle unsupported encryption algorithms 3ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Error Handling > should handle encryption service not initialized 2ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Utility Functions > should correctly identify encrypted payloads 2ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Utility Functions > should provide accurate statistics 2ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should encrypt small payloads quickly 2ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Performance > should handle multiple concurrent encryptions 7ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should cleanup resources on destroy 2ms
 ✓ src/lib/events/__tests__/security/EncryptedEventStore.test.ts > EncryptedEventStore > Cleanup and Resource Management > should handle multiple destroy calls gracefully 1ms
stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should use pattern matching for event limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.110'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065575_723h5ro85gt3'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should use pattern matching for event limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.110'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.validate'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757798065575_fboyq5sod2hz'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 25: <embed src="javascript:alert(\"XSS\")">...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should use pattern matching for event limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.110'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.complete'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757798065575_bir2lvhkiv1z'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should use pattern matching for event limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.110'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.refund'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757798065575_vngghpqe00yz'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should use pattern matching for event limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.110'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.capture'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757798065575_dtxqhr9pv46n'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should use pattern matching for event limits
❌ [Security] [SECURITY] THREAT: Event pattern rate limit exceeded (06:14:25) { eventPattern: [32m'payment.cancel'[39m, count: [32m'6'[39m, limit: [32m'5'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should use pattern matching for event limits
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.111'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065585_yjz07t50l4yb'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.111'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757798065585_rwocx1fuu0fk'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.111'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757798065585_3xh76uwinhuw'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.111'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757798065585_mnxnyd96x0yo'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 26: <link rel="stylesheet" href="javascript:alert(\"XS...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.111'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'payment.process'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757798065585_yppnu1bo8bcu'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through
❌ [Security] [SECURITY] THREAT: Event pattern rate limit exceeded (06:14:25) { eventPattern: [32m'payment.process'[39m, count: [32m'6'[39m, limit: [32m'5'[39m }

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.111'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'inventory.update'[39m,
  remainingRequests: [32m'4'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757798065585_cxrvo8iisd6q'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'999'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065589_5ntfwciocvbq'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 27: <form action="javascript:alert(\"XSS\")"><input ty...
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'1000'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'998'[39m,
  suspicionScore: [32m'19'[39m,
  requestId: [32m'req_1757798065639_5irtvzol1et9'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'997'[39m,
  suspicionScore: [32m'21'[39m,
  requestId: [32m'req_1757798065689_3qk9qctgt028'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'996'[39m,
  suspicionScore: [32m'23'[39m,
  requestId: [32m'req_1757798065739_a499aregfipy'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'995'[39m,
  suspicionScore: [32m'25'[39m,
  requestId: [32m'req_1757798065789_yjctv22rt532'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'994'[39m,
  suspicionScore: [32m'27'[39m,
  requestId: [32m'req_1757798065839_uz7yldqo8143'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'993'[39m,
  suspicionScore: [32m'29'[39m,
  requestId: [32m'req_1757798065889_hlshny8nqwqh'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'992'[39m,
  suspicionScore: [32m'31'[39m,
  requestId: [32m'req_1757798065939_nshn087bv4q8'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'991'[39m,
  suspicionScore: [32m'33'[39m,
  requestId: [32m'req_1757798065989_qwx42fcgwgrz'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'990'[39m,
  suspicionScore: [32m'35'[39m,
  requestId: [32m'req_1757798066039_l6ke1hihsg24'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'989'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798066089_ro7a4fcd5w5l'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'988'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757798066139_o2h5boys8nnz'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'987'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757798066189_y6bhfo10qa3y'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'986'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757798066239_1to9cord7y5d'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should allow safe HTML-like content
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'985'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757798066289_uz1gck66ozs7'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'984'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757798066339_h3kbxzpyw0vl'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'983'[39m,
  suspicionScore: [32m'49'[39m,
  requestId: [32m'req_1757798066389_apjtzyjlbpxx'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'982'[39m,
  suspicionScore: [32m'51'[39m,
  requestId: [32m'req_1757798066439_64ztmiq2oh8v'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'981'[39m,
  suspicionScore: [32m'53'[39m,
  requestId: [32m'req_1757798066489_bgmvljq5gj35'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'980'[39m,
  suspicionScore: [32m'55'[39m,
  requestId: [32m'req_1757798066539_ap3zn10ipi7u'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'979'[39m,
  suspicionScore: [32m'57'[39m,
  requestId: [32m'req_1757798066589_vwgvm1l5086k'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'978'[39m,
  suspicionScore: [32m'59'[39m,
  requestId: [32m'req_1757798066639_bnm1aby9a03x'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'977'[39m,
  suspicionScore: [32m'61'[39m,
  requestId: [32m'req_1757798066689_5hio3h8faous'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'976'[39m,
  suspicionScore: [32m'63'[39m,
  requestId: [32m'req_1757798066739_dltr5amb5cue'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'975'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798066789_icl744puvao1'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'974'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798066839_m6ao3kkqw6yw'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'973'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798066889_atmahgu6a84p'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'972'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798066939_6eb069tsle2e'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'971'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798066989_8kpjyfikdqtv'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:27) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'970'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798067039_3mr4qropcm54'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
ℹ️ [Security] Request rate limit check passed (06:14:27) {
  ip: [32m'192.168.1.112'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'969'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798067089_a60p933fbrjr'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:27)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:27)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065602_2xs8m3gdhfcb'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757798065702_ucet9xr95x58'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757798065802_mlynp570t2te'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757798065902_7mvf4c6ozymf'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757798066002_3tqub9x3fumn'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'4'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757798066102_6cntvouj2gwv'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'3'[39m,
  suspicionScore: [32m'49'[39m,
  requestId: [32m'req_1757798066202_pmtqjucsqrr0'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'2'[39m,
  suspicionScore: [32m'51'[39m,
  requestId: [32m'req_1757798066302_0i9gi4w5cof1'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'1'[39m,
  suspicionScore: [32m'53'[39m,
  requestId: [32m'req_1757798066402_2q8mopskelem'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.113'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'0'[39m,
  suspicionScore: [32m'55'[39m,
  requestId: [32m'req_1757798066502_t5hk3h03bcvm'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:26) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:26) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:26) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:26) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:27) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:27) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:27) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:27) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:27) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:27) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:27) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:27) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:27) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:27) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:28) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:28) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:28) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:28) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:28) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:28) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:28) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:28) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:28) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:28) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:29) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:29) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:29) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:29) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:29) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:29) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:29) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 1: 1' UNION SELECT * FROM users--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:29) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:29) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:29) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:30) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:30) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:30) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:30) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:30) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:30) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:30) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:30) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:30) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:30) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:31) { ip: [32m'192.168.1.113'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:31)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'999'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065616_aq25aau930p5'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 2: ' OR 1=1--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'1000'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'998'[39m,
  suspicionScore: [32m'19'[39m,
  requestId: [32m'req_1757798065666_moxpik184c19'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'997'[39m,
  suspicionScore: [32m'21'[39m,
  requestId: [32m'req_1757798065716_rdpc7cvbkm44'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'996'[39m,
  suspicionScore: [32m'23'[39m,
  requestId: [32m'req_1757798065766_eogf0o1ups3h'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'995'[39m,
  suspicionScore: [32m'25'[39m,
  requestId: [32m'req_1757798065816_709as8faed82'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'994'[39m,
  suspicionScore: [32m'27'[39m,
  requestId: [32m'req_1757798065866_g8tswwtd9w2f'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'993'[39m,
  suspicionScore: [32m'29'[39m,
  requestId: [32m'req_1757798065916_fimpuxxr7zao'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'992'[39m,
  suspicionScore: [32m'31'[39m,
  requestId: [32m'req_1757798065966_9k6xf36c66eg'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'991'[39m,
  suspicionScore: [32m'33'[39m,
  requestId: [32m'req_1757798066016_iykq5xl5eocf'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'990'[39m,
  suspicionScore: [32m'35'[39m,
  requestId: [32m'req_1757798066066_vft2ftcqld0j'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'989'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798066116_h65uaechtdlx'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'988'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757798066166_ew8w8rvduc9d'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'987'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757798066216_3b0eut0bkyr9'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'986'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757798066266_vjtljwpp10qr'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'985'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757798066316_2cobec2m4phb'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'984'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757798066366_n55jdo6r5n0v'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'983'[39m,
  suspicionScore: [32m'49'[39m,
  requestId: [32m'req_1757798066416_hirjp1oq7rzl'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'982'[39m,
  suspicionScore: [32m'51'[39m,
  requestId: [32m'req_1757798066466_lpnrm1vonm0t'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'981'[39m,
  suspicionScore: [32m'53'[39m,
  requestId: [32m'req_1757798066516_y2cjhm95z01o'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'980'[39m,
  suspicionScore: [32m'55'[39m,
  requestId: [32m'req_1757798066566_twp0n8te83bj'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'979'[39m,
  suspicionScore: [32m'57'[39m,
  requestId: [32m'req_1757798066616_s4zvnkqvy9at'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'978'[39m,
  suspicionScore: [32m'59'[39m,
  requestId: [32m'req_1757798066666_5en56suh2ozo'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'977'[39m,
  suspicionScore: [32m'61'[39m,
  requestId: [32m'req_1757798066716_ml4zttryekmv'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 3: admin'--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'976'[39m,
  suspicionScore: [32m'63'[39m,
  requestId: [32m'req_1757798066766_75joofrae13i'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'975'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798066816_sfycbevfnqfk'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'974'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798066866_911ljr24qn6s'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'973'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798066916_nz2f28hoe3tg'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'972'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798066966_x6xld08dl78p'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:27) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'971'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798067016_vz7r906junen'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:27) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'970'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798067066_y2ez8eit76km'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:27) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'969'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798067116_qpsvcjxhg7gl'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:27) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'968'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798067166_v3a23exneutk'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:27) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'967'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798067216_0dj8l2a1zjw5'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:27) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'966'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798067266_no4ewmwnhq2v'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:27) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'965'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798067316_r0v5tmxw9lrd'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:27) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'964'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798067366_566h4gjobujc'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:27) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'963'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798067416_p524tz5xyrrs'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:27) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'962'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798067466_lczc1jbjadl4'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:27) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'961'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798067516_uycdxdu2v4a5'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:27) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'960'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798067566_loen7lsbw8sb'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:27) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'959'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798067616_fpw2q1dfum5i'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:27) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'958'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798067666_hjsl9oip9f4h'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:27) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'957'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798067716_8ou09r6aba5l'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:27) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'956'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798067766_3ezaysl2f4f5'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 4: ' OR 'a'='a
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:27) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'955'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798067816_xrpp51otgufr'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:27) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'954'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798067866_4rwp8u2bv7np'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:27) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'953'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798067916_o8khe9ty1bm1'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:27) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'952'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798067966_74kyx403eui9'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:28) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'951'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798068016_pdytu6c2ivdq'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] ATTACK: DDoS pattern detected (06:14:28) {
  ip: [32m'192.168.1.114'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  requestCount: [32m'50'[39m,
  suspicionScore: [32m'65'[39m,
  attackPattern: {
    rapid_fire: [32m'50'[39m,
    pattern_repetition: [32m'0'[39m,
    burst_spikes: [32m'1'[39m,
    geographic_anomaly: [32m'0'[39m
  },
  threshold: [32m'50'[39m
}
❌ [Security] [SECURITY] ATTACK: DDoS attack detected and IP blocked (06:14:28) {
  ip: [32m'192.168.1.114'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798068066_pp6mk3zqsr57'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] THREAT: Request from blocked IP attempted (06:14:28) {
  ip: [32m'192.168.1.114'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  requestId: [32m'req_1757798068116_doxebl71bbn8'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] THREAT: Request from blocked IP attempted (06:14:28) {
  ip: [32m'192.168.1.114'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  requestId: [32m'req_1757798068166_dcmo3jpsftia'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] THREAT: Request from blocked IP attempted (06:14:28) {
  ip: [32m'192.168.1.114'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  requestId: [32m'req_1757798068216_f97i693tdn1k'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] THREAT: Request from blocked IP attempted (06:14:28) {
  ip: [32m'192.168.1.114'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  requestId: [32m'req_1757798068266_imetuqc3zqtc'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] THREAT: Request from blocked IP attempted (06:14:28) {
  ip: [32m'192.168.1.114'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  requestId: [32m'req_1757798068316_56n1klm6bi14'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] THREAT: Request from blocked IP attempted (06:14:28) {
  ip: [32m'192.168.1.114'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  requestId: [32m'req_1757798068366_spsov5ouw28q'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
ℹ️ [Security] Request rate limit check passed (06:14:34) {
  ip: [32m'192.168.1.114'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'ddos.attack'[39m,
  remainingRequests: [32m'999'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798074366_i2jq0ypasesk'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] IP automatically unblocked after duration expired (06:14:34) { ip: [32m'192.168.1.114'[39m, blockDuration: [32m'5000'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:34)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:34)

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 5: 1' AND 1=1--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect suspicious user agents
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect suspicious user agents
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.115'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'62'[39m,
  requestId: [32m'req_1757798065638_k6pb91n4bqmw'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect suspicious user agents
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should handle geographic anomalies when enabled
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should handle geographic anomalies when enabled
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.116'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'42'[39m,
  requestId: [32m'req_1757798065639_jh64uozk83ne'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should handle geographic anomalies when enabled
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should handle geographic anomalies when enabled
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should handle geographic anomalies when enabled
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP blocking
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP blocking
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.117'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065640_8jk6qvdwzj83'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP blocking
❌ [Security] [SECURITY] IP manually blocked (06:14:25) {
  ip: [32m'192.168.1.117'[39m,
  reason: [32m'Manual block for testing'[39m,
  durationMs: [32m'undefined'[39m
}
❌ [Security] [SECURITY] THREAT: Request from blocked IP attempted (06:14:25) {
  ip: [32m'192.168.1.117'[39m,
  eventPattern: [32m'test.event'[39m,
  requestId: [32m'req_1757798065640_6keuv9yqi15r'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP blocking
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP unblocking
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 11: data:text/html,<script>alert("XSS")</script>... 2ms
   → Cannot read properties of null (reading 'userInput')
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 12: data:text/html;base64,PHNjcmlwdD5hbGVydCgiWFNTIik8... 2ms
   → Cannot read properties of null (reading 'userInput')
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 13: expression(alert("XSS"))... 2ms
   → Cannot read properties of null (reading 'userInput')
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 14: style="expression(alert(\"XSS\"))"... 2ms
   → Cannot read properties of null (reading 'userInput')
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 15: <meta http-equiv="refresh" content="0;url=javascri... 2ms
   → Cannot read properties of null (reading 'userInput')
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 16: &#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112... 2ms
   → Cannot read properties of null (reading 'userInput')
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 17: \u006A\u0061\u0076\u0061\u0073\u0063\u0072\u0069\u... 2ms
   → Cannot read properties of null (reading 'userInput')
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 18: <svg onload="alert(\"XSS\")">... 2ms
   → Cannot read properties of null (reading 'userInput')
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 19: <svg><script>alert("XSS")</script></svg>... 2ms
   → Cannot read properties of null (reading 'userInput')
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 20: {{constructor.constructor("alert(\"XSS\")")()}}... 2ms
   → Cannot read properties of null (reading 'userInput')
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 21: ${alert("XSS")}... 2ms
   → Cannot read properties of null (reading 'userInput')
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 22: <iframe src="javascript:alert(\"XSS\")"></iframe>... 2ms
   → Cannot read properties of null (reading 'userInput')
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 23: <iframe src="data:text/html,<script>alert(\"XSS\")... 2ms
   → Cannot read properties of null (reading 'userInput')
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 24: <object data="javascript:alert(\"XSS\")"></object>... 2ms
   → Cannot read properties of null (reading 'userInput')
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 25: <embed src="javascript:alert(\"XSS\")">... 2ms
   → Cannot read properties of null (reading 'userInput')
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 26: <link rel="stylesheet" href="javascript:alert(\"XS... 2ms
   → Cannot read properties of null (reading 'userInput')
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 27: <form action="javascript:alert(\"XSS\")"><input ty... 1ms
   → Cannot read properties of null (reading 'userInput')
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should allow safe HTML-like content 6ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 1: 1' UNION SELECT * FROM users-- 2ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 2: ' OR 1=1-- 2ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 3: admin'-- 2ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 4: ' OR 'a'='a 2ms
   → expected false to be true // Object.is equality
stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP unblocking
❌ [Security] [SECURITY] IP manually blocked (06:14:25) { ip: [32m'192.168.1.118'[39m, reason: [32m'Test block'[39m, durationMs: [32m'undefined'[39m }
❌ [Security] [SECURITY] THREAT: Request from blocked IP attempted (06:14:25) {
  ip: [32m'192.168.1.118'[39m,
  eventPattern: [32m'test.event'[39m,
  requestId: [32m'req_1757798065642_h3ie2l4nol51'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP unblocking
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.118'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065642_2dnerl2baj6n'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP unblocking
❌ [Security] [SECURITY] IP manually unblocked (06:14:25) { ip: [32m'192.168.1.118'[39m, reason: [32m'Test unblock'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP unblocking
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.119'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065643_2j1m67dzii2f'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 6: 1' AND 1=2--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.119'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757798065643_xgfk3ufnin4a'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.119'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757798065643_luqcebjrevxa'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.119'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757798065643_xksbt63p2196'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.119'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757798065643_jcdzqhqyef9c'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.120'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065643_4k2wicu3hkv9'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.120'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757798065643_vgsmgugefiaz'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.120'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757798065643_6jizo7pu7s7c'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.120'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757798065643_lqb3ribe2rwa'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.120'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757798065643_nxl422ytdko7'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.121'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065643_7i6prmli9wa0'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.121'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757798065643_og4mt4dfdye1'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 7: 1'; WAITFOR DELAY '00:00:05'--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.121'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757798065643_ijmz8o1jlyul'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.121'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757798065643_erew1gzpbkrs'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.121'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757798065643_tnlf2qya2x6a'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track blocked IPs in statistics
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track blocked IPs in statistics
❌ [Security] [SECURITY] IP manually blocked (06:14:25) {
  ip: [32m'192.168.1.122'[39m,
  reason: [32m'Test blocking stats'[39m,
  durationMs: [32m'undefined'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track blocked IPs in statistics
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065651_u0mtp0t4m3ia'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'8'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757798065701_s8bxwqrbxr0n'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'7'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757798065751_67ir573h64d7'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'6'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757798065801_11nbmk2id0gr'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'5'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757798065851_orjdrleefelf'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'4'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757798065901_11h569sfs76k'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'3'[39m,
  suspicionScore: [32m'49'[39m,
  requestId: [32m'req_1757798065951_jkf6rxeigyf7'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'2'[39m,
  suspicionScore: [32m'51'[39m,
  requestId: [32m'req_1757798066001_egwvz2c7sbyp'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'1'[39m,
  suspicionScore: [32m'53'[39m,
  requestId: [32m'req_1757798066051_6zeroiw3cvii'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
ℹ️ [Security] Request rate limit check passed (06:14:26) {
  ip: [32m'192.168.1.123'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'0'[39m,
  suspicionScore: [32m'55'[39m,
  requestId: [32m'req_1757798066101_fg17zb2any7r'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:26) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:26) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:26) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:26) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:26) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:26) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:26) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:26) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:26) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] THREAT: IP rate limit exceeded (06:14:26) { ip: [32m'192.168.1.123'[39m, count: [32m'11'[39m, limit: [32m'10'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 8: 1' AND (SELECT COUNT(*) FROM sysobjects)>0--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:26)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Memory Management and Cleanup > should cleanup expired records
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Memory Management and Cleanup > should cleanup expired records
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.124'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065659_mpp2wftaw14w'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Memory Management and Cleanup > should cleanup expired records
ℹ️ [Security] Rate limiter cleanup completed (06:14:35) {
  globalRecords: [32m'1'[39m,
  ipRecords: [32m'1'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'1'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'1'[39m
}
ℹ️ [Security] Rate limiter cleanup completed (06:14:45) {
  globalRecords: [32m'1'[39m,
  ipRecords: [32m'1'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'1'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'1'[39m
}
ℹ️ [Security] Rate limiter cleanup completed (06:14:55) {
  globalRecords: [32m'1'[39m,
  ipRecords: [32m'1'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'1'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'1'[39m
}
ℹ️ [Security] Rate limiter cleanup completed (06:15:05) {
  globalRecords: [32m'0'[39m,
  ipRecords: [32m'0'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'0'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'0'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Memory Management and Cleanup > should cleanup expired records
❌ [Security] [SECURITY] RateLimiter destroyed (06:15:10)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Memory Management and Cleanup > should handle cleanup gracefully
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 9: 1' UNION SELECT username, password FROM users--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Memory Management and Cleanup > should handle cleanup gracefully
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Memory Management and Cleanup > should handle cleanup gracefully
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should handle malformed input gracefully
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should handle malformed input gracefully
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m''[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m''[39m,
  remainingRequests: [32m'9'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065665_hlveg6m5g6ar'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should handle malformed input gracefully
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should fail-safe on internal errors
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should fail-safe on internal errors
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.125'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065666_sp8agrhxkoe9'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should fail-safe on internal errors
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should fail-safe on internal errors
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should fail-safe on internal errors
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should work with minimal configuration
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should work with minimal configuration
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.126'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065668_34pkg0hf9cwk'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should work with minimal configuration
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should work with minimal configuration
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should work with minimal configuration
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should respect custom event pattern limits
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > User-based Rate Limiting > should handle different users independently 6ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to payment events 2ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should apply specific limits to auth events 2ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should use pattern matching for event limits 9ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Event Pattern Limiting > should allow non-matching patterns through 4ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect rapid fire attacks 13ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should block IP when DDoS threshold is reached 14ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should unblock IP after block duration 22ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should detect suspicious user agents 1ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > DDoS Detection and Protection > should handle geographic anomalies when enabled 1ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP blocking 2ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Manual IP Management > should allow manual IP unblocking 1ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should provide accurate statistics 6ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track blocked IPs in statistics 1ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Statistics and Monitoring > should track suspicious activity 8ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Memory Management and Cleanup > should cleanup expired records 2ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Memory Management and Cleanup > should handle cleanup gracefully 3ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should handle malformed input gracefully 2ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Error Handling > should fail-safe on internal errors 2ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should work with minimal configuration 2ms
stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 10: 1' UNION SELECT NULL, @@version--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should respect custom event pattern limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.127'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'custom.event.test'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798065670_xbgk6elvq52p'[39m
}

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should execute fast handler successfully 141ms
stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should respect custom event pattern limits
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should respect custom event pattern limits
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.127'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'custom.event.another'[39m,
  remainingRequests: [32m'98'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757798065670_tm4xzhb7p92s'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should respect custom event pattern limits
❌ [Security] [SECURITY] THREAT: Event pattern rate limit exceeded (06:14:25) { eventPattern: [32m'custom.event.final'[39m, count: [32m'3'[39m, limit: [32m'2'[39m }

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should respect custom event pattern limits
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should respect custom event pattern limits
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should disable features when configured
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'1000'[39m,
  ipLimit: [32m'10'[39m,
  ddosProtection: [32m'50'[39m,
  adaptiveLimiting: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should disable features when configured
ℹ️ [Security] Request rate limit check passed (06:14:25) {
  ip: [32m'192.168.1.128'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'test.event'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'0'[39m,
  requestId: [32m'req_1757798065674_lvjamhvai4ax'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should disable features when configured
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'false'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 11: '; EXEC xp_cmdshell('dir')--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should disable features when configured
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should disable features when configured
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:25)

 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should respect custom event pattern limits 4ms
 ✓ src/lib/events/__tests__/security/RateLimiter.test.ts > RateLimiter > Configuration Flexibility > should disable features when configured 2ms
stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 12: '; EXEC sp_configure--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 13: 1'; DROP TABLE users--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 14: '; TRUNCATE TABLE logs--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 15: '; DELETE FROM users WHERE 1=1--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 16: 1' AND ASCII(SUBSTRING((SELECT TOP 1 name FROM sysobjects),1,1))>64--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 17: 1'; BENCHMARK(5000000,MD5(1))--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 18: 1' AND (SELECT pg_sleep(5))--
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 19: '; db.users.drop(); //
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 20: $ne: null
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 21: '; return true; //
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 22: )(|(objectClass=*))
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 23: *)(uid=*))(|(uid=*
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should allow safe query-like content
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > HTML Sanitization Tests > should remove HTML tags from user content
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > HTML Sanitization Tests > should handle HTML entities
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 1: javascript:alert("XSS")
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 2: vbscript:msgbox("Attack")
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 5: 1' AND 1=1-- 6ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 6: 1' AND 1=2-- 2ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 7: 1'; WAITFOR DELAY '00:00:05'-- 3ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 8: 1' AND (SELECT COUNT(*) FROM sysobjects)>0-- 3ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 9: 1' UNION SELECT username, password FROM users-- 3ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 10: 1' UNION SELECT NULL, @@version-- 3ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 11: '; EXEC xp_cmdshell('dir')-- 2ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 12: '; EXEC sp_configure-- 2ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 13: 1'; DROP TABLE users-- 2ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 14: '; TRUNCATE TABLE logs-- 2ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 15: '; DELETE FROM users WHERE 1=1-- 1ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 16: 1' AND ASCII(SUBSTRING((SELECT TOP 1 name FROM sysobjects),1,1))>64-- 1ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 17: 1'; BENCHMARK(5000000,MD5(1))-- 2ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 18: 1' AND (SELECT pg_sleep(5))-- 2ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 19: '; db.users.drop(); // 2ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 20: $ne: null 2ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 21: '; return true; // 2ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 22: )(|(objectClass=*)) 2ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 23: *)(uid=*))(|(uid=* 2ms
   → expected false to be true // Object.is equality
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should allow safe query-like content 3ms
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > HTML Sanitization Tests > should remove HTML tags from user content 3ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > HTML Sanitization Tests > should handle HTML entities 3ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 1: javascript:alert("XSS") 3ms
   → expected false to be true // Object.is equality
stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 3: data:text/html,<script>alert("XSS")</script>
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 4: file:///etc/passwd
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 5: ftp://malicious-site.com/payload.exe
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should allow safe protocols
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Size and Structure Limits > should truncate oversized strings
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Size and Structure Limits > should handle deeply nested objects
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Size and Structure Limits > should truncate oversized arrays
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Cryptographic Security > should generate cryptographically secure UUIDs 58ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique event IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:25)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique subscription IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:25) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Complex Payload Tests > should handle realistic G-Admin business payloads
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Complex Payload Tests > should handle malicious business payload
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Performance Tests > should validate large payloads efficiently
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Performance Tests > should have quick validation for hot paths
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Performance Tests > should detect malicious content in quick validation
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Configuration Tests > should disable specific protection when configured
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts
ℹ️ [Security] New CSP nonce generated (06:14:25) { noncePrefix: [32m'6t13uabw'[39m, timestamp: [32m'1757798065853'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:14:25)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/__tests__/security/AdvancedSecurity.test.ts
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:25) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:25) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:25) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:25) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Configuration Tests > should respect custom size limits
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 2: vbscript:msgbox("Attack") 4ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 3: data:text/html,<script>alert("XSS")</script> 2ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 4: file:///etc/passwd 2ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 5: ftp://malicious-site.com/payload.exe 2ms
   → expected false to be true // Object.is equality
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should allow safe protocols 2ms
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Size and Structure Limits > should truncate oversized strings 2ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Size and Structure Limits > should handle deeply nested objects 2ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Size and Structure Limits > should truncate oversized arrays 11ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Complex Payload Tests > should handle realistic G-Admin business payloads 4ms
   → expected false to be true // Object.is equality
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Complex Payload Tests > should handle malicious business payload 3ms
   → expected false to be true // Object.is equality
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Performance Tests > should validate large payloads efficiently 42ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Performance Tests > should have quick validation for hot paths 1ms
 ✓ src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Performance Tests > should detect malicious content in quick validation 0ms
 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Configuration Tests > should disable specific protection when configured 4ms
   → expected [ { type: 'xss', …(5) } ] to have a length of +0 but got 1
stderr | src/lib/events/__tests__/security/AdvancedSecurity.test.ts
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:25) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'6a0a24c1...'[39m }

stderr | src/lib/events/__tests__/security/AdvancedSecurity.test.ts
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:14:25) { reason: [32m'No valid existing ID found'[39m, newId: [32m'6a0a24c1...'[39m }

 × src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Configuration Tests > should respect custom size limits 5ms
   → expected false to be true // Object.is equality
stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should prevent prototype pollution via '__proto__'
ℹ️ [Security] New CSP nonce generated (06:14:25) { noncePrefix: [32m'1b3fcnuo'[39m, timestamp: [32m'1757798065870'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:14:25)
ℹ️ [Security] Encryption disabled - skipping initialization (06:14:25)

stderr | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should prevent prototype pollution via '__proto__'
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:25) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:25) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should prevent prototype pollution via '__proto__'
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:14:25) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should prevent prototype pollution via '__proto__'
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should prevent prototype pollution via '__proto__'
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should prevent prototype pollution via 'constructor'
ℹ️ [Security] New CSP nonce generated (06:14:25) { noncePrefix: [32m'hwx2b9nu'[39m, timestamp: [32m'1757798065881'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:14:25)
ℹ️ [Security] Encryption disabled - skipping initialization (06:14:25)

stderr | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should prevent prototype pollution via 'constructor'
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:25) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:25) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:25) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should prevent prototype pollution via 'constructor'
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:14:25) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should prevent prototype pollution via 'constructor'
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should prevent prototype pollution via 'constructor'
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should prevent prototype pollution via 'prototype'
ℹ️ [Security] New CSP nonce generated (06:14:25) { noncePrefix: [32m'265h5xkk'[39m, timestamp: [32m'1757798065886'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:14:25)
ℹ️ [Security] Encryption disabled - skipping initialization (06:14:25)

stderr | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should prevent prototype pollution via 'prototype'
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:25) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:25) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:25) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should prevent prototype pollution via 'prototype'
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:14:25) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should prevent prototype pollution via 'prototype'
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should prevent prototype pollution via 'prototype'
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should reject payloads larger than the configured limit
ℹ️ [Security] New CSP nonce generated (06:14:25) { noncePrefix: [32m'p68d307h'[39m, timestamp: [32m'1757798065890'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:14:25)
ℹ️ [Security] Encryption disabled - skipping initialization (06:14:25)

stderr | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should reject payloads larger than the configured limit
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:25) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:25) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:25) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should reject payloads larger than the configured limit
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:14:25) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should reject payloads larger than the configured limit
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should reject payloads larger than the configured limit
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should reject payloads with excessive object nesting
ℹ️ [Security] New CSP nonce generated (06:14:25) { noncePrefix: [32m'2javf1hr'[39m, timestamp: [32m'1757798065893'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:14:25)
ℹ️ [Security] Encryption disabled - skipping initialization (06:14:25)

stderr | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should reject payloads with excessive object nesting
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:25) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:25) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:25) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should reject payloads with excessive object nesting
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:14:25) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should reject payloads with excessive object nesting
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should reject payloads with excessive object nesting
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should reject payloads with excessive object nesting
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should reject payloads with excessive object nesting
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should reject payloads with excessive object nesting
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should reject payloads with excessive object nesting
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should reject payloads with excessive object nesting
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should prevent a module from emitting an event as another module
ℹ️ [Security] New CSP nonce generated (06:14:25) { noncePrefix: [32m'tj0410u0'[39m, timestamp: [32m'1757798065910'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:14:25)
ℹ️ [Security] Encryption disabled - skipping initialization (06:14:25)

stderr | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should prevent a module from emitting an event as another module
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:25) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:25) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:25) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should prevent a module from emitting an event as another module
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:14:25) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should prevent a module from emitting an event as another module
[EventBus] Adding subscription to weak subscription manager for pattern: test.security.spoofing
[EventBus] Subscription added: test.security.spoofing (sub_1757798065912_ym64xkyei) [moduleId: anonymous]

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should prevent a module from emitting an event as another module
[ModuleRegistry] Activation order calculated: [ [32m'attacker_module'[39m ]
[ModuleRegistry] Module 'attacker_module' registered successfully

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should prevent a module from emitting an event as another module
[ModuleRegistry] Activating module 'attacker_module'...

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should prevent a module from emitting an event as another module
[ModuleRegistry] Directly activating module 'attacker_module'...

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should prevent a module from emitting an event as another module
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should prevent a module from emitting an event as another module
[EventBus] Processing event test.security.spoofing: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should prevent a module from emitting an event as another module
[ModuleRegistry] Registering 0 subscriptions for module 'attacker_module'

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should prevent a module from emitting an event as another module
[ModuleRegistry] Module 'attacker_module' activated directly
[EventBus] Module activated: attacker_module
[EventBus] Auto-registering handlers for module: attacker_module
[EventBus] Auto-registered 0/0 handlers for module: attacker_module

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should prevent a module from emitting an event as another module
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should prevent a module from emitting an event as another module
ℹ️ [EventBus] Module registered (06:14:25) {
  moduleId: [32m'attacker_module'[39m,
  subscriptionCount: [32m'0'[39m,
  moduleName: [32m'Attacker Module'[39m
}

 ✓ src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should prevent prototype pollution via '__proto__' 11ms
 ✓ src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should prevent prototype pollution via 'constructor' 5ms
 ✓ src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should prevent prototype pollution via 'prototype' 4ms
 ✓ src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should reject payloads larger than the configured limit 4ms
 × src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should reject payloads with excessive object nesting 14ms
   → expected true to be false // Object.is equality
stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should prevent a module from emitting an event as another module
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should prevent a module from emitting an event as another module
[ModuleRegistry] Deactivating module 'attacker_module'...
[ModuleRegistry] Unregistered all subscriptions for module 'attacker_module'

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should prevent a module from emitting an event as another module
[ModuleRegistry] Module 'attacker_module' deactivated successfully
[EventBus] Module deactivated: attacker_module

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should prevent a module from emitting an event as another module
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should prevent a module from emitting an event as another module
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should not leak sensitive data in global error logs
ℹ️ [Security] New CSP nonce generated (06:14:25) { noncePrefix: [32m'lo2cazc3'[39m, timestamp: [32m'1757798065981'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:14:25)
ℹ️ [Security] Encryption disabled - skipping initialization (06:14:25)

stderr | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should not leak sensitive data in global error logs
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:25) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:14:25) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:25) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:25) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:25) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should not leak sensitive data in global error logs
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:14:25) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should not leak sensitive data in global error logs
[EventBus] Adding subscription to weak subscription manager for pattern: test.security.data_leak
[EventBus] Subscription added: test.security.data_leak (sub_1757798065982_5cb61yi98) [moduleId: anonymous]

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should not leak sensitive data in global error logs
[EventBus] Adding subscription to weak subscription manager for pattern: global.eventbus.handler-error
[EventBus] Subscription added: global.eventbus.handler-error (sub_1757798065983_u1zglyzos) [moduleId: anonymous]

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should not leak sensitive data in global error logs
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should not leak sensitive data in global error logs
[EventBus] Processing event test.security.data_leak: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should not leak sensitive data in global error logs
[EventBus] Processing event global.eventbus.handler-error: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should not leak sensitive data in global error logs
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should not leak sensitive data in global error logs
[EventBus] Graceful shutdown completed

 ✓ src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should prevent a module from emitting an event as another module 71ms
 ✓ src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > Module Authorization & Data Leakage > should not leak sensitive data in global error logs 64ms
stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should rotate client ID when rotation interval exceeded
❌ [Security] [SECURITY] ANOMALY: Client ID rotation needed - clearing for automatic rotation (06:14:26)
❌ [Security] [SECURITY] ANOMALY: Client data cleared (06:14:26)

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should rotate client ID when rotation interval exceeded
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:26) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'deaa2673...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should rotate client ID when rotation interval exceeded
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:14:26) { reason: [32m'No valid existing ID found'[39m, newId: [32m'deaa2673...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should force rotation when requested
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:26) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'd699d3dc...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should force rotation when requested
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:14:26) { reason: [32m'No valid existing ID found'[39m, newId: [32m'd699d3dc...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should force rotation when requested
❌ [Security] [SECURITY] ANOMALY: Client data cleared (06:14:26)

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should force rotation when requested
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:26) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'83a563f7...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should force rotation when requested
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:14:26) { reason: [32m'No valid existing ID found'[39m, newId: [32m'83a563f7...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Legacy Migration > should detect and migrate legacy localStorage data
❌ [Security] [SECURITY] ANOMALY: Legacy localStorage client ID found during migration (06:14:26) { legacyPrefix: [32m'legacy-c...'[39m }
❌ [Security] [SECURITY] ANOMALY: Legacy localStorage cleared (06:14:26)

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Security Status Monitoring > should provide accurate security status
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:26) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'eeb64455...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Security Status Monitoring > should provide accurate security status
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:14:26) { reason: [32m'No valid existing ID found'[39m, newId: [32m'eeb64455...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Security Status Monitoring > should indicate when rotation is needed
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:26) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'b6a75f16...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Security Status Monitoring > should indicate when rotation is needed
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:14:26) { reason: [32m'No valid existing ID found'[39m, newId: [32m'b6a75f16...'[39m }

stdout | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Security Status Monitoring > should indicate when rotation is needed
Client ID created: success
Data stored: yes
Initial timestamp: [33m1757798066133[39m

 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should rotate client ID when rotation interval exceeded 619ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Expiration and Rotation > should force rotation when requested 2ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Legacy Migration > should detect and migrate legacy localStorage data 1ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Legacy Migration > should report no migration when no legacy data exists 0ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Legacy Migration > should handle localStorage unavailable gracefully 0ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Security Status Monitoring > should provide accurate security status 1ms
stdout | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Security Status Monitoring > should indicate when rotation is needed
Time elapsed since storage: [33m161[39m ms
Should need rotation: [33mtrue[39m

stdout | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Security Status Monitoring > should indicate when rotation is needed
Status: {
  needsRotation: [33mtrue[39m,
  lastRotation: [35m2025-09-13T21:14:26.133Z[39m,
  hasValidClient: [33mtrue[39m
}

stdout | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle sessionStorage quota exceeded
Mock setItem called - throwing QuotaExceededError

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle sessionStorage quota exceeded
❌ [Security] [SECURITY] VIOLATION: SessionStorage quota exceeded (06:14:26)
❌ [Security] [SECURITY] THREAT: Failed to store client ID securely (06:14:26) { error: [32m'Storage quota exceeded'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle corrupted JSON in storage
❌ [Security] [SECURITY] VIOLATION: Failed to parse stored client data (06:14:26) { error: [32m`Unexpected token 'i', "invalid-json{" is not valid JSON`[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle corrupted JSON in storage
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:26) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'68112a6f...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle corrupted JSON in storage
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:14:26) { reason: [32m'No valid existing ID found'[39m, newId: [32m'68112a6f...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should clear data when retrieval fails
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:26) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'73cd4c24...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should clear data when retrieval fails
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:14:26) { reason: [32m'No valid existing ID found'[39m, newId: [32m'73cd4c24...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should clear data when retrieval fails
❌ [Security] [SECURITY] VIOLATION: Failed to parse stored client data (06:14:26) { error: [32m'Parse error'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle missing sessionStorage gracefully
❌ [Security] [SECURITY] THREAT: Failed to store client ID securely (06:14:26) { error: [32m'SessionStorage not available'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle missing sessionStorage gracefully
❌ [Security] [SECURITY] THREAT: Failed to get secure client ID (06:14:26) { error: [32m'SessionStorage not available'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Configuration Management > should merge partial configuration with defaults
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:26) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'13a276bc...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Configuration Management > should merge partial configuration with defaults
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:14:26) { reason: [32m'No valid existing ID found'[39m, newId: [32m'13a276bc...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Multiple Instance Isolation > should maintain separate data for different storage types
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:26) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'f6b558b5...'[39m }

stderr | src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Multiple Instance Isolation > should maintain separate data for different storage types
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:14:26) { reason: [32m'No valid existing ID found'[39m, newId: [32m'f6b558b5...'[39m }

 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Security Status Monitoring > should indicate when rotation is needed 162ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle sessionStorage quota exceeded 2ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle corrupted JSON in storage 1ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should clear data when retrieval fails 1ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Error Handling and Edge Cases > should handle missing sessionStorage gracefully 1ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Configuration Management > should apply configuration correctly 0ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Configuration Management > should merge partial configuration with defaults 1ms
 ✓ src/lib/events/__tests__/security/SecureClientManager.test.ts > SecureClientManager Security Tests > Multiple Instance Isolation > should maintain separate data for different storage types 1ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique event IDs 222ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique subscription IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:26)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique trace IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:26) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique subscription IDs 625ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique trace IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:26)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique span IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:26) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique trace IDs 127ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique span IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:27)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique test IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:27) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique span IDs 502ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique test IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:27)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique transaction IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:27) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should timeout slow handler after configured limit
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:27)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should respect custom timeout parameter
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:27) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should timeout slow handler after configured limit 2017ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique test IDs 499ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique transaction IDs
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:28)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Secure Number Generation > should generate secure integers within range
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:28) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > ID Generation Patterns > should generate unique transaction IDs 487ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Secure Number Generation > should generate secure integers within range
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:28)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Secure Number Generation > should generate secure floats between 0 and 1
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:28) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Secure Number Generation > should generate secure integers within range 397ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Secure Number Generation > should generate secure floats between 0 and 1
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:28)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Secure Number Generation > should generate secure booleans with fair distribution
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:28) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Secure Number Generation > should generate secure booleans with fair distribution
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:28)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Entropy Quality Tests > should pass entropy quality tests
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:28) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stdout | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Entropy Quality Tests > should pass entropy quality tests
Entropy Test Results: {
  quality: [32m'good'[39m,
  entropy: [33m0.999055461176367[39m,
  uniformity: [33m0.92766[39m,
  predictability: [33m0.33258004084533854[39m
}

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Entropy Quality Tests > should pass entropy quality tests
❌ [Security] [SECURITY] ANOMALY: Entropy test completed (06:14:28) {
  sampleSize: [32m'10000'[39m,
  quality: [32m'good'[39m,
  entropy: [32m'0.999055461176367'[39m,
  uniformity: [32m'0.92766'[39m,
  predictability: [32m'0.33258004084533854'[39m
}

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Entropy Quality Tests > should pass entropy quality tests
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:28)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Entropy Quality Tests > should maintain consistent entropy across multiple tests
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:28) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Entropy Quality Tests > should maintain consistent entropy across multiple tests
❌ [Security] [SECURITY] ANOMALY: Entropy test completed (06:14:28) {
  sampleSize: [32m'1000'[39m,
  quality: [32m'good'[39m,
  entropy: [32m'0.9884139087289133'[39m,
  uniformity: [32m'0.9392'[39m,
  predictability: [32m'0.34815150147813884'[39m
}
❌ [Security] [SECURITY] ANOMALY: Entropy test completed (06:14:28) {
  sampleSize: [32m'1000'[39m,
  quality: [32m'good'[39m,
  entropy: [32m'0.987777805197035'[39m,
  uniformity: [32m'0.9048'[39m,
  predictability: [32m'0.3452682501950615'[39m
}
❌ [Security] [SECURITY] ANOMALY: Entropy test completed (06:14:28) {
  sampleSize: [32m'1000'[39m,
  quality: [32m'good'[39m,
  entropy: [32m'0.9849270783925101'[39m,
  uniformity: [32m'0.86'[39m,
  predictability: [32m'0.3414441546578113'[39m
}
❌ [Security] [SECURITY] ANOMALY: Entropy test completed (06:14:28) {
  sampleSize: [32m'1000'[39m,
  quality: [32m'good'[39m,
  entropy: [32m'0.9887398251439941'[39m,
  uniformity: [32m'0.9178'[39m,
  predictability: [32m'0.3272373838475099'[39m
}
❌ [Security] [SECURITY] ANOMALY: Entropy test completed (06:14:28) {
  sampleSize: [32m'1000'[39m,
  quality: [32m'good'[39m,
  entropy: [32m'0.988452021863415'[39m,
  uniformity: [32m'0.9332'[39m,
  predictability: [32m'0.3383004184771754'[39m
}

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Entropy Quality Tests > should maintain consistent entropy across multiple tests
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:28)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Performance and Security Balance > should generate IDs quickly while maintaining security
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:28) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stdout | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Performance and Security Balance > should generate IDs quickly while maintaining security
Average time per ID generation: 0.015ms

 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Secure Number Generation > should generate secure floats between 0 and 1 391ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Secure Number Generation > should generate secure booleans with fair distribution 34ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Entropy Quality Tests > should pass entropy quality tests 35ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Entropy Quality Tests > should maintain consistent entropy across multiple tests 17ms
stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Performance and Security Balance > should generate IDs quickly while maintaining security
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:28)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Performance and Security Balance > should handle concurrent generation without collisions
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:28) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Performance and Security Balance > should handle concurrent generation without collisions
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:28)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Error Handling > should handle invalid integer range parameters
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:28) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Error Handling > should handle invalid integer range parameters
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:28)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Error Handling > should handle edge cases in number generation
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:28) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Error Handling > should handle edge cases in number generation
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:28)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Memory Management > should properly cleanup resources on destroy
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:28) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Memory Management > should properly cleanup resources on destroy
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:28) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
❌ [Security] [SECURITY] ANOMALY: Entropy test completed (06:14:28) {
  sampleSize: [32m'100'[39m,
  quality: [32m'good'[39m,
  entropy: [32m'0.8918183944265002'[39m,
  uniformity: [32m'0.95'[39m,
  predictability: [32m'0.30092810566132566'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:28)
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:28) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:28)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Memory Management > should properly cleanup resources on destroy
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:28)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Integration > should integrate properly with EventBus
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:28) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:28)

stderr | src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Integration > should maintain singleton pattern correctly
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:28) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:28)
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:28) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator destroyed (06:14:28)

 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Performance and Security Balance > should generate IDs quickly while maintaining security 61ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Performance and Security Balance > should handle concurrent generation without collisions 10ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Error Handling > should handle invalid integer range parameters 1ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Error Handling > should handle edge cases in number generation 1ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Security Tests > Memory Management > should properly cleanup resources on destroy 1ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Integration > should integrate properly with EventBus 0ms
 ✓ src/lib/events/__tests__/security/SecureRandomGenerator.test.ts > SecureRandomGenerator Integration > should maintain singleton pattern correctly 1ms
stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should respect custom timeout parameter
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:30)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should enforce maximum timeout limit
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:30) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should respect custom timeout parameter 2518ms
stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should enforce maximum timeout limit
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:30)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Error Handling > should handle handler errors without timeout
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:30) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Error Handling > should handle handler errors without timeout
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:30)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Error Handling > should track handler statistics correctly
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:30) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Basic Timeout Protection > should enforce maximum timeout limit 111ms
 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Error Handling > should handle handler errors without timeout 2ms
stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Error Handling > should track handler statistics correctly
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:30)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Circuit Breaker Functionality > should trip circuit breaker after consecutive failures
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:30) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Circuit Breaker Functionality > should trip circuit breaker after consecutive failures
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:30)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Circuit Breaker Functionality > should reset circuit breaker manually
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:30) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Circuit Breaker Functionality > should reset circuit breaker manually
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:30)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Circuit Breaker Functionality > should reset consecutive failures on successful execution
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:30) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Circuit Breaker Functionality > should reset consecutive failures on successful execution
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:30)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Performance Monitoring > should log warning for slow handlers
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:30) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Error Handling > should track handler statistics correctly 118ms
 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Circuit Breaker Functionality > should trip circuit breaker after consecutive failures 2ms
 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Circuit Breaker Functionality > should reset circuit breaker manually 1ms
 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Circuit Breaker Functionality > should reset consecutive failures on successful execution 61ms
stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Performance Monitoring > should log warning for slow handlers
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:31)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Performance Monitoring > should provide security status metrics
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:31) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Performance Monitoring > should log warning for slow handlers 615ms
stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Performance Monitoring > should provide security status metrics
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:31)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Performance Monitoring > should clean up old handler stats
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:31) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Performance Monitoring > should clean up old handler stats
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:31)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Concurrent Handler Execution > should execute multiple handlers concurrently
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:31) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Performance Monitoring > should provide security status metrics 128ms
 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Performance Monitoring > should clean up old handler stats 1ms
stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Concurrent Handler Execution > should execute multiple handlers concurrently
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:31)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Concurrent Handler Execution > should handle concurrent timeouts
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:31) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Concurrent Handler Execution > should execute multiple handlers concurrently 160ms
stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Concurrent Handler Execution > should handle concurrent timeouts
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:32)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Configuration > should apply custom configuration
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:32) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Concurrent Handler Execution > should handle concurrent timeouts 1001ms
stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Configuration > should apply custom configuration
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:32)

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Configuration > should disable circuit breaker when configured
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:32) { defaultTimeoutMs: [32m'2000'[39m, circuitBreakerEnabled: [32m'true'[39m }

stderr | src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Configuration > should disable circuit breaker when configured
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:32)

 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Configuration > should apply custom configuration 112ms
 ✓ src/lib/events/__tests__/security/SecureEventProcessor.test.ts > SecureEventProcessor Timeout Protection > Configuration > should disable circuit breaker when configured 1ms

⎯⎯⎯⎯⎯⎯ Failed Tests 67 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/lib/events/__tests__/security/AdvancedSecurity.test.ts > Advanced EventBus Security Tests > PayloadValidator Robustness > should reject payloads with excessive object nesting
AssertionError: expected true to be false // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- false[39m
[31m+ true[39m

 ❯ src/lib/events/__tests__/security/AdvancedSecurity.test.ts:90:30
     88|       const result = PayloadValidator.validateAndSanitize(event as any…
     89| 
     90|       expect(result.blocked).toBe(false); // The event is not blocked,…
       |                              ^
     91|       expect(result.violations.some(v => v.type === 'depth_limit')).to…
     92|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/67]⎯

 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 1: <script>alert("XSS")</script>...
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 2: <script type="text/javascript">alert("XSS")</scrip...
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 3: <script>document.location="http://evil.com"</scrip...
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 4: <img src="x" onerror="alert(\"XSS\")">...
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 5: <div onclick="alert(\"XSS\")">Click me</div>...
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 6: <input onfocus="alert(\"XSS\")" autofocus>...
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 7: <body onload="alert(\"XSS\")">...
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 8: javascript:alert("XSS")...
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 9: javascript:void(0)...
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 10: vbscript:msgbox("XSS")...
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 11: data:text/html,<script>alert("XSS")</script>...
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 12: data:text/html;base64,PHNjcmlwdD5hbGVydCgiWFNTIik8...
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 13: expression(alert("XSS"))...
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 14: style="expression(alert(\"XSS\"))"...
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 15: <meta http-equiv="refresh" content="0;url=javascri...
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 16: &#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112...
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 17: \u006A\u0061\u0076\u0061\u0073\u0063\u0072\u0069\u...
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 18: <svg onload="alert(\"XSS\")">...
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 19: <svg><script>alert("XSS")</script></svg>...
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 20: {{constructor.constructor("alert(\"XSS\")")()}}...
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 21: ${alert("XSS")}...
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 22: <iframe src="javascript:alert(\"XSS\")"></iframe>...
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 23: <iframe src="data:text/html,<script>alert(\"XSS\")...
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 24: <object data="javascript:alert(\"XSS\")"></object>...
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 25: <embed src="javascript:alert(\"XSS\")">...
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 26: <link rel="stylesheet" href="javascript:alert(\"XS...
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should block XSS vector 27: <form action="javascript:alert(\"XSS\")"><input ty...
TypeError: Cannot read properties of null (reading 'userInput')
 ❯ src/lib/events/__tests__/security/PayloadValidator.test.ts:120:40
    118|         
    119|         // Ensure sanitized payload doesn't contain the malicious cont…
    120|         expect(result.sanitizedPayload.userInput).not.toBe(xssVector);
       |                                        ^
    121|         expect(result.sanitizedPayload.userInput).toMatch(/\[XSS_REMOV…
    122|       });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/67]⎯

 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > XSS Protection Tests > should allow safe HTML-like content
AssertionError: expected false to be true // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- true[39m
[31m+ false[39m

 ❯ src/lib/events/__tests__/security/PayloadValidator.test.ts:136:30
    134| 
    135| 
    136|       expect(result.isValid).toBe(true);
       |                              ^
    137|       expect(result.violations.filter(v => v.type === 'xss')).toHaveLe…
    138|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/67]⎯

 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 1: 1' UNION SELECT * FROM users--
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 2: ' OR 1=1--
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 3: admin'--
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 4: ' OR 'a'='a
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 5: 1' AND 1=1--
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 6: 1' AND 1=2--
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 7: 1'; WAITFOR DELAY '00:00:05'--
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 8: 1' AND (SELECT COUNT(*) FROM sysobjects)>0--
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 9: 1' UNION SELECT username, password FROM users--
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 10: 1' UNION SELECT NULL, @@version--
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 11: '; EXEC xp_cmdshell('dir')--
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 12: '; EXEC sp_configure--
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 13: 1'; DROP TABLE users--
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 14: '; TRUNCATE TABLE logs--
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 15: '; DELETE FROM users WHERE 1=1--
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 16: 1' AND ASCII(SUBSTRING((SELECT TOP 1 name FROM sysobjects),1,1))>64--
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 17: 1'; BENCHMARK(5000000,MD5(1))--
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 18: 1' AND (SELECT pg_sleep(5))--
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 19: '; db.users.drop(); //
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 20: $ne: null
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 21: '; return true; //
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 22: )(|(objectClass=*))
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > SQL Injection Protection Tests > should block SQL injection vector 23: *)(uid=*))(|(uid=*
AssertionError: expected false to be true // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- true[39m
[31m+ false[39m

 ❯ src/lib/events/__tests__/security/PayloadValidator.test.ts:197:73
    195| 
    196|         expect(result.violations.length).toBeGreaterThan(0);
    197|         expect(result.violations.some(v => v.type === 'sql_injection')…
       |                                                                         ^
    198|         
    199|         // Ensure sanitized payload removes SQL patterns

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/67]⎯

 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > HTML Sanitization Tests > should remove HTML tags from user content
AssertionError: expected false to be true // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- true[39m
[31m+ false[39m

 ❯ src/lib/events/__tests__/security/PayloadValidator.test.ts:232:72
    230|       const result = PayloadValidator.validateAndSanitize(event);
    231| 
    232|       expect(result.violations.some(v => v.type === 'html_injection'))…
       |                                                                        ^
    233|       expect(result.sanitizedPayload.comment).not.toContain('<p>');
    234|       expect(result.sanitizedPayload.comment).not.toContain('<b>');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/67]⎯

 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > HTML Sanitization Tests > should handle HTML entities
AssertionError: expected false to be true // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- true[39m
[31m+ false[39m

 ❯ src/lib/events/__tests__/security/PayloadValidator.test.ts:247:72
    245|       const result = PayloadValidator.validateAndSanitize(event);
    246| 
    247|       expect(result.violations.some(v => v.type === 'html_injection'))…
       |                                                                        ^
    248|       expect(result.sanitizedPayload.content).not.toContain('&lt;');
    249|       expect(result.sanitizedPayload.content).not.toContain('&#8364;');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/67]⎯

 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 1: javascript:alert("XSS")
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 2: vbscript:msgbox("Attack")
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 3: data:text/html,<script>alert("XSS")</script>
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 4: file:///etc/passwd
 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Protocol Validation Tests > should block dangerous protocol 5: ftp://malicious-site.com/payload.exe
AssertionError: expected false to be true // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- true[39m
[31m+ false[39m

 ❯ src/lib/events/__tests__/security/PayloadValidator.test.ts:273:78
    271|         const result = PayloadValidator.validateAndSanitize(event);
    272| 
    273|         expect(result.violations.some(v => v.type === 'protocol_violat…
       |                                                                              ^
    274|         expect(result.sanitizedPayload.website).toContain('[PROTOCOL_B…
    275|       });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/67]⎯

 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Size and Structure Limits > should truncate oversized strings
AssertionError: expected false to be true // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- true[39m
[31m+ false[39m

 ❯ src/lib/events/__tests__/security/PayloadValidator.test.ts:304:68
    302|       const result = PayloadValidator.validateAndSanitize(event);
    303| 
    304|       expect(result.violations.some(v => v.type === 'size_limit')).toB…
       |                                                                    ^
    305|       expect(result.sanitizedPayload.description.length).toBeLessThanO…
    306|       expect(result.sanitizedPayload.normalField).toBe('normal content…

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[8/67]⎯

 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Size and Structure Limits > should handle deeply nested objects
AssertionError: expected false to be true // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- true[39m
[31m+ false[39m

 ❯ src/lib/events/__tests__/security/PayloadValidator.test.ts:324:69
    322|       const result = PayloadValidator.validateAndSanitize(event);
    323| 
    324|       expect(result.violations.some(v => v.type === 'depth_limit')).to…
       |                                                                     ^
    325|     });
    326| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[9/67]⎯

 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Size and Structure Limits > should truncate oversized arrays
AssertionError: expected false to be true // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- true[39m
[31m+ false[39m

 ❯ src/lib/events/__tests__/security/PayloadValidator.test.ts:337:68
    335|       const result = PayloadValidator.validateAndSanitize(event);
    336| 
    337|       expect(result.violations.some(v => v.type === 'size_limit')).toB…
       |                                                                    ^
    338|       expect(result.sanitizedPayload.items.length).toBeLessThanOrEqual…
    339|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[10/67]⎯

 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Complex Payload Tests > should handle realistic G-Admin business payloads
AssertionError: expected false to be true // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- true[39m
[31m+ false[39m

 ❯ src/lib/events/__tests__/security/PayloadValidator.test.ts:369:30
    367|       const result = PayloadValidator.validateAndSanitize(event);
    368| 
    369|       expect(result.isValid).toBe(true);
       |                              ^
    370|       // Some HTML sanitization might occur, but should not be blocked
    371|       expect(result.sanitizedPayload.order.customer.name).toBe('John O…

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[11/67]⎯

 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Complex Payload Tests > should handle malicious business payload
AssertionError: expected false to be true // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- true[39m
[31m+ false[39m

 ❯ src/lib/events/__tests__/security/PayloadValidator.test.ts:399:71
    397|       expect(result.violations.length).toBeGreaterThan(0);
    398|       expect(result.violations.some(v => v.type === 'xss')).toBe(true);
    399|       expect(result.violations.some(v => v.type === 'sql_injection')).…
       |                                                                       ^
    400|       
    401|       // All malicious content should be sanitized

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[12/67]⎯

 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Configuration Tests > should disable specific protection when configured
AssertionError: expected [ { type: 'xss', …(5) } ] to have a length of +0 but got 1

[32m- Expected[39m
[31m+ Received[39m

[32m- 0[39m
[31m+ 1[39m

 ❯ src/lib/events/__tests__/security/PayloadValidator.test.ts:477:63
    475|       const result = PayloadValidator.validateAndSanitize(event);
    476| 
    477|       expect(result.violations.filter(v => v.type === 'xss')).toHaveLe…
       |                                                               ^
    478|       expect(result.violations.some(v => v.type === 'sql_injection')).…
    479|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[13/67]⎯

 FAIL  src/lib/events/__tests__/security/PayloadValidator.test.ts > PayloadValidator Security Tests > Configuration Tests > should respect custom size limits
AssertionError: expected false to be true // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- true[39m
[31m+ false[39m

 ❯ src/lib/events/__tests__/security/PayloadValidator.test.ts:495:68
    493|       const result = PayloadValidator.validateAndSanitize(event);
    494| 
    495|       expect(result.violations.some(v => v.type === 'size_limit')).toB…
       |                                                                    ^
    496|       expect(result.sanitizedPayload.description.length).toBeLessThanO…
    497|       expect(result.sanitizedPayload.items.length).toBeLessThanOrEqual…

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[14/67]⎯

 FAIL  src/lib/events/__tests__/security/SecureLogger.test.ts > SecureLogger Security Tests > Edge Cases and Robustness > should handle arrays with sensitive data
TypeError: this.sanitizeData is not a function
 ❯ map src/lib/events/utils/SecureLogger.ts:152:36
    150|     // Handle arrays
    151|     if (Array.isArray(data)) {
    152|       return data.map(item => this.sanitizeData(item, visited));
       |                                    ^
    153|     }
    154| 
 ❯ SecureLogger.sanitizeObject src/lib/events/utils/SecureLogger.ts:152:19
 ❯ SecureLogger.sanitizeObject src/lib/events/utils/SecureLogger.ts:176:31
 ❯ SecureLogger.log src/lib/events/utils/SecureLogger.ts:95:53
 ❯ SecureLogger.info src/lib/events/utils/SecureLogger.ts:63:10
 ❯ src/lib/events/__tests__/security/SecureLogger.test.ts:439:20

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[15/67]⎯


 Test Files  3 failed | 6 passed (9)
      Tests  67 failed | 160 passed (227)
   Start at  18:14:21
   Duration  10.71s (transform 988ms, setup 4.10s, collect 1.82s, tests 12.43s, environment 22.12s, prepare 2.53s)

