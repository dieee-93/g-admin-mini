
 RUN  v3.2.4 I:/Programacion/Proyectos/g-mini

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should initialize with correct configuration
[DEBUG] test-instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] test-instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:14:36) {
  instanceId: [32m'test-instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should initialize with correct configuration
[DEBUG] test-instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: SHUTDOWN, senderId: test-instance-1
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:14:36) { instanceId: [32m'test-instance-1'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should initialize with correct configuration
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should start as candidate and attempt to become leader
[DEBUG] test-instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] test-instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:14:36) {
  instanceId: [32m'test-instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should initialize with correct configuration 137ms
stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:36) { noncePrefix: [32m'9u656os6'[39m, timestamp: [32m'1757798076488'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:36) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:36) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:36) { noncePrefix: [32m'76pme678'[39m, timestamp: [32m'1757798076488'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:36) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:36) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:36) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'f6849813...'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:36) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'0fc71522...'[39m }

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (06:14:36) { reason: [32m'No valid existing ID found'[39m, newId: [32m'f6849813...'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (06:14:36) { reason: [32m'No valid existing ID found'[39m, newId: [32m'0fc71522...'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should start as candidate and attempt to become leader
[DEBUG] test-instance-1: Initial election timeout fired
[DEBUG] test-instance-1: Starting initial election
[DEBUG] test-instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:14:36) { instanceId: [32m'test-instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: ELECTION, senderId: test-instance-1
[DEBUG] test-instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:36) { noncePrefix: [32m'rj7i6yml'[39m, timestamp: [32m'1757798076566'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:14:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:14:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:14:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:14:36) { error: {} }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should propagate events across multiple instances
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:36) { noncePrefix: [32m'sl9imb89'[39m, timestamp: [32m'1757798076565'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:14:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:14:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:14:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:36) { noncePrefix: [32m'9jhf8dmh'[39m, timestamp: [32m'1757798076565'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:14:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:14:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:14:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:36) { noncePrefix: [32m'2rir8bsy'[39m, timestamp: [32m'1757798076565'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:14:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:14:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:14:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should propagate events across multiple instances
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:14:36) { error: {} }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:14:36) { error: {} }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:14:36) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:14:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:14:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:14:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:14:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled
[EventBus] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:14:36)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:14:36)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (06:14:36) {
  keyVersion: [32m'key_1757798076487_9rdhjgsd'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (06:14:36) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:36) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize all distributed components
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:36) { noncePrefix: [32m'klv43ist'[39m, timestamp: [32m'1757798076584'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:14:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:14:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:14:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize all distributed components
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:36) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:14:36) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize all distributed components
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:14:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize all distributed components
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:14:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize all distributed components
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:14:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:14:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize all distributed components
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize all distributed components
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize all distributed components
[EventBus] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize all distributed components
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:14:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:36) { noncePrefix: [32m'ozz2x5dk'[39m, timestamp: [32m'1757798076588'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:14:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:14:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:14:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:36) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:14:36) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:36) { noncePrefix: [32m'056meg8u'[39m, timestamp: [32m'1757798076588'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:14:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:14:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:14:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:14:36) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:14:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:14:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:14:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:14:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
[EventBus] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:14:36)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:14:36)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (06:14:36) {
  keyVersion: [32m'key_1757798076584_hguulur9'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (06:14:36) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:36) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:14:36)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (06:14:36) {
  keyVersion: [32m'key_1757798076588_lyw3z747'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (06:14:36) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:36) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:14:36)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (06:14:36) {
  keyVersion: [32m'key_1757798076588_lyw3z747'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (06:14:36) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:36) { isInitialized: [32m'true'[39m }
‚ÑπÔ∏è [Security] Request rate limit check passed (06:14:36) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.initialized'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798076597_c73owzujbput'[39m
}

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:36) { noncePrefix: [32m'4msz98tf'[39m, timestamp: [32m'1757798076605'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:14:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:14:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:14:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:36) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:14:36) { error: {} }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:985:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:445:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at DistributedEventBus.doInitialize [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:300:7[90m)[39m

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:14:36)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (06:14:36) {
  keyVersion: [32m'key_1757798076605_j0tmbjw9'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (06:14:36) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:36) { isInitialized: [32m'true'[39m }
‚ÑπÔ∏è [Security] Request rate limit check passed (06:14:36) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.initialized'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798076605_eol3vsxy20dk'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:985:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:445:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at DistributedEventBus.doInitialize [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:300:7[90m)[39m

 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled 17ms
   ‚Üí eventBus.getInstanceId is not a function
 ‚úì src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize all distributed components 4ms
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration 6ms
   ‚Üí microfrontendBus.isDistributedEnabled is not a function
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should start as candidate and attempt to become leader
[DEBUG] test-instance-1: Election timeout fired, calling completeElection()
[DEBUG] test-instance-1: completeElection() called, electionInProgress: true
[DEBUG] test-instance-1: Completing election - received 0 responses from: []
[DEBUG] test-instance-1: No responses received, becoming leader
[DEBUG] test-instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] test-instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] test-instance-1: NOW LEADER with priority 100, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: COORDINATOR, senderId: test-instance-1
[DEBUG] test-instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (06:14:37) {
  instanceId: [32m'test-instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'100'[39m
}
[DEBUG] test-instance-1: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should start as candidate and attempt to become leader
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should start as candidate and attempt to become leader
[DEBUG] test-instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: SHUTDOWN, senderId: test-instance-1
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: STEP_DOWN, senderId: test-instance-1
‚ÑπÔ∏è [EventBus] Stopped being leader (06:14:38) { instanceId: [32m'test-instance-1'[39m }
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:14:38) { instanceId: [32m'test-instance-1'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should start as candidate and attempt to become leader
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[DEBUG] instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:14:38) {
  instanceId: [32m'instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should start as candidate and attempt to become leader 2120ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[DEBUG] instance-2: Initializing with priority 200
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 1
[MOCK] Added listener to instance 1, total listeners: 1
[DEBUG] instance-2: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:14:38) {
  instanceId: [32m'instance-2'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'200'[39m
}

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[DEBUG] instance-1: Initial election timeout fired
[DEBUG] instance-1: Starting initial election
[DEBUG] instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:14:38) { instanceId: [32m'instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: ELECTION, senderId: instance-1
[DEBUG] instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received ELECTION from instance-1, connected instances: [instance-1], wasNew: true
[DEBUG] instance-2: Election comparison - my priority: 200, sender priority: 100, current leader: undefined, am I leader: false
[DEBUG] instance-2: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: ELECTION_OK, senderId: instance-2
[DEBUG] instance-2: Responded OK, may start own election later if needed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received ELECTION_OK from instance-2, connected instances: [instance-2], wasNew: true

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[DEBUG] instance-2: Initial election timeout fired
[DEBUG] instance-2: Starting initial election
[DEBUG] instance-2: Starting election with priority 200, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:14:38) { instanceId: [32m'instance-2'[39m, priority: [32m'200'[39m }
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: ELECTION, senderId: instance-2
[DEBUG] instance-2: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received ELECTION from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-1: Election comparison - my priority: 100, sender priority: 200, current leader: undefined, am I leader: false
[DEBUG] instance-1: Sender has higher priority (200 > 100), not responding

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[DEBUG] instance-1: Election timeout fired, calling completeElection()
[DEBUG] instance-1: completeElection() called, electionInProgress: true
[DEBUG] instance-1: Completing election - received 1 responses from: [instance-2]
[DEBUG] instance-1: Checking responder instance-2 with priority 200 vs my priority 100
[DEBUG] instance-1: Found higher priority responder: instance-2 (200)
[DEBUG] instance-1: Responses from higher priority instances, waiting for coordinator

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[DEBUG] instance-2: Election timeout fired, calling completeElection()
[DEBUG] instance-2: completeElection() called, electionInProgress: true
[DEBUG] instance-2: Completing election - received 0 responses from: []
[DEBUG] instance-2: No responses received, becoming leader
[DEBUG] instance-2: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] instance-2: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] instance-2: NOW LEADER with priority 200, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: COORDINATOR, senderId: instance-2
[DEBUG] instance-2: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (06:14:39) {
  instanceId: [32m'instance-2'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'200'[39m
}
[DEBUG] instance-2: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] instance-2: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received COORDINATOR from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-1: Processing COORDINATOR message from instance-2 with priority 200
[DEBUG] instance-1: Received coordinator message from instance-2, previousLeader: undefined, wasLeader: false, electionInProgress: false
[DEBUG] instance-1: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (06:14:39) {
  leaderId: [32m'instance-2'[39m,
  previousLeader: [32m'undefined'[39m,
  instanceId: [32m'instance-1'[39m
}
[DEBUG] instance-1: Notifying 0 callbacks about leadership change (new leader: instance-2)
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[DEBUG] instance-2: Sending heartbeat as leader
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received HEARTBEAT from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-1: Received HEARTBEAT from instance-2, currentLeader is instance-2, senderPriority: 200, myPriority: 100
[DEBUG] instance-1: Not challenging leader - myPriority: 100, senderPriority: 200, isCurrentlyLeader: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[DEBUG] instance-2: Sending heartbeat as leader
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received HEARTBEAT from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-1: Received HEARTBEAT from instance-2, currentLeader is instance-2, senderPriority: 200, myPriority: 100
[DEBUG] instance-1: Not challenging leader - myPriority: 100, senderPriority: 200, isCurrentlyLeader: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[DEBUG] instance-2: Detected inactive instance: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[DEBUG] instance-2: Sending heartbeat as leader
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received HEARTBEAT from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-1: Received HEARTBEAT from instance-2, currentLeader is instance-2, senderPriority: 200, myPriority: 100
[DEBUG] instance-1: Not challenging leader - myPriority: 100, senderPriority: 200, isCurrentlyLeader: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[TEST] Poll 1: election1.isLeader(): false, election2.isLeader(): true
[TEST] Stable leadership achieved on poll 1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[DEBUG] instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: SHUTDOWN, senderId: instance-1
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:14:41) { instanceId: [32m'instance-1'[39m }
[DEBUG] instance-2: Destroying leader election instance
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: SHUTDOWN, senderId: instance-2
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: STEP_DOWN, senderId: instance-2
‚ÑπÔ∏è [EventBus] Stopped being leader (06:14:41) { instanceId: [32m'instance-2'[39m }
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] instance-2: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:14:41) { instanceId: [32m'instance-2'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[MOCK] Sending to instance 1 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[MOCK] Sending to instance 0 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[MOCK] Sending to instance 0 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[MOCK] Closing BroadcastChannel instance 1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:14:41) {
  instanceId: [32m'instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities 3230ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-1: Initial election timeout fired
[DEBUG] instance-1: Starting initial election
[DEBUG] instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:14:41) { instanceId: [32m'instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: ELECTION, senderId: instance-1
[DEBUG] instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-1: Election timeout fired, calling completeElection()
[DEBUG] instance-1: completeElection() called, electionInProgress: true
[DEBUG] instance-1: Completing election - received 0 responses from: []
[DEBUG] instance-1: No responses received, becoming leader
[DEBUG] instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] instance-1: NOW LEADER with priority 100, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: COORDINATOR, senderId: instance-1
[DEBUG] instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (06:14:42) {
  instanceId: [32m'instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'100'[39m
}
[DEBUG] instance-1: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-2: Initializing with priority 200
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 1
[MOCK] Added listener to instance 1, total listeners: 1
[DEBUG] instance-2: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:14:44) {
  instanceId: [32m'instance-2'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'200'[39m
}

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-2: Initial election timeout fired
[DEBUG] instance-2: Starting initial election
[DEBUG] instance-2: Starting election with priority 200, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:14:44) { instanceId: [32m'instance-2'[39m, priority: [32m'200'[39m }
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: ELECTION, senderId: instance-2
[DEBUG] instance-2: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received ELECTION from instance-2, connected instances: [instance-2], wasNew: true
[DEBUG] instance-1: Election comparison - my priority: 100, sender priority: 200, current leader: instance-1, am I leader: true
[DEBUG] instance-1: Sender has higher priority (200 > 100), not responding

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received HEARTBEAT from instance-1, connected instances: [instance-1], wasNew: true
[DEBUG] instance-2: Received HEARTBEAT from instance-1, currentLeader is undefined, senderPriority: 100, myPriority: 200
[DEBUG] instance-2: Received heartbeat from unknown leader instance-1 (priority 100), considering as current leader

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received HEARTBEAT from instance-1, connected instances: [instance-1], wasNew: false
[DEBUG] instance-2: Received HEARTBEAT from instance-1, currentLeader is instance-1, senderPriority: 100, myPriority: 200
[DEBUG] instance-2: Detected leader instance-1 with lower priority (100 < 200), checking if challenge needed
[DEBUG] instance-2: Already in election process, not restarting challenge (this prevents infinite loops)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-2: Election timeout fired, calling completeElection()
[DEBUG] instance-2: completeElection() called, electionInProgress: true
[DEBUG] instance-2: Completing election - received 0 responses from: []
[DEBUG] instance-2: No responses received, becoming leader
[DEBUG] instance-2: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=instance-1
[DEBUG] instance-2: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=instance-1
[DEBUG] instance-2: NOW LEADER with priority 200, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: COORDINATOR, senderId: instance-2
[DEBUG] instance-2: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (06:14:45) {
  instanceId: [32m'instance-2'[39m,
  previousLeader: [32m'instance-1'[39m,
  priority: [32m'200'[39m
}
[DEBUG] instance-2: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=true, previousLeader=instance-1, callbacks=0
[DEBUG] instance-2: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received COORDINATOR from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-1: Processing COORDINATOR message from instance-2 with priority 200
[DEBUG] instance-1: Received coordinator message from instance-2, previousLeader: instance-1, wasLeader: true, electionInProgress: false
[DEBUG] instance-1: Stepping down from leadership
‚ÑπÔ∏è [EventBus] Stopped being leader (06:14:45) { instanceId: [32m'instance-1'[39m }
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] instance-1: No callbacks registered
[DEBUG] instance-1: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (06:14:45) {
  leaderId: [32m'instance-2'[39m,
  previousLeader: [32m'instance-1'[39m,
  instanceId: [32m'instance-1'[39m
}
[DEBUG] instance-1: Notifying 0 callbacks about leadership change (new leader: instance-2)
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=instance-1, callbacks=0
[DEBUG] instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-2: Sending heartbeat as leader
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received HEARTBEAT from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-1: Received HEARTBEAT from instance-2, currentLeader is instance-2, senderPriority: 200, myPriority: 100
[DEBUG] instance-1: Not challenging leader - myPriority: 100, senderPriority: 200, isCurrentlyLeader: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-3: Initializing with priority 300
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 2
[MOCK] Added listener to instance 2, total listeners: 1
[DEBUG] instance-3: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:14:46) {
  instanceId: [32m'instance-3'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'300'[39m
}

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-2: Sending heartbeat as leader
[MOCK] Instance 1 broadcasting to 2 other instances. Message type: HEARTBEAT, senderId: instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-3: Initial election timeout fired
[DEBUG] instance-3: Starting initial election
[DEBUG] instance-3: Starting election with priority 300, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:14:46) { instanceId: [32m'instance-3'[39m, priority: [32m'300'[39m }
[MOCK] Instance 2 broadcasting to 2 other instances. Message type: ELECTION, senderId: instance-3
[DEBUG] instance-3: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received HEARTBEAT from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-1: Received HEARTBEAT from instance-2, currentLeader is instance-2, senderPriority: 200, myPriority: 100
[DEBUG] instance-1: Not challenging leader - myPriority: 100, senderPriority: 200, isCurrentlyLeader: false
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] instance-3: Received HEARTBEAT from instance-2, connected instances: [instance-2], wasNew: true
[DEBUG] instance-3: Received HEARTBEAT from instance-2, currentLeader is undefined, senderPriority: 200, myPriority: 300
[DEBUG] instance-3: Received heartbeat from unknown leader instance-2 (priority 200), considering as current leader

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received ELECTION from instance-3, connected instances: [instance-2, instance-3], wasNew: true
[DEBUG] instance-1: Election comparison - my priority: 100, sender priority: 300, current leader: instance-2, am I leader: false
[DEBUG] instance-1: Sender has higher priority (300 > 100), not responding
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received ELECTION from instance-3, connected instances: [instance-1, instance-3], wasNew: true
[DEBUG] instance-2: Election comparison - my priority: 200, sender priority: 300, current leader: instance-2, am I leader: true
[DEBUG] instance-2: Sender has higher priority (300 > 200), not responding

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-2: Sending heartbeat as leader
[MOCK] Instance 1 broadcasting to 2 other instances. Message type: HEARTBEAT, senderId: instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received HEARTBEAT from instance-2, connected instances: [instance-2, instance-3], wasNew: false
[DEBUG] instance-1: Received HEARTBEAT from instance-2, currentLeader is instance-2, senderPriority: 200, myPriority: 100
[DEBUG] instance-1: Not challenging leader - myPriority: 100, senderPriority: 200, isCurrentlyLeader: false
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] instance-3: Received HEARTBEAT from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-3: Received HEARTBEAT from instance-2, currentLeader is instance-2, senderPriority: 200, myPriority: 300
[DEBUG] instance-3: Detected leader instance-2 with lower priority (200 < 300), checking if challenge needed
[DEBUG] instance-3: Already in election process, not restarting challenge (this prevents infinite loops)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-3: Election timeout fired, calling completeElection()
[DEBUG] instance-3: completeElection() called, electionInProgress: true
[DEBUG] instance-3: Completing election - received 0 responses from: []
[DEBUG] instance-3: No responses received, becoming leader
[DEBUG] instance-3: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=instance-2
[DEBUG] instance-3: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=instance-2
[DEBUG] instance-3: NOW LEADER with priority 300, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 2 broadcasting to 2 other instances. Message type: COORDINATOR, senderId: instance-3
[DEBUG] instance-3: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (06:14:47) {
  instanceId: [32m'instance-3'[39m,
  previousLeader: [32m'instance-2'[39m,
  priority: [32m'300'[39m
}
[DEBUG] instance-3: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] instance-3: notifyLeadershipChange called with isLeader=true, previousLeader=instance-2, callbacks=0
[DEBUG] instance-3: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-2: Sending heartbeat as leader
[MOCK] Instance 1 broadcasting to 2 other instances. Message type: HEARTBEAT, senderId: instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received COORDINATOR from instance-3, connected instances: [instance-2, instance-3], wasNew: false
[DEBUG] instance-1: Processing COORDINATOR message from instance-3 with priority 300
[DEBUG] instance-1: Received coordinator message from instance-3, previousLeader: instance-2, wasLeader: false, electionInProgress: false
[DEBUG] instance-1: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (06:14:47) {
  leaderId: [32m'instance-3'[39m,
  previousLeader: [32m'instance-2'[39m,
  instanceId: [32m'instance-1'[39m
}
[DEBUG] instance-1: Notifying 0 callbacks about leadership change (new leader: instance-3)
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=instance-2, callbacks=0
[DEBUG] instance-1: No callbacks registered
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received COORDINATOR from instance-3, connected instances: [instance-1, instance-3], wasNew: false
[DEBUG] instance-2: Processing COORDINATOR message from instance-3 with priority 300
[DEBUG] instance-2: Received coordinator message from instance-3, previousLeader: instance-2, wasLeader: true, electionInProgress: false
[DEBUG] instance-2: Stepping down from leadership
‚ÑπÔ∏è [EventBus] Stopped being leader (06:14:47) { instanceId: [32m'instance-2'[39m }
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] instance-2: No callbacks registered
[DEBUG] instance-2: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (06:14:47) {
  leaderId: [32m'instance-3'[39m,
  previousLeader: [32m'instance-2'[39m,
  instanceId: [32m'instance-2'[39m
}
[DEBUG] instance-2: Notifying 0 callbacks about leadership change (new leader: instance-3)
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=false, previousLeader=instance-2, callbacks=0
[DEBUG] instance-2: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received HEARTBEAT from instance-2, connected instances: [instance-2, instance-3], wasNew: false
[DEBUG] instance-1: Received HEARTBEAT from instance-2, currentLeader is instance-3, senderPriority: 200, myPriority: 100
[DEBUG] instance-1: Received heartbeat from unknown leader instance-2 (priority 200), considering as current leader
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] instance-3: Received HEARTBEAT from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-3: Received HEARTBEAT from instance-2, currentLeader is instance-3, senderPriority: 200, myPriority: 300
[DEBUG] instance-3: Received heartbeat from competing leader instance-2 (priority 200) while I am leader (priority 300)
[DEBUG] instance-3: I have higher priority than competing leader, continuing as leader
[MOCK] Instance 2 broadcasting to 2 other instances. Message type: COORDINATOR, senderId: instance-3

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received COORDINATOR from instance-3, connected instances: [instance-2, instance-3], wasNew: false
[DEBUG] instance-1: Processing COORDINATOR message from instance-3 with priority 300
[DEBUG] instance-1: Received coordinator message from instance-3, previousLeader: instance-2, wasLeader: false, electionInProgress: false
[DEBUG] instance-1: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (06:14:47) {
  leaderId: [32m'instance-3'[39m,
  previousLeader: [32m'instance-2'[39m,
  instanceId: [32m'instance-1'[39m
}
[DEBUG] instance-1: Notifying 0 callbacks about leadership change (new leader: instance-3)
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=instance-2, callbacks=0
[DEBUG] instance-1: No callbacks registered
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received COORDINATOR from instance-3, connected instances: [instance-1, instance-3], wasNew: false
[DEBUG] instance-2: Processing COORDINATOR message from instance-3 with priority 300
[DEBUG] instance-2: Received coordinator message from instance-3, previousLeader: instance-3, wasLeader: false, electionInProgress: false
[DEBUG] instance-2: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (06:14:47) {
  leaderId: [32m'instance-3'[39m,
  previousLeader: [32m'instance-3'[39m,
  instanceId: [32m'instance-2'[39m
}
[DEBUG] instance-2: Notifying 0 callbacks about leadership change (new leader: instance-3)
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=false, previousLeader=instance-3, callbacks=0
[DEBUG] instance-2: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 2 other instances. Message type: SHUTDOWN, senderId: instance-1
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:14:47) { instanceId: [32m'instance-1'[39m }
[DEBUG] instance-2: Destroying leader election instance
[MOCK] Instance 1 broadcasting to 2 other instances. Message type: SHUTDOWN, senderId: instance-2
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:14:47) { instanceId: [32m'instance-2'[39m }
[DEBUG] instance-3: Destroying leader election instance
[MOCK] Instance 2 broadcasting to 2 other instances. Message type: SHUTDOWN, senderId: instance-3
[MOCK] Instance 2 broadcasting to 2 other instances. Message type: STEP_DOWN, senderId: instance-3
‚ÑπÔ∏è [EventBus] Stopped being leader (06:14:47) { instanceId: [32m'instance-3'[39m }
[DEBUG] instance-3: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] instance-3: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:14:47) { instanceId: [32m'instance-3'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 1 (1 listeners)
[MOCK] Sending to instance 2 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 0 (1 listeners)
[MOCK] Sending to instance 2 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 0 (1 listeners)
[MOCK] Sending to instance 1 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 0 (1 listeners)
[MOCK] Sending to instance 1 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Closing BroadcastChannel instance 1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Closing BroadcastChannel instance 2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[DEBUG] instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:14:47) {
  instanceId: [32m'instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[DEBUG] instance-1: Initial election timeout fired
[DEBUG] instance-1: Starting initial election
[DEBUG] instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:14:48) { instanceId: [32m'instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: ELECTION, senderId: instance-1
[DEBUG] instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[DEBUG] instance-1: Election timeout fired, calling completeElection()
[DEBUG] instance-1: completeElection() called, electionInProgress: true
[DEBUG] instance-1: Completing election - received 0 responses from: []
[DEBUG] instance-1: No responses received, becoming leader
[DEBUG] instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] instance-1: NOW LEADER with priority 100, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: COORDINATOR, senderId: instance-1
[DEBUG] instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (06:14:49) {
  instanceId: [32m'instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'100'[39m
}
[DEBUG] instance-1: Notifying 1 callbacks about leadership change (became leader)
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=1
[DEBUG] instance-1: Calling callback 0 (attempt 1) with (true, undefined)
[DEBUG] instance-1: Callback 0 completed successfully
[DEBUG] instance-1: All callbacks processed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[DEBUG] instance-2: Initializing with priority 200
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 1
[MOCK] Added listener to instance 1, total listeners: 1
[DEBUG] instance-2: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:14:50) {
  instanceId: [32m'instance-2'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'200'[39m
}

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[DEBUG] instance-2: Initial election timeout fired
[DEBUG] instance-2: Starting initial election
[DEBUG] instance-2: Starting election with priority 200, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:14:50) { instanceId: [32m'instance-2'[39m, priority: [32m'200'[39m }
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: ELECTION, senderId: instance-2
[DEBUG] instance-2: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received ELECTION from instance-2, connected instances: [instance-2], wasNew: true
[DEBUG] instance-1: Election comparison - my priority: 100, sender priority: 200, current leader: instance-1, am I leader: true
[DEBUG] instance-1: Sender has higher priority (200 > 100), not responding

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received HEARTBEAT from instance-1, connected instances: [instance-1], wasNew: true
[DEBUG] instance-2: Received HEARTBEAT from instance-1, currentLeader is undefined, senderPriority: 100, myPriority: 200
[DEBUG] instance-2: Received heartbeat from unknown leader instance-1 (priority 100), considering as current leader

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received HEARTBEAT from instance-1, connected instances: [instance-1], wasNew: false
[DEBUG] instance-2: Received HEARTBEAT from instance-1, currentLeader is instance-1, senderPriority: 100, myPriority: 200
[DEBUG] instance-2: Detected leader instance-1 with lower priority (100 < 200), checking if challenge needed
[DEBUG] instance-2: Already in election process, not restarting challenge (this prevents infinite loops)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[DEBUG] instance-2: Election timeout fired, calling completeElection()
[DEBUG] instance-2: completeElection() called, electionInProgress: true
[DEBUG] instance-2: Completing election - received 0 responses from: []
[DEBUG] instance-2: No responses received, becoming leader
[DEBUG] instance-2: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=instance-1
[DEBUG] instance-2: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=instance-1
[DEBUG] instance-2: NOW LEADER with priority 200, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: COORDINATOR, senderId: instance-2
[DEBUG] instance-2: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (06:14:51) {
  instanceId: [32m'instance-2'[39m,
  previousLeader: [32m'instance-1'[39m,
  priority: [32m'200'[39m
}
[DEBUG] instance-2: Notifying 1 callbacks about leadership change (became leader)
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=true, previousLeader=instance-1, callbacks=1
[DEBUG] instance-2: Calling callback 0 (attempt 1) with (true, instance-1)
[DEBUG] instance-2: Callback 0 completed successfully
[DEBUG] instance-2: All callbacks processed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received COORDINATOR from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-1: Processing COORDINATOR message from instance-2 with priority 200
[DEBUG] instance-1: Received coordinator message from instance-2, previousLeader: instance-1, wasLeader: true, electionInProgress: false
[DEBUG] instance-1: Stepping down from leadership
‚ÑπÔ∏è [EventBus] Stopped being leader (06:14:51) { instanceId: [32m'instance-1'[39m }
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=1
[DEBUG] instance-1: Calling callback 0 (attempt 1) with (false, undefined)
[DEBUG] instance-1: Callback 0 completed successfully
[DEBUG] instance-1: All callbacks processed
[DEBUG] instance-1: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (06:14:51) {
  leaderId: [32m'instance-2'[39m,
  previousLeader: [32m'instance-1'[39m,
  instanceId: [32m'instance-1'[39m
}
[DEBUG] instance-1: Notifying 1 callbacks about leadership change (new leader: instance-2)
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=instance-1, callbacks=1
[DEBUG] instance-1: Calling callback 0 (attempt 1) with (false, instance-1)
[DEBUG] instance-1: Callback 0 completed successfully
[DEBUG] instance-1: All callbacks processed

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly 6143ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[DEBUG] instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: SHUTDOWN, senderId: instance-1
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:14:51) { instanceId: [32m'instance-1'[39m }
[DEBUG] instance-2: Destroying leader election instance
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: SHUTDOWN, senderId: instance-2
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: STEP_DOWN, senderId: instance-2
‚ÑπÔ∏è [EventBus] Stopped being leader (06:14:51) { instanceId: [32m'instance-2'[39m }
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=1
[DEBUG] instance-2: Calling callback 0 (attempt 1) with (false, undefined)
[DEBUG] instance-2: Callback 0 completed successfully
[DEBUG] instance-2: All callbacks processed
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:14:51) { instanceId: [32m'instance-2'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[MOCK] Sending to instance 1 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[MOCK] Sending to instance 0 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[MOCK] Sending to instance 0 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[MOCK] Closing BroadcastChannel instance 1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[DEBUG] test-instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] test-instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:14:51) {
  instanceId: [32m'test-instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly 4147ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[DEBUG] test-instance-1: Initial election timeout fired
[DEBUG] test-instance-1: Starting initial election
[DEBUG] test-instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:14:52) { instanceId: [32m'test-instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: ELECTION, senderId: test-instance-1
[DEBUG] test-instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[DEBUG] test-instance-1: Election timeout fired, calling completeElection()
[DEBUG] test-instance-1: completeElection() called, electionInProgress: true
[DEBUG] test-instance-1: Completing election - received 0 responses from: []
[DEBUG] test-instance-1: No responses received, becoming leader
[DEBUG] test-instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] test-instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] test-instance-1: NOW LEADER with priority 100, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: COORDINATOR, senderId: test-instance-1
[DEBUG] test-instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (06:14:53) {
  instanceId: [32m'test-instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'100'[39m
}
[DEBUG] test-instance-1: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[DEBUG] instance-2: Initializing with priority 50
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 1
[MOCK] Added listener to instance 1, total listeners: 1
[DEBUG] instance-2: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:14:54) {
  instanceId: [32m'instance-2'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'50'[39m
}

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[DEBUG] instance-2: Initial election timeout fired
[DEBUG] instance-2: Starting initial election
[DEBUG] instance-2: Starting election with priority 50, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:14:54) { instanceId: [32m'instance-2'[39m, priority: [32m'50'[39m }
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: ELECTION, senderId: instance-2
[DEBUG] instance-2: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[DEBUG] test-instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: SHUTDOWN, senderId: test-instance-1
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: STEP_DOWN, senderId: test-instance-1
‚ÑπÔ∏è [EventBus] Stopped being leader (06:14:54) { instanceId: [32m'test-instance-1'[39m }
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:14:54) { instanceId: [32m'test-instance-1'[39m }
[DEBUG] instance-2: Destroying leader election instance
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: SHUTDOWN, senderId: instance-2
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:14:54) { instanceId: [32m'instance-2'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[MOCK] Sending to instance 0 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[MOCK] Sending to instance 1 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[MOCK] Sending to instance 1 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[MOCK] Sending to instance 0 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[MOCK] Closing BroadcastChannel instance 1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should send regular heartbeats when leader
[DEBUG] test-instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] test-instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:14:54) {
  instanceId: [32m'test-instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements 2817ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should send regular heartbeats when leader
[DEBUG] test-instance-1: Initial election timeout fired
[DEBUG] test-instance-1: Starting initial election
[DEBUG] test-instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:14:55) { instanceId: [32m'test-instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: ELECTION, senderId: test-instance-1
[DEBUG] test-instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should send regular heartbeats when leader
[DEBUG] test-instance-1: Election timeout fired, calling completeElection()
[DEBUG] test-instance-1: completeElection() called, electionInProgress: true
[DEBUG] test-instance-1: Completing election - received 0 responses from: []
[DEBUG] test-instance-1: No responses received, becoming leader
[DEBUG] test-instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] test-instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] test-instance-1: NOW LEADER with priority 100, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: COORDINATOR, senderId: test-instance-1
[DEBUG] test-instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (06:14:56) {
  instanceId: [32m'test-instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'100'[39m
}
[DEBUG] test-instance-1: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should send regular heartbeats when leader
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should send regular heartbeats when leader
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should send regular heartbeats when leader
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should send regular heartbeats when leader
[DEBUG] test-instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: SHUTDOWN, senderId: test-instance-1
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: STEP_DOWN, senderId: test-instance-1
‚ÑπÔ∏è [EventBus] Stopped being leader (06:14:57) { instanceId: [32m'test-instance-1'[39m }
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:14:57) { instanceId: [32m'test-instance-1'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should send regular heartbeats when leader
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-1: Initializing with priority 200
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:14:58) {
  instanceId: [32m'instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'200'[39m
}
[DEBUG] instance-2: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 1
[MOCK] Added listener to instance 1, total listeners: 1
[DEBUG] instance-2: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:14:58) {
  instanceId: [32m'instance-2'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should send regular heartbeats when leader 3231ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-1: Initial election timeout fired
[DEBUG] instance-1: Starting initial election
[DEBUG] instance-1: Starting election with priority 200, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:14:58) { instanceId: [32m'instance-1'[39m, priority: [32m'200'[39m }
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: ELECTION, senderId: instance-1
[DEBUG] instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-2: Initial election timeout fired
[DEBUG] instance-2: Starting initial election
[DEBUG] instance-2: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:14:58) { instanceId: [32m'instance-2'[39m, priority: [32m'100'[39m }
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: ELECTION, senderId: instance-2
[DEBUG] instance-2: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received ELECTION from instance-1, connected instances: [instance-1], wasNew: true
[DEBUG] instance-2: Election comparison - my priority: 100, sender priority: 200, current leader: undefined, am I leader: false
[DEBUG] instance-2: Sender has higher priority (200 > 100), not responding

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received ELECTION from instance-2, connected instances: [instance-2], wasNew: true
[DEBUG] instance-1: Election comparison - my priority: 200, sender priority: 100, current leader: undefined, am I leader: false
[DEBUG] instance-1: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: ELECTION_OK, senderId: instance-1
[DEBUG] instance-1: Responded OK, may start own election later if needed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received ELECTION_OK from instance-1, connected instances: [instance-1], wasNew: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-1: Election timeout fired, calling completeElection()
[DEBUG] instance-1: completeElection() called, electionInProgress: true
[DEBUG] instance-1: Completing election - received 0 responses from: []
[DEBUG] instance-1: No responses received, becoming leader
[DEBUG] instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] instance-1: NOW LEADER with priority 200, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: COORDINATOR, senderId: instance-1
[DEBUG] instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (06:14:59) {
  instanceId: [32m'instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'200'[39m
}
[DEBUG] instance-1: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-2: Election timeout fired, calling completeElection()
[DEBUG] instance-2: completeElection() called, electionInProgress: true
[DEBUG] instance-2: Completing election - received 1 responses from: [instance-1]
[DEBUG] instance-2: Checking responder instance-1 with priority 200 vs my priority 100
[DEBUG] instance-2: Found higher priority responder: instance-1 (200)
[DEBUG] instance-2: Responses from higher priority instances, waiting for coordinator

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received COORDINATOR from instance-1, connected instances: [instance-1], wasNew: false
[DEBUG] instance-2: Processing COORDINATOR message from instance-1 with priority 200
[DEBUG] instance-2: Received coordinator message from instance-1, previousLeader: undefined, wasLeader: false, electionInProgress: false
[DEBUG] instance-2: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (06:14:59) {
  leaderId: [32m'instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  instanceId: [32m'instance-2'[39m
}
[DEBUG] instance-2: Notifying 0 callbacks about leadership change (new leader: instance-1)
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] instance-2: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received HEARTBEAT from instance-1, connected instances: [instance-1], wasNew: false
[DEBUG] instance-2: Received HEARTBEAT from instance-1, currentLeader is instance-1, senderPriority: 200, myPriority: 100
[DEBUG] instance-2: Not challenging leader - myPriority: 100, senderPriority: 200, isCurrentlyLeader: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received HEARTBEAT from instance-1, connected instances: [instance-1], wasNew: false
[DEBUG] instance-2: Received HEARTBEAT from instance-1, currentLeader is instance-1, senderPriority: 200, myPriority: 100
[DEBUG] instance-2: Not challenging leader - myPriority: 100, senderPriority: 200, isCurrentlyLeader: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: SHUTDOWN, senderId: instance-1
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: STEP_DOWN, senderId: instance-1
‚ÑπÔ∏è [EventBus] Stopped being leader (06:15:00) { instanceId: [32m'instance-1'[39m }
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] instance-1: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:15:00) { instanceId: [32m'instance-1'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received SHUTDOWN from instance-1, connected instances: [instance-1], wasNew: false
[DEBUG] instance-2: Received shutdown notification from instance-1
‚ÑπÔ∏è [EventBus] Instance shutdown detected (06:15:00) { shutdownInstanceId: [32m'instance-1'[39m, instanceId: [32m'instance-2'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received STEP_DOWN from instance-1, connected instances: [instance-1], wasNew: true

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-2: Starting election with priority 100, participationCount: 2
‚ÑπÔ∏è [EventBus] Starting leader election (06:15:00) { instanceId: [32m'instance-2'[39m, priority: [32m'100'[39m }
[MOCK] Instance 1 broadcasting to 0 other instances. Message type: ELECTION, senderId: instance-2
[DEBUG] instance-2: Setting election timeout for 1000ms

stderr | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
‚ö†Ô∏è [EventBus] Leader heartbeat timeout, starting election (06:15:01) { currentLeader: [32m'undefined'[39m, instanceId: [32m'instance-2'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-2: Cannot start election - already in progress: true, destroyed: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-2: Election timeout fired, calling completeElection()
[DEBUG] instance-2: completeElection() called, electionInProgress: true
[DEBUG] instance-2: Completing election - received 0 responses from: []
[DEBUG] instance-2: No responses received, becoming leader
[DEBUG] instance-2: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] instance-2: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=instance-1
[DEBUG] instance-2: NOW LEADER with priority 100, totalElections: 2, isCurrentlyLeader=true
[MOCK] Instance 1 broadcasting to 0 other instances. Message type: COORDINATOR, senderId: instance-2
[DEBUG] instance-2: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (06:15:01) {
  instanceId: [32m'instance-2'[39m,
  previousLeader: [32m'instance-1'[39m,
  priority: [32m'100'[39m
}
[DEBUG] instance-2: Notifying 1 callbacks about leadership change (became leader)
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=true, previousLeader=instance-1, callbacks=1
[DEBUG] instance-2: Calling callback 0 (attempt 1) with (true, instance-1)
[DEBUG] instance-2: Callback 0 completed successfully
[DEBUG] instance-2: All callbacks processed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-2: Sending heartbeat as leader
[MOCK] Instance 1 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-2: Sending heartbeat as leader
[MOCK] Instance 1 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-2: Detected inactive instance: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-2: Sending heartbeat as leader
[MOCK] Instance 1 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-2: Sending heartbeat as leader
[MOCK] Instance 1 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-2: Sending heartbeat as leader
[MOCK] Instance 1 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-2: Destroying leader election instance
[MOCK] Instance 1 broadcasting to 0 other instances. Message type: SHUTDOWN, senderId: instance-2
[MOCK] Instance 1 broadcasting to 0 other instances. Message type: STEP_DOWN, senderId: instance-2
‚ÑπÔ∏è [EventBus] Stopped being leader (06:15:04) { instanceId: [32m'instance-2'[39m }
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=1
[DEBUG] instance-2: Calling callback 0 (attempt 1) with (false, undefined)
[DEBUG] instance-2: Callback 0 completed successfully
[DEBUG] instance-2: All callbacks processed
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:15:04) { instanceId: [32m'instance-2'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[MOCK] Closing BroadcastChannel instance 1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should handle missing heartbeats gracefully
[DEBUG] test-instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] test-instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:15:04) {
  instanceId: [32m'test-instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election 6648ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should handle missing heartbeats gracefully
[DEBUG] test-instance-1: Initial election timeout fired
[DEBUG] test-instance-1: Starting initial election
[DEBUG] test-instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:15:04) { instanceId: [32m'test-instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: ELECTION, senderId: test-instance-1
[DEBUG] test-instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should handle missing heartbeats gracefully
[DEBUG] test-instance-1: Election timeout fired, calling completeElection()
[DEBUG] test-instance-1: completeElection() called, electionInProgress: true
[DEBUG] test-instance-1: Completing election - received 0 responses from: []
[DEBUG] test-instance-1: No responses received, becoming leader
[DEBUG] test-instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] test-instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] test-instance-1: NOW LEADER with priority 100, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: COORDINATOR, senderId: test-instance-1
[DEBUG] test-instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (06:15:05) {
  instanceId: [32m'test-instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'100'[39m
}
[DEBUG] test-instance-1: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should handle missing heartbeats gracefully
[DEBUG] test-instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: SHUTDOWN, senderId: test-instance-1
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: STEP_DOWN, senderId: test-instance-1
‚ÑπÔ∏è [EventBus] Stopped being leader (06:15:06) { instanceId: [32m'test-instance-1'[39m }
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:15:06) { instanceId: [32m'test-instance-1'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should handle missing heartbeats gracefully
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[DEBUG] instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:15:06) {
  instanceId: [32m'instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should handle missing heartbeats gracefully 1623ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[DEBUG] instance-1: Initial election timeout fired
[DEBUG] instance-1: Starting initial election
[DEBUG] instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:15:06) { instanceId: [32m'instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: ELECTION, senderId: instance-1
[DEBUG] instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ÑπÔ∏è [Security] Request rate limit check passed (06:14:36) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'98'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757798076605_eqtnvt7msmxm'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:985:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:445:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1255:7[90m)[39m

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[DEBUG] instance-1: Election timeout fired, calling completeElection()
[DEBUG] instance-1: completeElection() called, electionInProgress: true
[DEBUG] instance-1: Completing election - received 0 responses from: []
[DEBUG] instance-1: No responses received, becoming leader
[DEBUG] instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] instance-1: NOW LEADER with priority 100, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: COORDINATOR, senderId: instance-1
[DEBUG] instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (06:15:07) {
  instanceId: [32m'instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'100'[39m
}
[DEBUG] instance-1: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[DEBUG] instance-2: Initializing with priority 200
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 1
[MOCK] Added listener to instance 1, total listeners: 1
[DEBUG] instance-2: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:15:08) {
  instanceId: [32m'instance-2'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'200'[39m
}

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[DEBUG] instance-2: Initial election timeout fired
[DEBUG] instance-2: Starting initial election
[DEBUG] instance-2: Starting election with priority 200, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:15:09) { instanceId: [32m'instance-2'[39m, priority: [32m'200'[39m }
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: ELECTION, senderId: instance-2
[DEBUG] instance-2: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received ELECTION from instance-2, connected instances: [instance-2], wasNew: true
[DEBUG] instance-1: Election comparison - my priority: 100, sender priority: 200, current leader: instance-1, am I leader: true
[DEBUG] instance-1: Sender has higher priority (200 > 100), not responding

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received HEARTBEAT from instance-1, connected instances: [instance-1], wasNew: true
[DEBUG] instance-2: Received HEARTBEAT from instance-1, currentLeader is undefined, senderPriority: 100, myPriority: 200
[DEBUG] instance-2: Received heartbeat from unknown leader instance-1 (priority 100), considering as current leader

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received HEARTBEAT from instance-1, connected instances: [instance-1], wasNew: false
[DEBUG] instance-2: Received HEARTBEAT from instance-1, currentLeader is instance-1, senderPriority: 100, myPriority: 200
[DEBUG] instance-2: Detected leader instance-1 with lower priority (100 < 200), checking if challenge needed
[DEBUG] instance-2: Already in election process, not restarting challenge (this prevents infinite loops)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[DEBUG] instance-2: Election timeout fired, calling completeElection()
[DEBUG] instance-2: completeElection() called, electionInProgress: true
[DEBUG] instance-2: Completing election - received 0 responses from: []
[DEBUG] instance-2: No responses received, becoming leader
[DEBUG] instance-2: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=instance-1
[DEBUG] instance-2: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=instance-1
[DEBUG] instance-2: NOW LEADER with priority 200, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: COORDINATOR, senderId: instance-2
[DEBUG] instance-2: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (06:15:10) {
  instanceId: [32m'instance-2'[39m,
  previousLeader: [32m'instance-1'[39m,
  priority: [32m'200'[39m
}
[DEBUG] instance-2: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=true, previousLeader=instance-1, callbacks=0
[DEBUG] instance-2: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received COORDINATOR from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-1: Processing COORDINATOR message from instance-2 with priority 200
[DEBUG] instance-1: Received coordinator message from instance-2, previousLeader: instance-1, wasLeader: true, electionInProgress: false
[DEBUG] instance-1: Stepping down from leadership
‚ÑπÔ∏è [EventBus] Stopped being leader (06:15:10) { instanceId: [32m'instance-1'[39m }
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] instance-1: No callbacks registered
[DEBUG] instance-1: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (06:15:10) {
  leaderId: [32m'instance-2'[39m,
  previousLeader: [32m'instance-1'[39m,
  instanceId: [32m'instance-1'[39m
}
[DEBUG] instance-1: Notifying 0 callbacks about leadership change (new leader: instance-2)
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=instance-1, callbacks=0
[DEBUG] instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[DEBUG] instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: SHUTDOWN, senderId: instance-1
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:15:10) { instanceId: [32m'instance-1'[39m }
[DEBUG] instance-2: Destroying leader election instance
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: SHUTDOWN, senderId: instance-2
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: STEP_DOWN, senderId: instance-2
‚ÑπÔ∏è [EventBus] Stopped being leader (06:15:10) { instanceId: [32m'instance-2'[39m }
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] instance-2: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:15:10) { instanceId: [32m'instance-2'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[MOCK] Sending to instance 1 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[MOCK] Sending to instance 0 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[MOCK] Sending to instance 0 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[MOCK] Closing BroadcastChannel instance 1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully
[DEBUG] instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:15:10) {
  instanceId: [32m'instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}
[DEBUG] instance-2: Initializing with priority 200
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 1
[MOCK] Added listener to instance 1, total listeners: 1
[DEBUG] instance-2: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:15:10) {
  instanceId: [32m'instance-2'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'200'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances 4137ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully
[DEBUG] instance-1: Initial election timeout fired
[DEBUG] instance-1: Starting initial election
[DEBUG] instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:15:10) { instanceId: [32m'instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: ELECTION, senderId: instance-1
[DEBUG] instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully
[DEBUG] instance-2: Initial election timeout fired
[DEBUG] instance-2: Starting initial election
[DEBUG] instance-2: Starting election with priority 200, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:15:10) { instanceId: [32m'instance-2'[39m, priority: [32m'200'[39m }
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: ELECTION, senderId: instance-2
[DEBUG] instance-2: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully
[DEBUG] instance-2: Destroying leader election instance
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: SHUTDOWN, senderId: instance-2
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:15:10) { instanceId: [32m'instance-2'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully
[MOCK] Sending to instance 1 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received ELECTION from instance-2, connected instances: [instance-2], wasNew: true
[DEBUG] instance-1: Election comparison - my priority: 100, sender priority: 200, current leader: undefined, am I leader: false
[DEBUG] instance-1: Sender has higher priority (200 > 100), not responding

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received SHUTDOWN from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-1: Received shutdown notification from instance-2
‚ÑπÔ∏è [EventBus] Instance shutdown detected (06:15:10) { shutdownInstanceId: [32m'instance-2'[39m, instanceId: [32m'instance-1'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully
[MOCK] Closing BroadcastChannel instance 1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully
[DEBUG] instance-1: Election timeout fired, calling completeElection()
[DEBUG] instance-1: completeElection() called, electionInProgress: true
[DEBUG] instance-1: Completing election - received 0 responses from: []
[DEBUG] instance-1: No responses received, becoming leader
[DEBUG] instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] instance-1: NOW LEADER with priority 100, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: COORDINATOR, senderId: instance-1
[DEBUG] instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (06:15:11) {
  instanceId: [32m'instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'100'[39m
}
[DEBUG] instance-1: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully
[DEBUG] instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: SHUTDOWN, senderId: instance-1
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: STEP_DOWN, senderId: instance-1
‚ÑπÔ∏è [EventBus] Stopped being leader (06:15:13) { instanceId: [32m'instance-1'[39m }
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] instance-1: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:15:13) { instanceId: [32m'instance-1'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] test-instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:15:13) {
  instanceId: [32m'test-instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully 2828ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Initial election timeout fired
[DEBUG] test-instance-1: Starting initial election
[DEBUG] test-instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:15:13) { instanceId: [32m'test-instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: ELECTION, senderId: test-instance-1
[DEBUG] test-instance-1: Setting election timeout for 200ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Election timeout fired, calling completeElection()
[DEBUG] test-instance-1: completeElection() called, electionInProgress: true
[DEBUG] test-instance-1: Completing election - received 0 responses from: []
[DEBUG] test-instance-1: No responses received, becoming leader
[DEBUG] test-instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] test-instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] test-instance-1: NOW LEADER with priority 100, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: COORDINATOR, senderId: test-instance-1
[DEBUG] test-instance-1: Starting heartbeat with interval 100ms
‚ÑπÔ∏è [EventBus] Became leader (06:15:13) {
  instanceId: [32m'test-instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'100'[39m
}
[DEBUG] test-instance-1: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: SHUTDOWN, senderId: test-instance-1
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: STEP_DOWN, senderId: test-instance-1
‚ÑπÔ∏è [EventBus] Stopped being leader (06:15:14) { instanceId: [32m'test-instance-1'[39m }
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:15:14) { instanceId: [32m'test-instance-1'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle BroadcastChannel errors gracefully
[DEBUG] test-instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] test-instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:15:14) {
  instanceId: [32m'test-instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances 1609ms
stderr | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle BroadcastChannel errors gracefully
[DEBUG] test-instance-1: Failed to send message: Error: Channel error
    at MockBroadcastChannel.<anonymous> [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\__tests__\BrowserLeaderElection.test.ts:387:15[90m)[39m
    at MockBroadcastChannel.mockCall [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+spy@3.2.4/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at MockBroadcastChannel.postMessage [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/tinyspy@4.0.3/node_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at BrowserLeaderElection.sendMessage [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\BrowserLeaderElection.ts:860:29[90m)[39m
    at BrowserLeaderElection.startElection [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\BrowserLeaderElection.ts:539:10[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\BrowserLeaderElection.ts:507:14[90m)[39m
[90m    at listOnTimeout (node:internal/timers:608:17)[39m
[90m    at processTimers (node:internal/timers:543:7)[39m
‚ùå [EventBus] Failed to send leader election message (06:15:15) {
  messageType: [32m'ELECTION'[39m,
  error: [32m'Channel error'[39m,
  instanceId: [32m'test-instance-1'[39m
}

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle BroadcastChannel errors gracefully
[DEBUG] test-instance-1: Initial election timeout fired
[DEBUG] test-instance-1: Starting initial election
[DEBUG] test-instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:15:15) { instanceId: [32m'test-instance-1'[39m, priority: [32m'100'[39m }
[DEBUG] test-instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle BroadcastChannel errors gracefully
[DEBUG] test-instance-1: Election timeout fired, calling completeElection()
[DEBUG] test-instance-1: completeElection() called, electionInProgress: true
[DEBUG] test-instance-1: Completing election - received 0 responses from: []
[DEBUG] test-instance-1: No responses received, becoming leader
[DEBUG] test-instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] test-instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] test-instance-1: NOW LEADER with priority 100, totalElections: 1, isCurrentlyLeader=true
[DEBUG] test-instance-1: Communication failure as leader, stepping down
‚ÑπÔ∏è [EventBus] Stopped being leader (06:15:16) { instanceId: [32m'test-instance-1'[39m }
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered
[DEBUG] test-instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (06:15:16) {
  instanceId: [32m'test-instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'100'[39m
}
[DEBUG] test-instance-1: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered

stderr | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle BroadcastChannel errors gracefully
[DEBUG] test-instance-1: Failed to send message: Error: Channel error
    at MockBroadcastChannel.<anonymous> [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\__tests__\BrowserLeaderElection.test.ts:387:15[90m)[39m
    at MockBroadcastChannel.mockCall [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+spy@3.2.4/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at MockBroadcastChannel.postMessage [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/tinyspy@4.0.3/node_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at BrowserLeaderElection.sendMessage [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\BrowserLeaderElection.ts:860:29[90m)[39m
    at BrowserLeaderElection.becomeLeader [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\BrowserLeaderElection.ts:664:10[90m)[39m
    at BrowserLeaderElection.completeElection [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\BrowserLeaderElection.ts:580:12[90m)[39m
    at Timeout.<anonymous> [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\BrowserLeaderElection.ts:554:12[90m)[39m
[90m    at listOnTimeout (node:internal/timers:608:17)[39m
[90m    at processTimers (node:internal/timers:543:7)[39m
‚ùå [EventBus] Failed to send leader election message (06:15:16) {
  messageType: [32m'COORDINATOR'[39m,
  error: [32m'Channel error'[39m,
  instanceId: [32m'test-instance-1'[39m
}

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle BroadcastChannel errors gracefully
[DEBUG] test-instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: SHUTDOWN, senderId: test-instance-1
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:15:17) { instanceId: [32m'test-instance-1'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle BroadcastChannel errors gracefully
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle malformed messages
[DEBUG] test-instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] test-instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:15:17) {
  instanceId: [32m'test-instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle BroadcastChannel errors gracefully 2625ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle malformed messages
[DEBUG] test-instance-1: Initial election timeout fired
[DEBUG] test-instance-1: Starting initial election
[DEBUG] test-instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:15:17) { instanceId: [32m'test-instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: ELECTION, senderId: test-instance-1
[DEBUG] test-instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle malformed messages
[DEBUG] test-instance-1: Election timeout fired, calling completeElection()
[DEBUG] test-instance-1: completeElection() called, electionInProgress: true
[DEBUG] test-instance-1: Completing election - received 0 responses from: []
[DEBUG] test-instance-1: No responses received, becoming leader
[DEBUG] test-instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] test-instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] test-instance-1: NOW LEADER with priority 100, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: COORDINATOR, senderId: test-instance-1
[DEBUG] test-instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (06:15:18) {
  instanceId: [32m'test-instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'100'[39m
}
[DEBUG] test-instance-1: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle malformed messages
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle malformed messages
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle malformed messages
[DEBUG] test-instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: SHUTDOWN, senderId: test-instance-1
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: STEP_DOWN, senderId: test-instance-1
‚ÑπÔ∏è [EventBus] Stopped being leader (06:15:20) { instanceId: [32m'test-instance-1'[39m }
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:15:20) { instanceId: [32m'test-instance-1'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle malformed messages
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[DEBUG] rapid-instance-0: Initializing with priority 670.7579956761921
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] rapid-instance-0: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:15:20) {
  instanceId: [32m'rapid-instance-0'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'670.7579956761921'[39m
}
[DEBUG] rapid-instance-1: Initializing with priority 803.7746271770328
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 1
[MOCK] Added listener to instance 1, total listeners: 1
[DEBUG] rapid-instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:15:20) {
  instanceId: [32m'rapid-instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'803.7746271770328'[39m
}
[DEBUG] rapid-instance-2: Initializing with priority 310.36962989075846
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 2
[MOCK] Added listener to instance 2, total listeners: 1
[DEBUG] rapid-instance-2: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:15:20) {
  instanceId: [32m'rapid-instance-2'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'310.36962989075846'[39m
}
[DEBUG] rapid-instance-3: Initializing with priority 618.6014548523365
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 3
[MOCK] Added listener to instance 3, total listeners: 1
[DEBUG] rapid-instance-3: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:15:20) {
  instanceId: [32m'rapid-instance-3'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'618.6014548523365'[39m
}
[DEBUG] rapid-instance-4: Initializing with priority 764.2526713001487
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 4
[MOCK] Added listener to instance 4, total listeners: 1
[DEBUG] rapid-instance-4: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:15:20) {
  instanceId: [32m'rapid-instance-4'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'764.2526713001487'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle malformed messages 2628ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[DEBUG] rapid-instance-0: Initial election timeout fired
[DEBUG] rapid-instance-0: Starting initial election
[DEBUG] rapid-instance-0: Starting election with priority 670.7579956761921, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:15:20) { instanceId: [32m'rapid-instance-0'[39m, priority: [32m'670.7579956761921'[39m }
[MOCK] Instance 0 broadcasting to 4 other instances. Message type: ELECTION, senderId: rapid-instance-0
[DEBUG] rapid-instance-0: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] rapid-instance-1: Received ELECTION from rapid-instance-0, connected instances: [rapid-instance-0], wasNew: true
[DEBUG] rapid-instance-1: Election comparison - my priority: 803.7746271770328, sender priority: 670.7579956761921, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-1: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 1 broadcasting to 4 other instances. Message type: ELECTION_OK, senderId: rapid-instance-1
[DEBUG] rapid-instance-1: Responded OK, may start own election later if needed
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received ELECTION from rapid-instance-0, connected instances: [rapid-instance-0], wasNew: true
[DEBUG] rapid-instance-2: Election comparison - my priority: 310.36962989075846, sender priority: 670.7579956761921, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-2: Sender has higher priority (670.7579956761921 > 310.36962989075846), not responding
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received ELECTION from rapid-instance-0, connected instances: [rapid-instance-0], wasNew: true
[DEBUG] rapid-instance-3: Election comparison - my priority: 618.6014548523365, sender priority: 670.7579956761921, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-3: Sender has higher priority (670.7579956761921 > 618.6014548523365), not responding
[MOCK] Sending to instance 4 (1 listeners)
[DEBUG] rapid-instance-4: Received ELECTION from rapid-instance-0, connected instances: [rapid-instance-0], wasNew: true
[DEBUG] rapid-instance-4: Election comparison - my priority: 764.2526713001487, sender priority: 670.7579956761921, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-4: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 4 broadcasting to 4 other instances. Message type: ELECTION_OK, senderId: rapid-instance-4
[DEBUG] rapid-instance-4: Responded OK, may start own election later if needed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[DEBUG] rapid-instance-1: Initial election timeout fired
[DEBUG] rapid-instance-1: Starting initial election
[DEBUG] rapid-instance-1: Starting election with priority 803.7746271770328, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:15:20) { instanceId: [32m'rapid-instance-1'[39m, priority: [32m'803.7746271770328'[39m }
[MOCK] Instance 1 broadcasting to 4 other instances. Message type: ELECTION, senderId: rapid-instance-1
[DEBUG] rapid-instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[DEBUG] rapid-instance-2: Initial election timeout fired
[DEBUG] rapid-instance-2: Starting initial election
[DEBUG] rapid-instance-2: Starting election with priority 310.36962989075846, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:15:20) { instanceId: [32m'rapid-instance-2'[39m, priority: [32m'310.36962989075846'[39m }
[MOCK] Instance 2 broadcasting to 4 other instances. Message type: ELECTION, senderId: rapid-instance-2
[DEBUG] rapid-instance-2: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[DEBUG] rapid-instance-3: Initial election timeout fired
[DEBUG] rapid-instance-3: Starting initial election
[DEBUG] rapid-instance-3: Starting election with priority 618.6014548523365, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:15:20) { instanceId: [32m'rapid-instance-3'[39m, priority: [32m'618.6014548523365'[39m }
[MOCK] Instance 3 broadcasting to 4 other instances. Message type: ELECTION, senderId: rapid-instance-3
[DEBUG] rapid-instance-3: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[DEBUG] rapid-instance-4: Initial election timeout fired
[DEBUG] rapid-instance-4: Starting initial election
[DEBUG] rapid-instance-4: Starting election with priority 764.2526713001487, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:15:20) { instanceId: [32m'rapid-instance-4'[39m, priority: [32m'764.2526713001487'[39m }
[MOCK] Instance 4 broadcasting to 4 other instances. Message type: ELECTION, senderId: rapid-instance-4
[DEBUG] rapid-instance-4: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received ELECTION_OK from rapid-instance-1, connected instances: [rapid-instance-1], wasNew: true
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received ELECTION_OK from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1], wasNew: true
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received ELECTION_OK from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1], wasNew: true
[MOCK] Sending to instance 4 (1 listeners)
[DEBUG] rapid-instance-4: Received ELECTION_OK from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1], wasNew: true

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-1, rapid-instance-4], wasNew: true
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] rapid-instance-1: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-4], wasNew: true
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-4], wasNew: true
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-4], wasNew: true

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received ELECTION from rapid-instance-1, connected instances: [rapid-instance-1, rapid-instance-4], wasNew: false
[DEBUG] rapid-instance-0: Election comparison - my priority: 670.7579956761921, sender priority: 803.7746271770328, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-0: Sender has higher priority (803.7746271770328 > 670.7579956761921), not responding
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received ELECTION from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-4], wasNew: false
[DEBUG] rapid-instance-2: Election comparison - my priority: 310.36962989075846, sender priority: 803.7746271770328, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-2: Sender has higher priority (803.7746271770328 > 310.36962989075846), not responding
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received ELECTION from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-4], wasNew: false
[DEBUG] rapid-instance-3: Election comparison - my priority: 618.6014548523365, sender priority: 803.7746271770328, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-3: Sender has higher priority (803.7746271770328 > 618.6014548523365), not responding
[MOCK] Sending to instance 4 (1 listeners)
[DEBUG] rapid-instance-4: Received ELECTION from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1], wasNew: false
[DEBUG] rapid-instance-4: Election comparison - my priority: 764.2526713001487, sender priority: 803.7746271770328, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-4: Sender has higher priority (803.7746271770328 > 764.2526713001487), not responding

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received ELECTION from rapid-instance-2, connected instances: [rapid-instance-1, rapid-instance-4, rapid-instance-2], wasNew: true
[DEBUG] rapid-instance-0: Election comparison - my priority: 670.7579956761921, sender priority: 310.36962989075846, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-0: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 0 broadcasting to 4 other instances. Message type: ELECTION_OK, senderId: rapid-instance-0
[DEBUG] rapid-instance-0: Responded OK, may start own election later if needed
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] rapid-instance-1: Received ELECTION from rapid-instance-2, connected instances: [rapid-instance-0, rapid-instance-4, rapid-instance-2], wasNew: true
[DEBUG] rapid-instance-1: Election comparison - my priority: 803.7746271770328, sender priority: 310.36962989075846, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-1: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 1 broadcasting to 4 other instances. Message type: ELECTION_OK, senderId: rapid-instance-1
[DEBUG] rapid-instance-1: Responded OK, may start own election later if needed
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received ELECTION from rapid-instance-2, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-4, rapid-instance-2], wasNew: true
[DEBUG] rapid-instance-3: Election comparison - my priority: 618.6014548523365, sender priority: 310.36962989075846, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-3: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 3 broadcasting to 4 other instances. Message type: ELECTION_OK, senderId: rapid-instance-3
[DEBUG] rapid-instance-3: Responded OK, may start own election later if needed
[MOCK] Sending to instance 4 (1 listeners)
[DEBUG] rapid-instance-4: Received ELECTION from rapid-instance-2, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2], wasNew: true
[DEBUG] rapid-instance-4: Election comparison - my priority: 764.2526713001487, sender priority: 310.36962989075846, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-4: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 4 broadcasting to 4 other instances. Message type: ELECTION_OK, senderId: rapid-instance-4
[DEBUG] rapid-instance-4: Responded OK, may start own election later if needed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received ELECTION from rapid-instance-3, connected instances: [rapid-instance-1, rapid-instance-4, rapid-instance-2, rapid-instance-3], wasNew: true
[DEBUG] rapid-instance-0: Election comparison - my priority: 670.7579956761921, sender priority: 618.6014548523365, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-0: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 0 broadcasting to 4 other instances. Message type: ELECTION_OK, senderId: rapid-instance-0
[DEBUG] rapid-instance-0: Responded OK, may start own election later if needed
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] rapid-instance-1: Received ELECTION from rapid-instance-3, connected instances: [rapid-instance-0, rapid-instance-4, rapid-instance-2, rapid-instance-3], wasNew: true
[DEBUG] rapid-instance-1: Election comparison - my priority: 803.7746271770328, sender priority: 618.6014548523365, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-1: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 1 broadcasting to 4 other instances. Message type: ELECTION_OK, senderId: rapid-instance-1
[DEBUG] rapid-instance-1: Responded OK, may start own election later if needed
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received ELECTION from rapid-instance-3, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-4, rapid-instance-3], wasNew: true
[DEBUG] rapid-instance-2: Election comparison - my priority: 310.36962989075846, sender priority: 618.6014548523365, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-2: Sender has higher priority (618.6014548523365 > 310.36962989075846), not responding
[MOCK] Sending to instance 4 (1 listeners)
[DEBUG] rapid-instance-4: Received ELECTION from rapid-instance-3, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2, rapid-instance-3], wasNew: true
[DEBUG] rapid-instance-4: Election comparison - my priority: 764.2526713001487, sender priority: 618.6014548523365, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-4: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 4 broadcasting to 4 other instances. Message type: ELECTION_OK, senderId: rapid-instance-4
[DEBUG] rapid-instance-4: Responded OK, may start own election later if needed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received ELECTION from rapid-instance-4, connected instances: [rapid-instance-1, rapid-instance-4, rapid-instance-2, rapid-instance-3], wasNew: false
[DEBUG] rapid-instance-0: Election comparison - my priority: 670.7579956761921, sender priority: 764.2526713001487, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-0: Sender has higher priority (764.2526713001487 > 670.7579956761921), not responding
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] rapid-instance-1: Received ELECTION from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-4, rapid-instance-2, rapid-instance-3], wasNew: false
[DEBUG] rapid-instance-1: Election comparison - my priority: 803.7746271770328, sender priority: 764.2526713001487, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-1: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 1 broadcasting to 4 other instances. Message type: ELECTION_OK, senderId: rapid-instance-1
[DEBUG] rapid-instance-1: Responded OK, may start own election later if needed
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received ELECTION from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-4, rapid-instance-3], wasNew: false
[DEBUG] rapid-instance-2: Election comparison - my priority: 310.36962989075846, sender priority: 764.2526713001487, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-2: Sender has higher priority (764.2526713001487 > 310.36962989075846), not responding
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received ELECTION from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-4, rapid-instance-2], wasNew: false
[DEBUG] rapid-instance-3: Election comparison - my priority: 618.6014548523365, sender priority: 764.2526713001487, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-3: Sender has higher priority (764.2526713001487 > 618.6014548523365), not responding

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] rapid-instance-1: Received ELECTION_OK from rapid-instance-0, connected instances: [rapid-instance-0, rapid-instance-4, rapid-instance-2, rapid-instance-3], wasNew: false
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received ELECTION_OK from rapid-instance-0, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-4, rapid-instance-3], wasNew: false
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received ELECTION_OK from rapid-instance-0, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-4, rapid-instance-2], wasNew: false
[MOCK] Sending to instance 4 (1 listeners)
[DEBUG] rapid-instance-4: Received ELECTION_OK from rapid-instance-0, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2, rapid-instance-3], wasNew: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received ELECTION_OK from rapid-instance-1, connected instances: [rapid-instance-1, rapid-instance-4, rapid-instance-2, rapid-instance-3], wasNew: false
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received ELECTION_OK from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-4, rapid-instance-3], wasNew: false
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received ELECTION_OK from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-4, rapid-instance-2], wasNew: false
[MOCK] Sending to instance 4 (1 listeners)
[DEBUG] rapid-instance-4: Received ELECTION_OK from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2, rapid-instance-3], wasNew: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received ELECTION_OK from rapid-instance-3, connected instances: [rapid-instance-1, rapid-instance-4, rapid-instance-2, rapid-instance-3], wasNew: false
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] rapid-instance-1: Received ELECTION_OK from rapid-instance-3, connected instances: [rapid-instance-0, rapid-instance-4, rapid-instance-2, rapid-instance-3], wasNew: false
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received ELECTION_OK from rapid-instance-3, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-4, rapid-instance-3], wasNew: false
[MOCK] Sending to instance 4 (1 listeners)
[DEBUG] rapid-instance-4: Received ELECTION_OK from rapid-instance-3, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2, rapid-instance-3], wasNew: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-1, rapid-instance-4, rapid-instance-2, rapid-instance-3], wasNew: false
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] rapid-instance-1: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-4, rapid-instance-2, rapid-instance-3], wasNew: false
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-4, rapid-instance-3], wasNew: false
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-4, rapid-instance-2], wasNew: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] rapid-instance-1: Received ELECTION_OK from rapid-instance-0, connected instances: [rapid-instance-0, rapid-instance-4, rapid-instance-2, rapid-instance-3], wasNew: false
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received ELECTION_OK from rapid-instance-0, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-4, rapid-instance-3], wasNew: false
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received ELECTION_OK from rapid-instance-0, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-4, rapid-instance-2], wasNew: false
[MOCK] Sending to instance 4 (1 listeners)
[DEBUG] rapid-instance-4: Received ELECTION_OK from rapid-instance-0, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2, rapid-instance-3], wasNew: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received ELECTION_OK from rapid-instance-1, connected instances: [rapid-instance-1, rapid-instance-4, rapid-instance-2, rapid-instance-3], wasNew: false
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received ELECTION_OK from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-4, rapid-instance-3], wasNew: false
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received ELECTION_OK from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-4, rapid-instance-2], wasNew: false
[MOCK] Sending to instance 4 (1 listeners)
[DEBUG] rapid-instance-4: Received ELECTION_OK from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2, rapid-instance-3], wasNew: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-1, rapid-instance-4, rapid-instance-2, rapid-instance-3], wasNew: false
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] rapid-instance-1: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-4, rapid-instance-2, rapid-instance-3], wasNew: false
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-4, rapid-instance-3], wasNew: false
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-4, rapid-instance-2], wasNew: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received ELECTION_OK from rapid-instance-1, connected instances: [rapid-instance-1, rapid-instance-4, rapid-instance-2, rapid-instance-3], wasNew: false
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received ELECTION_OK from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-4, rapid-instance-3], wasNew: false
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received ELECTION_OK from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-4, rapid-instance-2], wasNew: false
[MOCK] Sending to instance 4 (1 listeners)
[DEBUG] rapid-instance-4: Received ELECTION_OK from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2, rapid-instance-3], wasNew: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[DEBUG] rapid-instance-0: Election timeout fired, calling completeElection()
[DEBUG] rapid-instance-0: completeElection() called, electionInProgress: true
[DEBUG] rapid-instance-0: Completing election - received 3 responses from: [rapid-instance-1, rapid-instance-4, rapid-instance-3]
[DEBUG] rapid-instance-0: Checking responder rapid-instance-1 with priority 803.7746271770328 vs my priority 670.7579956761921
[DEBUG] rapid-instance-0: Found higher priority responder: rapid-instance-1 (803.7746271770328)
[DEBUG] rapid-instance-0: Responses from higher priority instances, waiting for coordinator

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[DEBUG] rapid-instance-1: Election timeout fired, calling completeElection()
[DEBUG] rapid-instance-1: completeElection() called, electionInProgress: true
[DEBUG] rapid-instance-1: Completing election - received 3 responses from: [rapid-instance-4, rapid-instance-0, rapid-instance-3]
[DEBUG] rapid-instance-1: Checking responder rapid-instance-4 with priority 764.2526713001487 vs my priority 803.7746271770328
[DEBUG] rapid-instance-1: Checking responder rapid-instance-0 with priority 670.7579956761921 vs my priority 803.7746271770328
[DEBUG] rapid-instance-1: Checking responder rapid-instance-3 with priority 618.6014548523365 vs my priority 803.7746271770328
[DEBUG] rapid-instance-1: All responders have lower priority, becoming leader
[DEBUG] rapid-instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] rapid-instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] rapid-instance-1: NOW LEADER with priority 803.7746271770328, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 1 broadcasting to 4 other instances. Message type: COORDINATOR, senderId: rapid-instance-1
[DEBUG] rapid-instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (06:15:21) {
  instanceId: [32m'rapid-instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'803.7746271770328'[39m
}
[DEBUG] rapid-instance-1: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] rapid-instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] rapid-instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[DEBUG] rapid-instance-2: Election timeout fired, calling completeElection()
[DEBUG] rapid-instance-2: completeElection() called, electionInProgress: true
[DEBUG] rapid-instance-2: Completing election - received 4 responses from: [rapid-instance-1, rapid-instance-4, rapid-instance-0, rapid-instance-3]
[DEBUG] rapid-instance-2: Checking responder rapid-instance-1 with priority 803.7746271770328 vs my priority 310.36962989075846
[DEBUG] rapid-instance-2: Found higher priority responder: rapid-instance-1 (803.7746271770328)
[DEBUG] rapid-instance-2: Responses from higher priority instances, waiting for coordinator

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[DEBUG] rapid-instance-3: Election timeout fired, calling completeElection()
[DEBUG] rapid-instance-3: completeElection() called, electionInProgress: true
[DEBUG] rapid-instance-3: Completing election - received 3 responses from: [rapid-instance-1, rapid-instance-4, rapid-instance-0]
[DEBUG] rapid-instance-3: Checking responder rapid-instance-1 with priority 803.7746271770328 vs my priority 618.6014548523365
[DEBUG] rapid-instance-3: Found higher priority responder: rapid-instance-1 (803.7746271770328)
[DEBUG] rapid-instance-3: Responses from higher priority instances, waiting for coordinator

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[DEBUG] rapid-instance-4: Election timeout fired, calling completeElection()
[DEBUG] rapid-instance-4: completeElection() called, electionInProgress: true
[DEBUG] rapid-instance-4: Completing election - received 3 responses from: [rapid-instance-1, rapid-instance-0, rapid-instance-3]
[DEBUG] rapid-instance-4: Checking responder rapid-instance-1 with priority 803.7746271770328 vs my priority 764.2526713001487
[DEBUG] rapid-instance-4: Found higher priority responder: rapid-instance-1 (803.7746271770328)
[DEBUG] rapid-instance-4: Responses from higher priority instances, waiting for coordinator

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received COORDINATOR from rapid-instance-1, connected instances: [rapid-instance-1, rapid-instance-4, rapid-instance-2, rapid-instance-3], wasNew: false
[DEBUG] rapid-instance-0: Processing COORDINATOR message from rapid-instance-1 with priority 803.7746271770328
[DEBUG] rapid-instance-0: Received coordinator message from rapid-instance-1, previousLeader: undefined, wasLeader: false, electionInProgress: false
[DEBUG] rapid-instance-0: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (06:15:21) {
  leaderId: [32m'rapid-instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  instanceId: [32m'rapid-instance-0'[39m
}
[DEBUG] rapid-instance-0: Notifying 0 callbacks about leadership change (new leader: rapid-instance-1)
[DEBUG] rapid-instance-0: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] rapid-instance-0: No callbacks registered
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received COORDINATOR from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-4, rapid-instance-3], wasNew: false
[DEBUG] rapid-instance-2: Processing COORDINATOR message from rapid-instance-1 with priority 803.7746271770328
[DEBUG] rapid-instance-2: Received coordinator message from rapid-instance-1, previousLeader: undefined, wasLeader: false, electionInProgress: false
[DEBUG] rapid-instance-2: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (06:15:21) {
  leaderId: [32m'rapid-instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  instanceId: [32m'rapid-instance-2'[39m
}
[DEBUG] rapid-instance-2: Notifying 0 callbacks about leadership change (new leader: rapid-instance-1)
[DEBUG] rapid-instance-2: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] rapid-instance-2: No callbacks registered
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received COORDINATOR from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-4, rapid-instance-2], wasNew: false
[DEBUG] rapid-instance-3: Processing COORDINATOR message from rapid-instance-1 with priority 803.7746271770328
[DEBUG] rapid-instance-3: Received coordinator message from rapid-instance-1, previousLeader: undefined, wasLeader: false, electionInProgress: false
[DEBUG] rapid-instance-3: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (06:15:21) {
  leaderId: [32m'rapid-instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  instanceId: [32m'rapid-instance-3'[39m
}
[DEBUG] rapid-instance-3: Notifying 0 callbacks about leadership change (new leader: rapid-instance-1)
[DEBUG] rapid-instance-3: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] rapid-instance-3: No callbacks registered
[MOCK] Sending to instance 4 (1 listeners)
[DEBUG] rapid-instance-4: Received COORDINATOR from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2, rapid-instance-3], wasNew: false
[DEBUG] rapid-instance-4: Processing COORDINATOR message from rapid-instance-1 with priority 803.7746271770328
[DEBUG] rapid-instance-4: Received coordinator message from rapid-instance-1, previousLeader: undefined, wasLeader: false, electionInProgress: false
[DEBUG] rapid-instance-4: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (06:15:21) {
  leaderId: [32m'rapid-instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  instanceId: [32m'rapid-instance-4'[39m
}
[DEBUG] rapid-instance-4: Notifying 0 callbacks about leadership change (new leader: rapid-instance-1)
[DEBUG] rapid-instance-4: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] rapid-instance-4: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[DEBUG] rapid-instance-1: Sending heartbeat as leader
[MOCK] Instance 1 broadcasting to 4 other instances. Message type: HEARTBEAT, senderId: rapid-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received HEARTBEAT from rapid-instance-1, connected instances: [rapid-instance-1, rapid-instance-4, rapid-instance-2, rapid-instance-3], wasNew: false
[DEBUG] rapid-instance-0: Received HEARTBEAT from rapid-instance-1, currentLeader is rapid-instance-1, senderPriority: 803.7746271770328, myPriority: 670.7579956761921
[DEBUG] rapid-instance-0: Not challenging leader - myPriority: 670.7579956761921, senderPriority: 803.7746271770328, isCurrentlyLeader: false
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received HEARTBEAT from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-4, rapid-instance-3], wasNew: false
[DEBUG] rapid-instance-2: Received HEARTBEAT from rapid-instance-1, currentLeader is rapid-instance-1, senderPriority: 803.7746271770328, myPriority: 310.36962989075846
[DEBUG] rapid-instance-2: Not challenging leader - myPriority: 310.36962989075846, senderPriority: 803.7746271770328, isCurrentlyLeader: false
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received HEARTBEAT from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-4, rapid-instance-2], wasNew: false
[DEBUG] rapid-instance-3: Received HEARTBEAT from rapid-instance-1, currentLeader is rapid-instance-1, senderPriority: 803.7746271770328, myPriority: 618.6014548523365
[DEBUG] rapid-instance-3: Not challenging leader - myPriority: 618.6014548523365, senderPriority: 803.7746271770328, isCurrentlyLeader: false
[MOCK] Sending to instance 4 (1 listeners)
[DEBUG] rapid-instance-4: Received HEARTBEAT from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2, rapid-instance-3], wasNew: false
[DEBUG] rapid-instance-4: Received HEARTBEAT from rapid-instance-1, currentLeader is rapid-instance-1, senderPriority: 803.7746271770328, myPriority: 764.2526713001487
[DEBUG] rapid-instance-4: Not challenging leader - myPriority: 764.2526713001487, senderPriority: 803.7746271770328, isCurrentlyLeader: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[DEBUG] rapid-instance-0: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 4 other instances. Message type: SHUTDOWN, senderId: rapid-instance-0
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:15:22) { instanceId: [32m'rapid-instance-0'[39m }
[DEBUG] rapid-instance-1: Destroying leader election instance
[MOCK] Instance 1 broadcasting to 4 other instances. Message type: SHUTDOWN, senderId: rapid-instance-1
[MOCK] Instance 1 broadcasting to 4 other instances. Message type: STEP_DOWN, senderId: rapid-instance-1
‚ÑπÔ∏è [EventBus] Stopped being leader (06:15:22) { instanceId: [32m'rapid-instance-1'[39m }
[DEBUG] rapid-instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] rapid-instance-1: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:15:22) { instanceId: [32m'rapid-instance-1'[39m }
[DEBUG] rapid-instance-2: Destroying leader election instance
[MOCK] Instance 2 broadcasting to 4 other instances. Message type: SHUTDOWN, senderId: rapid-instance-2
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:15:22) { instanceId: [32m'rapid-instance-2'[39m }
[DEBUG] rapid-instance-3: Destroying leader election instance
[MOCK] Instance 3 broadcasting to 4 other instances. Message type: SHUTDOWN, senderId: rapid-instance-3
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:15:22) { instanceId: [32m'rapid-instance-3'[39m }
[DEBUG] rapid-instance-4: Destroying leader election instance
[MOCK] Instance 4 broadcasting to 4 other instances. Message type: SHUTDOWN, senderId: rapid-instance-4
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:15:22) { instanceId: [32m'rapid-instance-4'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 1 (1 listeners)
[MOCK] Sending to instance 2 (1 listeners)
[MOCK] Sending to instance 3 (1 listeners)
[MOCK] Sending to instance 4 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[MOCK] Sending to instance 2 (1 listeners)
[MOCK] Sending to instance 3 (1 listeners)
[MOCK] Sending to instance 4 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[MOCK] Sending to instance 2 (1 listeners)
[MOCK] Sending to instance 3 (1 listeners)
[MOCK] Sending to instance 4 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[MOCK] Sending to instance 1 (1 listeners)
[MOCK] Sending to instance 3 (1 listeners)
[MOCK] Sending to instance 4 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[MOCK] Sending to instance 1 (1 listeners)
[MOCK] Sending to instance 2 (1 listeners)
[MOCK] Sending to instance 4 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[MOCK] Sending to instance 1 (1 listeners)
[MOCK] Sending to instance 2 (1 listeners)
[MOCK] Sending to instance 3 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Closing BroadcastChannel instance 1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Closing BroadcastChannel instance 2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Closing BroadcastChannel instance 3

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Closing BroadcastChannel instance 4

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections 2106ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[DEBUG] instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:15:22) {
  instanceId: [32m'instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[DEBUG] instance-1: Initial election timeout fired
[DEBUG] instance-1: Starting initial election
[DEBUG] instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:15:22) { instanceId: [32m'instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: ELECTION, senderId: instance-1
[DEBUG] instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[DEBUG] instance-1: Election timeout fired, calling completeElection()
[DEBUG] instance-1: completeElection() called, electionInProgress: true
[DEBUG] instance-1: Completing election - received 0 responses from: []
[DEBUG] instance-1: No responses received, becoming leader
[DEBUG] instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] instance-1: NOW LEADER with priority 100, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: COORDINATOR, senderId: instance-1
[DEBUG] instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (06:15:23) {
  instanceId: [32m'instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'100'[39m
}
[DEBUG] instance-1: Notifying 1 callbacks about leadership change (became leader)
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=1
[DEBUG] instance-1: Calling callback 0 (attempt 1) with (true, undefined)
[DEBUG] instance-1: Callback 0 completed successfully
[DEBUG] instance-1: All callbacks processed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[DEBUG] instance-2: Initializing with priority 200
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 1
[MOCK] Added listener to instance 1, total listeners: 1
[DEBUG] instance-2: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:15:24) {
  instanceId: [32m'instance-2'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'200'[39m
}

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[DEBUG] instance-2: Initial election timeout fired
[DEBUG] instance-2: Starting initial election
[DEBUG] instance-2: Starting election with priority 200, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:15:24) { instanceId: [32m'instance-2'[39m, priority: [32m'200'[39m }
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: ELECTION, senderId: instance-2
[DEBUG] instance-2: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received ELECTION from instance-2, connected instances: [instance-2], wasNew: true
[DEBUG] instance-1: Election comparison - my priority: 100, sender priority: 200, current leader: instance-1, am I leader: true
[DEBUG] instance-1: Sender has higher priority (200 > 100), not responding

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received HEARTBEAT from instance-1, connected instances: [instance-1], wasNew: true
[DEBUG] instance-2: Received HEARTBEAT from instance-1, currentLeader is undefined, senderPriority: 100, myPriority: 200
[DEBUG] instance-2: Received heartbeat from unknown leader instance-1 (priority 100), considering as current leader

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received HEARTBEAT from instance-1, connected instances: [instance-1], wasNew: false
[DEBUG] instance-2: Received HEARTBEAT from instance-1, currentLeader is instance-1, senderPriority: 100, myPriority: 200
[DEBUG] instance-2: Detected leader instance-1 with lower priority (100 < 200), checking if challenge needed
[DEBUG] instance-2: Already in election process, not restarting challenge (this prevents infinite loops)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[DEBUG] instance-2: Election timeout fired, calling completeElection()
[DEBUG] instance-2: completeElection() called, electionInProgress: true
[DEBUG] instance-2: Completing election - received 0 responses from: []
[DEBUG] instance-2: No responses received, becoming leader
[DEBUG] instance-2: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=instance-1
[DEBUG] instance-2: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=instance-1
[DEBUG] instance-2: NOW LEADER with priority 200, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: COORDINATOR, senderId: instance-2
[DEBUG] instance-2: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (06:15:25) {
  instanceId: [32m'instance-2'[39m,
  previousLeader: [32m'instance-1'[39m,
  priority: [32m'200'[39m
}
[DEBUG] instance-2: Notifying 1 callbacks about leadership change (became leader)
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=true, previousLeader=instance-1, callbacks=1
[DEBUG] instance-2: Calling callback 0 (attempt 1) with (true, instance-1)
[DEBUG] instance-2: Callback 0 completed successfully
[DEBUG] instance-2: All callbacks processed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received COORDINATOR from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-1: Processing COORDINATOR message from instance-2 with priority 200
[DEBUG] instance-1: Received coordinator message from instance-2, previousLeader: instance-1, wasLeader: true, electionInProgress: false
[DEBUG] instance-1: Stepping down from leadership
‚ÑπÔ∏è [EventBus] Stopped being leader (06:15:25) { instanceId: [32m'instance-1'[39m }
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=1
[DEBUG] instance-1: Calling callback 0 (attempt 1) with (false, undefined)
[DEBUG] instance-1: Callback 0 completed successfully
[DEBUG] instance-1: All callbacks processed
[DEBUG] instance-1: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (06:15:25) {
  leaderId: [32m'instance-2'[39m,
  previousLeader: [32m'instance-1'[39m,
  instanceId: [32m'instance-1'[39m
}
[DEBUG] instance-1: Notifying 1 callbacks about leadership change (new leader: instance-2)
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=instance-1, callbacks=1
[DEBUG] instance-1: Calling callback 0 (attempt 1) with (false, instance-1)
[DEBUG] instance-1: Callback 0 completed successfully
[DEBUG] instance-1: All callbacks processed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[DEBUG] instance-2: Sending heartbeat as leader
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received HEARTBEAT from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-1: Received HEARTBEAT from instance-2, currentLeader is instance-2, senderPriority: 200, myPriority: 100
[DEBUG] instance-1: Not challenging leader - myPriority: 100, senderPriority: 200, isCurrentlyLeader: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[DEBUG] instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: SHUTDOWN, senderId: instance-1
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:15:26) { instanceId: [32m'instance-1'[39m }
[DEBUG] instance-2: Destroying leader election instance
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: SHUTDOWN, senderId: instance-2
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: STEP_DOWN, senderId: instance-2
‚ÑπÔ∏è [EventBus] Stopped being leader (06:15:26) { instanceId: [32m'instance-2'[39m }
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=1
[DEBUG] instance-2: Calling callback 0 (attempt 1) with (false, undefined)
[DEBUG] instance-2: Callback 0 completed successfully
[DEBUG] instance-2: All callbacks processed
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:15:26) { instanceId: [32m'instance-2'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[MOCK] Sending to instance 1 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[MOCK] Sending to instance 0 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[MOCK] Sending to instance 0 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[MOCK] Closing BroadcastChannel instance 1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle leadership duration tracking
[DEBUG] test-instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] test-instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:15:26) {
  instanceId: [32m'test-instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions 4623ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle leadership duration tracking
[DEBUG] test-instance-1: Initial election timeout fired
[DEBUG] test-instance-1: Starting initial election
[DEBUG] test-instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:15:27) { instanceId: [32m'test-instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: ELECTION, senderId: test-instance-1
[DEBUG] test-instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle leadership duration tracking
[DEBUG] test-instance-1: Election timeout fired, calling completeElection()
[DEBUG] test-instance-1: completeElection() called, electionInProgress: true
[DEBUG] test-instance-1: Completing election - received 0 responses from: []
[DEBUG] test-instance-1: No responses received, becoming leader
[DEBUG] test-instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] test-instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] test-instance-1: NOW LEADER with priority 100, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: COORDINATOR, senderId: test-instance-1
[DEBUG] test-instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (06:15:28) {
  instanceId: [32m'test-instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'100'[39m
}
[DEBUG] test-instance-1: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle leadership duration tracking
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle leadership duration tracking
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle leadership duration tracking
[DEBUG] test-instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: SHUTDOWN, senderId: test-instance-1
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: STEP_DOWN, senderId: test-instance-1
‚ÑπÔ∏è [EventBus] Stopped being leader (06:15:29) { instanceId: [32m'test-instance-1'[39m }
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:15:29) { instanceId: [32m'test-instance-1'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle leadership duration tracking
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should provide accurate leadership metrics
[DEBUG] test-instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] test-instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:15:29) {
  instanceId: [32m'test-instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle leadership duration tracking 2825ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should provide accurate leadership metrics
[DEBUG] test-instance-1: Initial election timeout fired
[DEBUG] test-instance-1: Starting initial election
[DEBUG] test-instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:15:29) { instanceId: [32m'test-instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: ELECTION, senderId: test-instance-1
[DEBUG] test-instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should provide accurate leadership metrics
[DEBUG] test-instance-1: Election timeout fired, calling completeElection()
[DEBUG] test-instance-1: completeElection() called, electionInProgress: true
[DEBUG] test-instance-1: Completing election - received 0 responses from: []
[DEBUG] test-instance-1: No responses received, becoming leader
[DEBUG] test-instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] test-instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] test-instance-1: NOW LEADER with priority 100, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: COORDINATOR, senderId: test-instance-1
[DEBUG] test-instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (06:15:30) {
  instanceId: [32m'test-instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'100'[39m
}
[DEBUG] test-instance-1: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should provide accurate leadership metrics
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should provide accurate leadership metrics
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should provide accurate leadership metrics
[DEBUG] test-instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: SHUTDOWN, senderId: test-instance-1
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: STEP_DOWN, senderId: test-instance-1
‚ÑπÔ∏è [EventBus] Stopped being leader (06:15:32) { instanceId: [32m'test-instance-1'[39m }
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:15:32) { instanceId: [32m'test-instance-1'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should provide accurate leadership metrics
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[DEBUG] stats-instance-0: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] stats-instance-0: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:15:32) {
  instanceId: [32m'stats-instance-0'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[DEBUG] stats-instance-1: Initializing with priority 200
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 1
[MOCK] Added listener to instance 1, total listeners: 1
[DEBUG] stats-instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:15:32) {
  instanceId: [32m'stats-instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'200'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should provide accurate leadership metrics 2626ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[DEBUG] stats-instance-2: Initializing with priority 300
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 2
[MOCK] Added listener to instance 2, total listeners: 1
[DEBUG] stats-instance-2: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:15:32) {
  instanceId: [32m'stats-instance-2'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'300'[39m
}

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[DEBUG] stats-instance-0: Initial election timeout fired
[DEBUG] stats-instance-0: Starting initial election
[DEBUG] stats-instance-0: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:15:32) { instanceId: [32m'stats-instance-0'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 2 other instances. Message type: ELECTION, senderId: stats-instance-0
[DEBUG] stats-instance-0: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] stats-instance-1: Received ELECTION from stats-instance-0, connected instances: [stats-instance-0], wasNew: true
[DEBUG] stats-instance-1: Election comparison - my priority: 200, sender priority: 100, current leader: undefined, am I leader: false
[DEBUG] stats-instance-1: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 1 broadcasting to 2 other instances. Message type: ELECTION_OK, senderId: stats-instance-1
[DEBUG] stats-instance-1: Responded OK, may start own election later if needed
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] stats-instance-2: Received ELECTION from stats-instance-0, connected instances: [stats-instance-0], wasNew: true
[DEBUG] stats-instance-2: Election comparison - my priority: 300, sender priority: 100, current leader: undefined, am I leader: false
[DEBUG] stats-instance-2: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 2 broadcasting to 2 other instances. Message type: ELECTION_OK, senderId: stats-instance-2
[DEBUG] stats-instance-2: Responded OK, may start own election later if needed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] stats-instance-0: Received ELECTION_OK from stats-instance-1, connected instances: [stats-instance-1], wasNew: true
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] stats-instance-2: Received ELECTION_OK from stats-instance-1, connected instances: [stats-instance-0, stats-instance-1], wasNew: true

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] stats-instance-0: Received ELECTION_OK from stats-instance-2, connected instances: [stats-instance-1, stats-instance-2], wasNew: true
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] stats-instance-1: Received ELECTION_OK from stats-instance-2, connected instances: [stats-instance-0, stats-instance-2], wasNew: true

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[DEBUG] stats-instance-1: Initial election timeout fired
[DEBUG] stats-instance-1: Starting initial election
[DEBUG] stats-instance-1: Starting election with priority 200, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:15:32) { instanceId: [32m'stats-instance-1'[39m, priority: [32m'200'[39m }
[MOCK] Instance 1 broadcasting to 2 other instances. Message type: ELECTION, senderId: stats-instance-1
[DEBUG] stats-instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] stats-instance-0: Received ELECTION from stats-instance-1, connected instances: [stats-instance-1, stats-instance-2], wasNew: false
[DEBUG] stats-instance-0: Election comparison - my priority: 100, sender priority: 200, current leader: undefined, am I leader: false
[DEBUG] stats-instance-0: Sender has higher priority (200 > 100), not responding
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] stats-instance-2: Received ELECTION from stats-instance-1, connected instances: [stats-instance-0, stats-instance-1], wasNew: false
[DEBUG] stats-instance-2: Election comparison - my priority: 300, sender priority: 200, current leader: undefined, am I leader: false
[DEBUG] stats-instance-2: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 2 broadcasting to 2 other instances. Message type: ELECTION_OK, senderId: stats-instance-2
[DEBUG] stats-instance-2: Responded OK, may start own election later if needed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] stats-instance-0: Received ELECTION_OK from stats-instance-2, connected instances: [stats-instance-1, stats-instance-2], wasNew: false
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] stats-instance-1: Received ELECTION_OK from stats-instance-2, connected instances: [stats-instance-0, stats-instance-2], wasNew: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[DEBUG] stats-instance-2: Initial election timeout fired
[DEBUG] stats-instance-2: Starting initial election
[DEBUG] stats-instance-2: Starting election with priority 300, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (06:15:32) { instanceId: [32m'stats-instance-2'[39m, priority: [32m'300'[39m }
[MOCK] Instance 2 broadcasting to 2 other instances. Message type: ELECTION, senderId: stats-instance-2
[DEBUG] stats-instance-2: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] stats-instance-0: Received ELECTION from stats-instance-2, connected instances: [stats-instance-1, stats-instance-2], wasNew: false
[DEBUG] stats-instance-0: Election comparison - my priority: 100, sender priority: 300, current leader: undefined, am I leader: false
[DEBUG] stats-instance-0: Sender has higher priority (300 > 100), not responding
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] stats-instance-1: Received ELECTION from stats-instance-2, connected instances: [stats-instance-0, stats-instance-2], wasNew: false
[DEBUG] stats-instance-1: Election comparison - my priority: 200, sender priority: 300, current leader: undefined, am I leader: false
[DEBUG] stats-instance-1: Sender has higher priority (300 > 200), not responding

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[DEBUG] stats-instance-0: Election timeout fired, calling completeElection()
[DEBUG] stats-instance-0: completeElection() called, electionInProgress: true
[DEBUG] stats-instance-0: Completing election - received 2 responses from: [stats-instance-1, stats-instance-2]
[DEBUG] stats-instance-0: Checking responder stats-instance-1 with priority 200 vs my priority 100
[DEBUG] stats-instance-0: Found higher priority responder: stats-instance-1 (200)
[DEBUG] stats-instance-0: Responses from higher priority instances, waiting for coordinator

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[DEBUG] stats-instance-1: Election timeout fired, calling completeElection()
[DEBUG] stats-instance-1: completeElection() called, electionInProgress: true
[DEBUG] stats-instance-1: Completing election - received 1 responses from: [stats-instance-2]
[DEBUG] stats-instance-1: Checking responder stats-instance-2 with priority 300 vs my priority 200
[DEBUG] stats-instance-1: Found higher priority responder: stats-instance-2 (300)
[DEBUG] stats-instance-1: Responses from higher priority instances, waiting for coordinator

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[DEBUG] stats-instance-2: Election timeout fired, calling completeElection()
[DEBUG] stats-instance-2: completeElection() called, electionInProgress: true
[DEBUG] stats-instance-2: Completing election - received 0 responses from: []
[DEBUG] stats-instance-2: No responses received, becoming leader
[DEBUG] stats-instance-2: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] stats-instance-2: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] stats-instance-2: NOW LEADER with priority 300, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 2 broadcasting to 2 other instances. Message type: COORDINATOR, senderId: stats-instance-2
[DEBUG] stats-instance-2: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (06:15:33) {
  instanceId: [32m'stats-instance-2'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'300'[39m
}
[DEBUG] stats-instance-2: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] stats-instance-2: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] stats-instance-2: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] stats-instance-0: Received COORDINATOR from stats-instance-2, connected instances: [stats-instance-1, stats-instance-2], wasNew: false
[DEBUG] stats-instance-0: Processing COORDINATOR message from stats-instance-2 with priority 300
[DEBUG] stats-instance-0: Received coordinator message from stats-instance-2, previousLeader: undefined, wasLeader: false, electionInProgress: false
[DEBUG] stats-instance-0: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (06:15:33) {
  leaderId: [32m'stats-instance-2'[39m,
  previousLeader: [32m'undefined'[39m,
  instanceId: [32m'stats-instance-0'[39m
}
[DEBUG] stats-instance-0: Notifying 0 callbacks about leadership change (new leader: stats-instance-2)
[DEBUG] stats-instance-0: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] stats-instance-0: No callbacks registered
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] stats-instance-1: Received COORDINATOR from stats-instance-2, connected instances: [stats-instance-0, stats-instance-2], wasNew: false
[DEBUG] stats-instance-1: Processing COORDINATOR message from stats-instance-2 with priority 300
[DEBUG] stats-instance-1: Received coordinator message from stats-instance-2, previousLeader: undefined, wasLeader: false, electionInProgress: false
[DEBUG] stats-instance-1: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (06:15:33) {
  leaderId: [32m'stats-instance-2'[39m,
  previousLeader: [32m'undefined'[39m,
  instanceId: [32m'stats-instance-1'[39m
}
[DEBUG] stats-instance-1: Notifying 0 callbacks about leadership change (new leader: stats-instance-2)
[DEBUG] stats-instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] stats-instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[DEBUG] stats-instance-2: Sending heartbeat as leader
[MOCK] Instance 2 broadcasting to 2 other instances. Message type: HEARTBEAT, senderId: stats-instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] stats-instance-0: Received HEARTBEAT from stats-instance-2, connected instances: [stats-instance-1, stats-instance-2], wasNew: false
[DEBUG] stats-instance-0: Received HEARTBEAT from stats-instance-2, currentLeader is stats-instance-2, senderPriority: 300, myPriority: 100
[DEBUG] stats-instance-0: Not challenging leader - myPriority: 100, senderPriority: 300, isCurrentlyLeader: false
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] stats-instance-1: Received HEARTBEAT from stats-instance-2, connected instances: [stats-instance-0, stats-instance-2], wasNew: false
[DEBUG] stats-instance-1: Received HEARTBEAT from stats-instance-2, currentLeader is stats-instance-2, senderPriority: 300, myPriority: 200
[DEBUG] stats-instance-1: Not challenging leader - myPriority: 200, senderPriority: 300, isCurrentlyLeader: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[DEBUG] stats-instance-0: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 2 other instances. Message type: SHUTDOWN, senderId: stats-instance-0
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:15:34) { instanceId: [32m'stats-instance-0'[39m }
[DEBUG] stats-instance-1: Destroying leader election instance
[MOCK] Instance 1 broadcasting to 2 other instances. Message type: SHUTDOWN, senderId: stats-instance-1
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:15:34) { instanceId: [32m'stats-instance-1'[39m }
[DEBUG] stats-instance-2: Destroying leader election instance
[MOCK] Instance 2 broadcasting to 2 other instances. Message type: SHUTDOWN, senderId: stats-instance-2
[MOCK] Instance 2 broadcasting to 2 other instances. Message type: STEP_DOWN, senderId: stats-instance-2
‚ÑπÔ∏è [EventBus] Stopped being leader (06:15:34) { instanceId: [32m'stats-instance-2'[39m }
[DEBUG] stats-instance-2: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] stats-instance-2: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:15:34) { instanceId: [32m'stats-instance-2'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Sending to instance 1 (1 listeners)
[MOCK] Sending to instance 2 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Sending to instance 0 (1 listeners)
[MOCK] Sending to instance 2 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Sending to instance 0 (1 listeners)
[MOCK] Sending to instance 1 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Sending to instance 0 (1 listeners)
[MOCK] Sending to instance 1 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Closing BroadcastChannel instance 1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Closing BroadcastChannel instance 2

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics 2304ms
stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:14:36) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:14:36) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:14:36) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:14:36) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ÑπÔ∏è [Security] Request rate limit check passed (06:14:36) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'97'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757798076605_8mly74ds95vd'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:985:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:445:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1255:7[90m)[39m

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should propagate events across multiple instances
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:14:36)
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:14:36)
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:14:36)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should propagate events across multiple instances
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:14:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:14:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:14:36) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:14:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:14:36) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:14:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:14:36) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:14:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:14:36) { instanceId: [32m'undefined'[39m }
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should propagate events across multiple instances
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:36)
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:36)
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:36)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should propagate events across multiple instances
[EventBus] Graceful shutdown completed
[EventBus] Graceful shutdown completed
[EventBus] Graceful shutdown completed
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:14:36)
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:14:36)
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:14:36)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should maintain event ordering across instances
‚ÑπÔ∏è [Security] New CSP nonce generated (06:16:06) { noncePrefix: [32m'j3pelmys'[39m, timestamp: [32m'1757798166580'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:16:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:16:06) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:16:06) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:16:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [Security] New CSP nonce generated (06:16:06) { noncePrefix: [32m'wgk3qetj'[39m, timestamp: [32m'1757798166580'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:16:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:16:06) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:16:06) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:16:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should maintain event ordering across instances
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:16:06) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:16:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:16:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:16:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:16:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:16:06) { error: {} }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:16:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:16:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:16:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:16:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:16:06) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:14:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:14:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:14:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:14:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
[EventBus] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:14:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ÑπÔ∏è [Security] Request rate limit check passed (06:16:06) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757798166624_vkqnvck8kin1'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:985:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:445:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1255:7[90m)[39m

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
‚ÑπÔ∏è [Security] New CSP nonce generated (06:16:06) { noncePrefix: [32m'idfd60k2'[39m, timestamp: [32m'1757798166627'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:16:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:16:06) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:16:06) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:16:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:16:06) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:16:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:16:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:16:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:16:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:16:06) { error: {} }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
‚ùå [EventBus] Failed to handle remote event (06:16:06) {
  eventId: [32m'remote-event-1'[39m,
  pattern: [32m'remote.pattern'[39m,
  error: [32m"Cannot read properties of undefined (reading 'includes')"[39m
}

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:16:06)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:16:06) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:16:06) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:16:06) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
[EventBus] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:16:06)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:16:06)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:16:06)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:16:06)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:16:06)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:16:06) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:16:06)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:16:06)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:16:06)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (06:16:06) {
  keyVersion: [32m'key_1757798166627_80i0o2rk'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (06:16:06) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:16:06) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
[EventBus] Adding subscription to weak subscription manager for pattern: remote.pattern
[EventBus] Subscription added: remote.pattern (sub_1757798166637_6jddpbtsi) [moduleId: anonymous]

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:16:06) {
  subscriptionId: [32m'sub_1757798166637_6jddpbtsi'[39m,
  pattern: [32m'remote.pattern'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ÑπÔ∏è [Security] New CSP nonce generated (06:16:06) { noncePrefix: [32m'ok2qbr6l'[39m, timestamp: [32m'1757798166638'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:16:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:16:06) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:16:06) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:16:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:16:06) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:16:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:16:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:16:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:16:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:16:06) { error: {} }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:16:06)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (06:16:06) {
  keyVersion: [32m'key_1757798166638_gruzxi1u'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (06:16:06) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:16:06) { isInitialized: [32m'true'[39m }
‚ÑπÔ∏è [Security] Request rate limit check passed (06:16:06) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.initialized'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798166638_2qpr0ib7q7ob'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:985:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:445:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at DistributedEventBus.doInitialize [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:300:7[90m)[39m

 √ó src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should propagate events across multiple instances 90019ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances 90017ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances 9ms
   ‚Üí expected "spy" to be called with arguments: [ ObjectContaining{‚Ä¶} ][90m

Number of calls: [1m0[22m
[39m
stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:16:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:16:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:16:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:16:06) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ÑπÔ∏è [Security] Request rate limit check passed (06:16:06) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'98'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757798166638_syrw5o5bzg8r'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:985:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:445:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1255:7[90m)[39m

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ÑπÔ∏è [Security] Request rate limit check passed (06:16:06) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'97'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757798166638_wcp0a1klb1rf'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:985:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:445:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1255:7[90m)[39m

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:16:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:16:06) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should maintain event ordering across instances
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:16:06)
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:16:06)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should maintain event ordering across instances
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:16:06) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:16:06) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:16:06) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:16:06) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:16:06) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:16:06) { instanceId: [32m'undefined'[39m }
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should maintain event ordering across instances
[EventBus] Graceful shutdown completed
[EventBus] Graceful shutdown completed
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:16:06)
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:16:06)

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should maintain event ordering across instances
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:16:06)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:16:06)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:16:06)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:16:06)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:16:06)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:16:06) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:16:06)
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:16:06)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:16:06)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:16:06)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:16:06)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:16:06)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:16:06) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:16:06)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should handle different bus IDs independently
‚ÑπÔ∏è [Security] New CSP nonce generated (06:17:36) { noncePrefix: [32m'v07vwujn'[39m, timestamp: [32m'1757798256601'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:17:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:17:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:17:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:17:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [Security] New CSP nonce generated (06:17:36) { noncePrefix: [32m'qoc69wti'[39m, timestamp: [32m'1757798256601'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:17:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:17:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:17:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:17:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [Security] New CSP nonce generated (06:17:36) { noncePrefix: [32m'4k1ti8p9'[39m, timestamp: [32m'1757798256601'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:17:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:17:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:17:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:17:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should handle different bus IDs independently
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:17:36) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:17:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:17:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:17:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:17:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:17:36) { error: {} }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:17:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:17:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:17:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:17:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:17:36) { error: {} }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:17:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:17:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:17:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:17:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:17:36) { error: {} }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:16:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:16:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:16:06) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:16:06)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:16:06) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:16:06) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:16:06) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
[EventBus] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:16:06)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:16:06)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:16:06)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:16:06)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:16:06)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:16:06) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:16:06)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:16:06)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ÑπÔ∏è [Security] Request rate limit check passed (06:17:36) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'49'[39m,
  requestId: [32m'req_1757798256647_g6qqrvrcv296'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:985:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:445:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1255:7[90m)[39m

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should participate in leader election
‚ÑπÔ∏è [Security] New CSP nonce generated (06:17:36) { noncePrefix: [32m'yc786tr7'[39m, timestamp: [32m'1757798256650'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:17:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:17:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:17:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:17:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should participate in leader election
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:17:36) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:17:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:17:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:17:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:17:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:17:36) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should participate in leader election
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:17:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should participate in leader election
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:17:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should participate in leader election
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:17:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:17:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should participate in leader election
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should participate in leader election
[EventBus] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should participate in leader election
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:17:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:17:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:17:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:17:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should participate in leader election
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:17:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ÑπÔ∏è [Security] New CSP nonce generated (06:17:36) { noncePrefix: [32m'fsgtp9qt'[39m, timestamp: [32m'1757798256655'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:17:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:17:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:17:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:17:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:17:36) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:17:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:17:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:17:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:17:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:17:36) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:17:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:17:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:17:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:17:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
[EventBus] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:17:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:17:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:17:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:17:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:17:36)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:17:36)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (06:17:36) {
  keyVersion: [32m'key_1757798256650_ynxw878q'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (06:17:36) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:17:36) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:17:36)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (06:17:36) {
  keyVersion: [32m'key_1757798256655_lmy5ogsl'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (06:17:36) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:17:36) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected
‚ÑπÔ∏è [Security] New CSP nonce generated (06:17:36) { noncePrefix: [32m'p10p7qqf'[39m, timestamp: [32m'1757798256663'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:17:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:17:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:17:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:17:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:17:36) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:17:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:17:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:17:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:17:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:17:36) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:17:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:17:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:17:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:17:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected
[EventBus] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:17:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:17:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:17:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:17:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:17:36)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:17:36)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (06:17:36) {
  keyVersion: [32m'key_1757798256663_2ww0rxsx'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (06:17:36) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:17:36) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions
‚ÑπÔ∏è [Security] New CSP nonce generated (06:17:36) { noncePrefix: [32m'p2s69a9l'[39m, timestamp: [32m'1757798256670'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:17:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:17:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:17:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:17:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:17:36) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:17:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:17:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:17:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:17:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:17:36) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:17:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:17:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:17:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:17:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:17:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:17:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:17:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:17:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions
[EventBus] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:17:36)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:17:36)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (06:17:36) {
  keyVersion: [32m'key_1757798256670_4cv4pbzq'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (06:17:36) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:17:36) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing
‚ÑπÔ∏è [Security] New CSP nonce generated (06:17:36) { noncePrefix: [32m'7zw1mxvx'[39m, timestamp: [32m'1757798256676'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:17:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:17:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:17:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:17:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:17:36) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:17:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:17:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:17:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:17:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:17:36) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:17:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:17:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:17:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:17:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing
[EventBus] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:17:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:17:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:17:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:17:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:17:36)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:17:36)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (06:17:36) {
  keyVersion: [32m'key_1757798256676_iwbiztfp'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (06:17:36) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:17:36) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions
‚ÑπÔ∏è [Security] New CSP nonce generated (06:17:36) { noncePrefix: [32m'r7sbgvv4'[39m, timestamp: [32m'1757798256682'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:17:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:17:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:17:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:17:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:17:36) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:17:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:17:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:17:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:17:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:17:36) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:17:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:17:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:17:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:17:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions
[EventBus] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:17:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:17:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:17:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:17:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:17:36)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:17:36)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (06:17:36) {
  keyVersion: [32m'key_1757798256682_mr8vc8si'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (06:17:36) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:17:36) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently
‚ÑπÔ∏è [Security] New CSP nonce generated (06:17:36) { noncePrefix: [32m'8obpb3uf'[39m, timestamp: [32m'1757798256688'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:17:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:17:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:17:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:17:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:17:36) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:17:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:17:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:17:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:17:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:17:36) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:17:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:17:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:17:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:17:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:17:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:17:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:17:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:17:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently
[EventBus] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:17:36)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:17:36)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (06:17:36) {
  keyVersion: [32m'key_1757798256688_xyoeu9ky'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (06:17:36) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:17:36) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ÑπÔ∏è [Security] New CSP nonce generated (06:17:36) { noncePrefix: [32m'c7e3zssc'[39m, timestamp: [32m'1757798256693'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:17:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:17:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:17:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:17:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:17:36) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:17:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:17:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:17:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:17:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:17:36) { error: {} }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:17:36)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (06:17:36) {
  keyVersion: [32m'key_1757798256693_wyic0chx'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (06:17:36) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:17:36) { isInitialized: [32m'true'[39m }
‚ÑπÔ∏è [Security] Request rate limit check passed (06:17:36) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.initialized'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798256693_52kr50icqkat'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:985:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:445:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at DistributedEventBus.doInitialize [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:300:7[90m)[39m

 √ó src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should maintain event ordering across instances 90015ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events 90008ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ‚úì src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should participate in leader election 5ms
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes 5ms
   ‚Üí eventBus.handleLeadershipChange is not a function
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected 5ms
   ‚Üí eventBus.handleLeadershipChange is not a function
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions 5ms
   ‚Üí eventBus.handleNetworkPartition is not a function
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing 5ms
   ‚Üí eventBus.handlePartitionHealing is not a function
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions 5ms
   ‚Üí eventBus.handleNetworkPartition is not a function
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently 4ms
   ‚Üí eventBus.getPartitionInfo is not a function
stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:17:36) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ÑπÔ∏è [Security] Request rate limit check passed (06:17:36) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'98'[39m,
  suspicionScore: [32m'51'[39m,
  requestId: [32m'req_1757798256693_96wnj91g4aa3'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:985:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:445:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1255:7[90m)[39m

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:17:36) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:17:36) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:17:36) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:17:36) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ÑπÔ∏è [Security] Request rate limit check passed (06:17:36) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'97'[39m,
  suspicionScore: [32m'53'[39m,
  requestId: [32m'req_1757798256693_ampfvbf3wao1'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:17:36) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:17:36) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:17:36) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:985:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:445:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1255:7[90m)[39m

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:17:36) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:17:36) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:17:36) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:17:36) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should handle different bus IDs independently
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:17:36)
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:17:36)
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:17:36)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should handle different bus IDs independently
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:17:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:17:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:17:36) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:17:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:17:36) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:17:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:17:36) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:17:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:17:36) { instanceId: [32m'undefined'[39m }
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should handle different bus IDs independently
[EventBus] Graceful shutdown completed
[EventBus] Graceful shutdown completed
[EventBus] Graceful shutdown completed
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:17:36)
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:17:36)
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:17:36)

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should handle different bus IDs independently
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:17:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:17:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:17:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:17:36)
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:17:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:17:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:17:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:17:36)
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:17:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:17:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:17:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:17:36)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should elect leader consistently across instances
‚ÑπÔ∏è [Security] New CSP nonce generated (06:19:06) { noncePrefix: [32m'iem1b967'[39m, timestamp: [32m'1757798346606'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:19:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:19:06) {
  distributed: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  instanceId: [32m'undefined'[39m
}
‚ÑπÔ∏è [Security] New CSP nonce generated (06:19:06) { noncePrefix: [32m'4dm4qppy'[39m, timestamp: [32m'1757798346606'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:19:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:19:06) {
  distributed: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  instanceId: [32m'undefined'[39m
}
‚ÑπÔ∏è [Security] New CSP nonce generated (06:19:06) { noncePrefix: [32m'ycxxqs4h'[39m, timestamp: [32m'1757798346606'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:19:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:19:06) {
  distributed: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  instanceId: [32m'undefined'[39m
}

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should elect leader consistently across instances
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:19:06) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:19:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:19:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:19:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:19:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [Security] [SECURITY] RateLimiter initialized (06:19:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:19:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:19:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:19:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [Security] [SECURITY] RateLimiter initialized (06:19:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:19:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:19:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:19:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:17:36) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ÑπÔ∏è [Security] Request rate limit check passed (06:17:36) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'96'[39m,
  suspicionScore: [32m'55'[39m,
  requestId: [32m'req_1757798256693_act21qsl1tyd'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:985:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:445:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1255:7[90m)[39m

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:17:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:17:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:17:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:17:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
[EventBus] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:17:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:17:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:17:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:17:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:17:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:17:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ÑπÔ∏è [Security] New CSP nonce generated (06:19:06) { noncePrefix: [32m'10jj4wal'[39m, timestamp: [32m'1757798346705'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:19:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:19:06) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:19:06) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:19:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:19:06) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:19:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:19:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:19:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:19:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:19:06) { error: {} }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:19:06)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (06:19:06) {
  keyVersion: [32m'key_1757798346705_9aa4ksi4'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (06:19:06) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:19:06) { isInitialized: [32m'true'[39m }
‚ÑπÔ∏è [Security] Request rate limit check passed (06:19:06) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.initialized'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798346705_etp91cmf9rae'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:985:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:445:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at DistributedEventBus.doInitialize [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:300:7[90m)[39m

 √ó src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should handle different bus IDs independently 90004ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions 90010ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ÑπÔ∏è [Security] Rate limiter cleanup completed (06:19:06) {
  globalRecords: [32m'0'[39m,
  ipRecords: [32m'0'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'0'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'0'[39m
}

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should elect leader consistently across instances
‚ÑπÔ∏è [Security] Rate limiter cleanup completed (06:19:06) {
  globalRecords: [32m'0'[39m,
  ipRecords: [32m'0'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'0'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'0'[39m
}

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ÑπÔ∏è [Security] New CSP nonce generated (06:19:06) { noncePrefix: [32m'fdx95e6s'[39m, timestamp: [32m'1757798346705'[39m }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should elect leader consistently across instances
‚ÑπÔ∏è [Security] New CSP nonce generated (06:19:06) { noncePrefix: [32m'9psyso7f'[39m, timestamp: [32m'1757798346606'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:19:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:19:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:19:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:19:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:19:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:19:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:19:06) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ÑπÔ∏è [Security] Request rate limit check passed (06:19:06) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'57'[39m,
  requestId: [32m'req_1757798346705_gugdl6kgiigv'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:19:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:19:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:985:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:445:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1255:7[90m)[39m

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:19:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:19:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:19:06) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ÑπÔ∏è [Security] Request rate limit check passed (06:19:06) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'98'[39m,
  suspicionScore: [32m'59'[39m,
  requestId: [32m'req_1757798346705_3h37on9a9xa1'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:985:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:445:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1255:7[90m)[39m

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should elect leader consistently across instances
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:19:06)
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:19:06)
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:19:06)
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should elect leader consistently across instances
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:19:06)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:19:06)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:19:06)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:19:06)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:19:06)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:19:06) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:19:06)
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:19:06)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:19:06)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:19:06)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:19:06)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:19:06)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:19:06) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:19:06)
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:19:06)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:19:06)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:19:06)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:19:06)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:19:06)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:19:06) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:19:06)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should elect leader consistently across instances
[EventBus] Graceful shutdown completed
[EventBus] Graceful shutdown completed
[EventBus] Graceful shutdown completed
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:19:06)
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:19:06)
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:19:06)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should handle leader failure and re-election
‚ÑπÔ∏è [Security] New CSP nonce generated (06:20:36) { noncePrefix: [32m'4nggo8xt'[39m, timestamp: [32m'1757798436620'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:20:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:20:36) {
  distributed: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  instanceId: [32m'undefined'[39m
}
‚ÑπÔ∏è [Security] New CSP nonce generated (06:20:36) { noncePrefix: [32m'hlrpghp2'[39m, timestamp: [32m'1757798436620'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:20:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:20:36) {
  distributed: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  instanceId: [32m'undefined'[39m
}

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should handle leader failure and re-election
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:20:36) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:20:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:20:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:20:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:20:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [Security] [SECURITY] RateLimiter initialized (06:20:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:20:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:20:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:20:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:19:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:19:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:19:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:19:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:19:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:19:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:19:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:19:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:19:06) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:19:06)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:19:06) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:19:06) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:19:06) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:19:06)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:19:06)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:19:06)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:19:06)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:19:06)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:19:06) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:19:06)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
[EventBus] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:19:06)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ÑπÔ∏è [Security] Request rate limit check passed (06:20:36) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'61'[39m,
  requestId: [32m'req_1757798436718_cnz1ir2j5ezl'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:20:36) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:20:36) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:985:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:445:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1255:7[90m)[39m

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks
‚ÑπÔ∏è [Security] New CSP nonce generated (06:20:36) { noncePrefix: [32m'n5au4hp5'[39m, timestamp: [32m'1757798436722'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:20:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:20:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:20:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:20:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:20:36) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:20:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:20:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:20:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:20:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:20:36) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:20:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:20:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:20:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:20:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks
[EventBus] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:20:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:20:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:20:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:20:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:20:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:20:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:20:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:20:36)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:20:36)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (06:20:36) {
  keyVersion: [32m'key_1757798436722_y92ebyfk'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (06:20:36) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:20:36) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should communicate with other instances
‚ÑπÔ∏è [Security] New CSP nonce generated (06:20:36) { noncePrefix: [32m'fh0ypnjd'[39m, timestamp: [32m'1757798436727'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:20:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:20:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:20:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:20:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should communicate with other instances
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:20:36) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:20:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:20:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:20:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:20:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:20:36) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should communicate with other instances
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:20:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should communicate with other instances
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:20:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should communicate with other instances
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:20:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:20:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should communicate with other instances
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should communicate with other instances
[EventBus] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should communicate with other instances
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:20:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:20:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:20:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:20:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:20:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:20:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:20:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should communicate with other instances
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:20:36)

 √ó src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should elect leader consistently across instances 90013ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ÑπÔ∏è [Security] New CSP nonce generated (06:20:36) { noncePrefix: [32m'br26pwjz'[39m, timestamp: [32m'1757798436731'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:20:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:20:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:20:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:20:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:20:36) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:20:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:20:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:20:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:20:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:20:36) { error: {} }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:20:36)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (06:20:36) {
  keyVersion: [32m'key_1757798436727_0sg3cp6z'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (06:20:36) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:20:36) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:20:36)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (06:20:36) {
  keyVersion: [32m'key_1757798436731_wz3kuvky'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (06:20:36) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:20:36) { isInitialized: [32m'true'[39m }
‚ÑπÔ∏è [Security] Request rate limit check passed (06:20:36) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.initialized'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798436731_4d6jay14dvsm'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:985:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:445:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at DistributedEventBus.doInitialize [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:300:7[90m)[39m

 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store 90014ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks 4ms
   ‚Üí eventBus.handleConflictingEvent is not a function
 ‚úì src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should communicate with other instances 4ms
stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:20:36) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ÑπÔ∏è [Security] Request rate limit check passed (06:20:36) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'98'[39m,
  suspicionScore: [32m'63'[39m,
  requestId: [32m'req_1757798436731_rtc3ilwajroh'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:985:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:445:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1255:7[90m)[39m

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:20:36) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:20:36) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:20:36) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:20:36) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:20:36) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:20:36) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:20:36) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:20:36) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:20:36) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ÑπÔ∏è [Security] Request rate limit check passed (06:20:36) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'97'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757798436731_1779yijmih60'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:20:36) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:20:36) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:20:36) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:985:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:445:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1255:7[90m)[39m

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should handle leader failure and re-election
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:20:36)
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:20:36)
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should handle leader failure and re-election
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:20:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:20:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:20:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:20:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:20:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:20:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:20:36)
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:20:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:20:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:20:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:20:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:20:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:20:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:20:36)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should handle leader failure and re-election
[EventBus] Graceful shutdown completed
[EventBus] Graceful shutdown completed
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:20:36)
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:20:36)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should detect and handle network partitions
‚ÑπÔ∏è [Security] New CSP nonce generated (06:22:06) { noncePrefix: [32m'9pgbkpc7'[39m, timestamp: [32m'1757798526630'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:22:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:22:06) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:22:06) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:22:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [Security] New CSP nonce generated (06:22:06) { noncePrefix: [32m'mri0tffj'[39m, timestamp: [32m'1757798526630'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:22:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:22:06) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:22:06) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:22:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should detect and handle network partitions
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:22:06) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:22:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:22:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:22:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:22:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:22:06) { error: {} }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:22:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:22:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:22:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:22:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:22:06) { error: {} }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:20:36) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ÑπÔ∏è [Security] Request rate limit check passed (06:20:36) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'96'[39m,
  suspicionScore: [32m'67'[39m,
  requestId: [32m'req_1757798436731_n5i2897kqddp'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:985:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:445:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1255:7[90m)[39m

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:20:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:20:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:20:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:20:36) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
[EventBus] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:20:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:20:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:20:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:20:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:20:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:20:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:20:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:20:36)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully
‚ÑπÔ∏è [Security] New CSP nonce generated (06:22:06) { noncePrefix: [32m'24fkju3i'[39m, timestamp: [32m'1757798526735'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:22:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:22:06) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:22:06) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:22:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:22:06) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:22:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:22:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:22:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:22:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:22:06) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:22:06)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:22:06) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:22:06) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:22:06) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully
[EventBus] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:22:06)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:22:06)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:22:06)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:22:06)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:22:06)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:22:06) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:22:06)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:22:06)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:22:06)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (06:22:06) {
  keyVersion: [32m'key_1757798526735_othky9c4'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (06:22:06) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:22:06) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ÑπÔ∏è [Security] New CSP nonce generated (06:22:06) { noncePrefix: [32m'0saulqw5'[39m, timestamp: [32m'1757798526742'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:22:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:22:06) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:22:06) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:22:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:22:06) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:22:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:22:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:22:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:22:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:22:06) { error: {} }

 √ó src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should handle leader failure and re-election 90010ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:22:06)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (06:22:06) {
  keyVersion: [32m'key_1757798526742_zmc45e42'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (06:22:06) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:22:06) { isInitialized: [32m'true'[39m }
‚ÑπÔ∏è [Security] Request rate limit check passed (06:22:06) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.initialized'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798526742_2uw2sasxpqx4'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:985:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:445:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at DistributedEventBus.doInitialize [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:300:7[90m)[39m

 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages 90004ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully 5ms
   ‚Üí eventBus.handleInstanceShutdown is not a function
stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ÑπÔ∏è [Security] Request rate limit check passed (06:22:06) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'69'[39m,
  requestId: [32m'req_1757798526742_lukxqml56g67'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:985:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:445:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1255:7[90m)[39m

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ÑπÔ∏è [Security] Request rate limit check passed (06:22:06) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'98'[39m,
  suspicionScore: [32m'71'[39m,
  requestId: [32m'req_1757798526742_8ax3tq4uboax'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:985:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:445:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1255:7[90m)[39m

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should detect and handle network partitions
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:22:06)
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:22:06)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should detect and handle network partitions
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:22:06) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:22:06) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:22:06) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:22:06) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:22:06) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:22:06) { instanceId: [32m'undefined'[39m }
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should detect and handle network partitions
[EventBus] Graceful shutdown completed
[EventBus] Graceful shutdown completed
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:22:06)
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:22:06)

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should detect and handle network partitions
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:22:06)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:22:06)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:22:06)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:22:06)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:22:06)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:22:06) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:22:06)
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:22:06)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:22:06)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:22:06)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:22:06)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:22:06)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:22:06) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:22:06)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should recover from network partitions
‚ÑπÔ∏è [Security] New CSP nonce generated (06:23:36) { noncePrefix: [32m'4ojuzze2'[39m, timestamp: [32m'1757798616643'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:23:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:23:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:23:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:23:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [Security] New CSP nonce generated (06:23:36) { noncePrefix: [32m'3t8mblln'[39m, timestamp: [32m'1757798616643'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:23:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:23:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:23:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:23:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should recover from network partitions
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:23:36) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:23:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:23:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:23:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:23:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:23:36) { error: {} }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:23:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:23:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:23:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:23:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:23:36) { error: {} }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

 √ó src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should detect and handle network partitions 90013ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ÑπÔ∏è [Security] Request rate limit check passed (06:22:06) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'97'[39m,
  suspicionScore: [32m'73'[39m,
  requestId: [32m'req_1757798526742_fkvidpcv2668'[39m
}

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:22:06)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:985:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:445:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1255:7[90m)[39m

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] ATTACK: DDoS pattern detected (06:22:06) {
  ip: [32m'127.0.0.1'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  requestCount: [32m'4'[39m,
  suspicionScore: [32m'75'[39m,
  attackPattern: {
    rapid_fire: [32m'20'[39m,
    pattern_repetition: [32m'0'[39m,
    burst_spikes: [32m'20'[39m,
    geographic_anomaly: [32m'0'[39m
  },
  threshold: [32m'500'[39m
}
‚ùå [Security] [SECURITY] ATTACK: DDoS attack detected and IP blocked (06:22:06) {
  ip: [32m'127.0.0.1'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  suspicionScore: [32m'75'[39m,
  requestId: [32m'req_1757798526742_d2m70diy6q7g'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Event emission blocked by rate limiter (06:22:06) {
  pattern: [32m'global.eventbus.metrics'[39m,
  reason: [32m'DDoS attack pattern detected'[39m,
  clientIP: [32m'127.0.0.1'[39m,
  suspicionScore: [32m'75'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ÑπÔ∏è [Security] New CSP nonce generated (06:22:06) { noncePrefix: [32m'5drzdsbs'[39m, timestamp: [32m'1757798526742'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:22:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:22:06) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:22:06) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:22:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] RateLimiter initialized (06:22:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:22:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:22:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:22:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:22:06) { error: {} }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (06:22:06) {
  keyVersion: [32m'key_1757798526742_zmc45e42'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (06:22:06) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:22:06) { isInitialized: [32m'true'[39m }
‚ÑπÔ∏è [Security] Request rate limit check passed (06:22:06) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.initialized'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757798526742_8uqo25yuy5qe'[39m
}

 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully 135014ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   ‚Üí Hook timed out in 45000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with "hookTimeout".
stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should recover from network partitions
‚ÑπÔ∏è [Security] Rate limiter cleanup completed (06:23:36) {
  globalRecords: [32m'0'[39m,
  ipRecords: [32m'0'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'0'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'0'[39m
}

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ÑπÔ∏è [Security] Rate limiter cleanup completed (06:22:06) {
  globalRecords: [32m'0'[39m,
  ipRecords: [32m'0'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'0'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'0'[39m
}

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ÑπÔ∏è [Security] New CSP nonce generated (06:22:06) { noncePrefix: [32m'zoq5uyte'[39m, timestamp: [32m'1757798526742'[39m }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should recover from network partitions
‚ÑπÔ∏è [Security] New CSP nonce generated (06:23:36) { noncePrefix: [32m'bf14nodp'[39m, timestamp: [32m'1757798616643'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Request from blocked IP attempted (06:22:06) {
  ip: [32m'127.0.0.1'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  requestId: [32m'req_1757798526742_4iib9rk4xibv'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Event emission blocked by rate limiter (06:22:06) {
  pattern: [32m'global.eventbus.metrics'[39m,
  reason: [32m'IP blocked due to DDoS protection'[39m,
  clientIP: [32m'127.0.0.1'[39m,
  suspicionScore: [32m'100'[39m
}

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should recover from network partitions
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:23:36)
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:23:36)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should recover from network partitions
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:23:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:23:36) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:23:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:23:36) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:23:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:23:36) { instanceId: [32m'undefined'[39m }
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should recover from network partitions
[EventBus] Graceful shutdown completed
[EventBus] Graceful shutdown completed
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:23:36)
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:23:36)

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should recover from network partitions
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:23:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:23:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:23:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:23:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:23:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:23:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:23:36)
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:23:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:23:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:23:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:23:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:23:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:23:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:23:36)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Factory Pattern Integration > should manage multiple bus instances through factory
‚ÑπÔ∏è [EventBus] Distributed EventBus factory created (06:25:06) {
  factoryId: [32m'test-factory'[39m,
  crossInstanceCommunication: [32m'true'[39m,
  isolated: [32m'undefined'[39m,
  maxInstances: [32m'5'[39m
}
‚ÑπÔ∏è [Security] New CSP nonce generated (06:25:06) { noncePrefix: [32m'j1muc3oe'[39m, timestamp: [32m'1757798706660'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:25:06)
[EventStore] Starting init... (dbName: eventbus-undefined)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: eventbus-undefined v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:25:06) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-test-factory-undefined-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:25:06) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'test-factory-undefined-undefined'[39m,
  channelName: [32m'eventbus-test-factory'[39m
}
‚ÑπÔ∏è [EventBus] Event partitioner initialized (06:25:06) {
  partitionCount: [32m'4'[39m,
  orderingGuarantees: [32m'true'[39m,
  partitionStrategy: [32m'consistent-hash'[39m
}
‚ÑπÔ∏è [EventBus] Network partition handler initialized (06:25:06) {
  instanceId: [32m'undefined'[39m,
  fallbackMode: [32m'readonly'[39m,
  minimumConnectedInstances: [32m'1'[39m
}
‚ÑπÔ∏è [EventBus] Distributed layer initialized successfully (06:25:06)
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:25:06) {
  distributed: [32m'true'[39m,
  busId: [32m'test-factory-undefined-undefined'[39m,
  instanceId: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] EventBus instance created (06:25:06) {
  factoryId: [32m'test-factory'[39m,
  instanceId: [32m'undefined'[39m,
  namespace: [32m'undefined'[39m,
  busId: [32m'test-factory-undefined-undefined'[39m
}

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Factory Pattern Integration > should manage multiple bus instances through factory
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:25:06) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:25:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:25:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:25:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:25:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Factory Pattern Integration > should manage multiple bus instances through factory
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:25:06)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Factory Pattern Integration > should manage multiple bus instances through factory
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:25:06) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Factory Pattern Integration > should manage multiple bus instances through factory
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:25:06) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:25:06) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Distributed event store closed (06:25:06) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Event partitioner destroyed (06:25:06)
‚ÑπÔ∏è [EventBus] Network partition handler destroyed (06:25:06) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Factory Pattern Integration > should manage multiple bus instances through factory
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Factory Pattern Integration > should manage multiple bus instances through factory
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:25:06)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:25:06)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:25:06)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:25:06)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:25:06)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:25:06) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:25:06)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Factory Pattern Integration > should manage multiple bus instances through factory
[EventBus] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Factory Pattern Integration > should manage multiple bus instances through factory
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:25:06)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Factory Pattern Integration > should manage multiple bus instances through factory
‚ÑπÔ∏è [EventBus] EventBus instance destroyed (06:25:06) { factoryId: [32m'test-factory'[39m, instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Factory Pattern Integration > should manage multiple bus instances through factory
‚ÑπÔ∏è [EventBus] Distributed EventBus factory destroyed (06:25:06) { factoryId: [32m'test-factory'[39m }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Factory Pattern Integration > should handle microfrontend factory patterns
‚ÑπÔ∏è [EventBus] Distributed EventBus factory created (06:25:06) {
  factoryId: [32m'mf-factory'[39m,
  crossInstanceCommunication: [32m'true'[39m,
  isolated: [32m'false'[39m,
  maxInstances: [32m'20'[39m
}
‚ÑπÔ∏è [Security] New CSP nonce generated (06:25:06) { noncePrefix: [32m'm0f6jg11'[39m, timestamp: [32m'1757798706670'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:25:06)
[EventStore] Starting init... (dbName: eventbus-undefined)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: eventbus-undefined v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:25:06) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-mf-factory-undefined-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:25:06) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'mf-factory-undefined-undefined'[39m,
  channelName: [32m'eventbus-mf-factory'[39m
}
‚ÑπÔ∏è [EventBus] Event partitioner initialized (06:25:06) {
  partitionCount: [32m'2'[39m,
  orderingGuarantees: [32m'true'[39m,
  partitionStrategy: [32m'consistent-hash'[39m
}
‚ÑπÔ∏è [EventBus] Network partition handler initialized (06:25:06) {
  instanceId: [32m'undefined'[39m,
  fallbackMode: [32m'readonly'[39m,
  minimumConnectedInstances: [32m'1'[39m
}
‚ÑπÔ∏è [EventBus] Distributed layer initialized successfully (06:25:06)
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:25:06) {
  distributed: [32m'true'[39m,
  busId: [32m'mf-factory-undefined-undefined'[39m,
  instanceId: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] EventBus instance created (06:25:06) {
  factoryId: [32m'mf-factory'[39m,
  instanceId: [32m'undefined'[39m,
  namespace: [32m'undefined'[39m,
  busId: [32m'mf-factory-undefined-undefined'[39m
}

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Factory Pattern Integration > should handle microfrontend factory patterns
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:25:06) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:25:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:25:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:25:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:25:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Factory Pattern Integration > should handle microfrontend factory patterns
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:25:06)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Factory Pattern Integration > should handle microfrontend factory patterns
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:25:06) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Factory Pattern Integration > should handle microfrontend factory patterns
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:25:06) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:25:06) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Distributed event store closed (06:25:06) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Event partitioner destroyed (06:25:06)
‚ÑπÔ∏è [EventBus] Network partition handler destroyed (06:25:06) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Factory Pattern Integration > should handle microfrontend factory patterns
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Factory Pattern Integration > should handle microfrontend factory patterns
[EventBus] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Factory Pattern Integration > should handle microfrontend factory patterns
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:25:06)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:25:06)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:25:06)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:25:06)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:25:06)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:25:06) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:25:06)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Factory Pattern Integration > should handle microfrontend factory patterns
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:25:06)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Factory Pattern Integration > should handle microfrontend factory patterns
‚ÑπÔ∏è [EventBus] EventBus instance destroyed (06:25:06) { factoryId: [32m'mf-factory'[39m, instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Factory Pattern Integration > should handle microfrontend factory patterns
‚ÑπÔ∏è [EventBus] Distributed EventBus factory destroyed (06:25:06) { factoryId: [32m'mf-factory'[39m }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Performance and Scalability > should handle high-throughput event distribution
‚ÑπÔ∏è [Security] New CSP nonce generated (06:25:06) { noncePrefix: [32m'4ddngomd'[39m, timestamp: [32m'1757798706678'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:25:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:25:06) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:25:06) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:25:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [Security] New CSP nonce generated (06:25:06) { noncePrefix: [32m'twq0fgsr'[39m, timestamp: [32m'1757798706678'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:25:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:25:06) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:25:06) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:25:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [Security] New CSP nonce generated (06:25:06) { noncePrefix: [32m'jxl8fjzu'[39m, timestamp: [32m'1757798706678'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:25:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:25:06) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:25:06) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:25:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Performance and Scalability > should handle high-throughput event distribution
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:25:06) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:25:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:25:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:25:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:25:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:25:06) { error: {} }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:25:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:25:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:25:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:25:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:25:06) { error: {} }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:25:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:25:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:25:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:25:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:25:06) { error: {} }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

 √ó src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should recover from network partitions 90015ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 √ó src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Factory Pattern Integration > should manage multiple bus instances through factory 9ms
   ‚Üí Instance undefined already exists
 √ó src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Factory Pattern Integration > should handle microfrontend factory patterns 5ms
   ‚Üí Instance undefined already exists
stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Request from blocked IP attempted (06:22:06) {
  ip: [32m'127.0.0.1'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  requestId: [32m'req_1757798526742_kzkjdceo10hm'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Event emission blocked by rate limiter (06:22:06) {
  pattern: [32m'global.eventbus.metrics'[39m,
  reason: [32m'IP blocked due to DDoS protection'[39m,
  clientIP: [32m'127.0.0.1'[39m,
  suspicionScore: [32m'100'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Request from blocked IP attempted (06:22:06) {
  ip: [32m'127.0.0.1'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  requestId: [32m'req_1757798526742_fk7oivrq83tr'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Event emission blocked by rate limiter (06:22:06) {
  pattern: [32m'global.eventbus.metrics'[39m,
  reason: [32m'IP blocked due to DDoS protection'[39m,
  clientIP: [32m'127.0.0.1'[39m,
  suspicionScore: [32m'100'[39m
}

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:22:06)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Request from blocked IP attempted (06:22:06) {
  ip: [32m'127.0.0.1'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  requestId: [32m'req_1757798526742_nfkz2gnvxtwg'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Event emission blocked by rate limiter (06:22:06) {
  pattern: [32m'global.eventbus.metrics'[39m,
  reason: [32m'IP blocked due to DDoS protection'[39m,
  clientIP: [32m'127.0.0.1'[39m,
  suspicionScore: [32m'100'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Performance and Scalability > should handle high-throughput event distribution
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:25:06)
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:25:06)
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:25:06)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Performance and Scalability > should handle high-throughput event distribution
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:25:06) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:25:06) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:25:06) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:25:06) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:25:06) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:25:06) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:25:06) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:25:06) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:25:06) { instanceId: [32m'undefined'[39m }
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Performance and Scalability > should handle high-throughput event distribution
[EventBus] Graceful shutdown completed
[EventBus] Graceful shutdown completed
[EventBus] Graceful shutdown completed
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:25:06)
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:25:06)
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:25:06)

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Performance and Scalability > should handle high-throughput event distribution
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:25:06)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:25:06)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:25:06)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:25:06)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:25:06)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:25:06) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:25:06)
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:25:06)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:25:06)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:25:06)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:25:06)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:25:06)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:25:06) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:25:06)
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:25:06)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:25:06)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:25:06)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:25:06)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:25:06)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:25:06) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:25:06)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Performance and Scalability > should handle network latency gracefully
‚ÑπÔ∏è [Security] New CSP nonce generated (06:26:36) { noncePrefix: [32m'n4fqwl6r'[39m, timestamp: [32m'1757798796695'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:26:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:26:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:26:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:26:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [Security] New CSP nonce generated (06:26:36) { noncePrefix: [32m'k1qsnlq5'[39m, timestamp: [32m'1757798796695'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:26:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:26:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:26:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:26:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Performance and Scalability > should handle network latency gracefully
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:26:36) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:26:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:26:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:26:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:26:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:26:36) { error: {} }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:26:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:26:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:26:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:26:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:26:36) { error: {} }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Request from blocked IP attempted (06:22:06) {
  ip: [32m'127.0.0.1'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  requestId: [32m'req_1757798526742_l6kjxspajwob'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Event emission blocked by rate limiter (06:22:06) {
  pattern: [32m'global.eventbus.metrics'[39m,
  reason: [32m'IP blocked due to DDoS protection'[39m,
  clientIP: [32m'127.0.0.1'[39m,
  suspicionScore: [32m'100'[39m
}

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should recover from temporary failures
‚ÑπÔ∏è [Security] New CSP nonce generated (06:22:06) { noncePrefix: [32m'fg114tke'[39m, timestamp: [32m'1757798526742'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:22:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:22:06) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:22:06) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:22:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should recover from temporary failures
‚ùå [Security] [SECURITY] RateLimiter initialized (06:22:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:22:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:22:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:22:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:22:06) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should recover from temporary failures
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:22:06)

 √ó src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Performance and Scalability > should handle high-throughput event distribution 90017ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully 135033ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   ‚Üí Hook timed out in 45000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with "hookTimeout".
stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should recover from temporary failures
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should recover from temporary failures
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should recover from temporary failures
‚ùå [Security] [SECURITY] THREAT: Request from blocked IP attempted (06:22:06) {
  ip: [32m'127.0.0.1'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  requestId: [32m'req_1757798526742_pespt3vxhz2k'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should recover from temporary failures
‚ùå [Security] [SECURITY] THREAT: Event emission blocked by rate limiter (06:22:06) {
  pattern: [32m'global.eventbus.metrics'[39m,
  reason: [32m'IP blocked due to DDoS protection'[39m,
  clientIP: [32m'127.0.0.1'[39m,
  suspicionScore: [32m'100'[39m
}

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should provide distributed metrics
‚ÑπÔ∏è [Security] New CSP nonce generated (06:22:06) { noncePrefix: [32m'twku9ssz'[39m, timestamp: [32m'1757798526742'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:22:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:22:06) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:22:06) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:22:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should provide distributed metrics
‚ùå [Security] [SECURITY] RateLimiter initialized (06:22:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:22:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:22:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:22:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:22:06) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should provide distributed metrics
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:22:06)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should provide distributed metrics
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should provide distributed metrics
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should provide distributed metrics
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should provide distributed metrics
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should provide distributed metrics
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should provide distributed metrics
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should provide distributed metrics
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should provide distributed metrics
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should provide distributed metrics
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should provide distributed metrics
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should provide distributed metrics
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should provide distributed metrics
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should provide distributed metrics
‚ùå [Security] [SECURITY] THREAT: Request from blocked IP attempted (06:22:06) {
  ip: [32m'127.0.0.1'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  requestId: [32m'req_1757798526742_0pwzbbadb0bl'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should provide distributed metrics
‚ùå [Security] [SECURITY] THREAT: Event emission blocked by rate limiter (06:22:06) {
  pattern: [32m'global.eventbus.metrics'[39m,
  reason: [32m'IP blocked due to DDoS protection'[39m,
  clientIP: [32m'127.0.0.1'[39m,
  suspicionScore: [32m'100'[39m
}

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Performance and Scalability > should handle network latency gracefully
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:26:36)
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:26:36)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Performance and Scalability > should handle network latency gracefully
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:26:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:26:36) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:26:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:26:36) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:26:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:26:36) { instanceId: [32m'undefined'[39m }
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Performance and Scalability > should handle network latency gracefully
[EventBus] Graceful shutdown completed
[EventBus] Graceful shutdown completed
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:26:36)
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:26:36)

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Performance and Scalability > should handle network latency gracefully
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:26:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:26:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:26:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:26:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:26:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:26:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:26:36)
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:26:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:26:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:26:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:26:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:26:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:26:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:26:36)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Data Consistency > should maintain event ordering with partitioning
‚ÑπÔ∏è [Security] New CSP nonce generated (06:28:06) { noncePrefix: [32m'k3oka48m'[39m, timestamp: [32m'1757798886702'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:28:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:28:06) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:28:06) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:28:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [Security] New CSP nonce generated (06:28:06) { noncePrefix: [32m'jxrxq2m6'[39m, timestamp: [32m'1757798886702'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:28:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:28:06) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:28:06) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:28:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Data Consistency > should maintain event ordering with partitioning
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:28:06) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:28:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:28:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:28:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:28:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:28:06) { error: {} }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:28:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:28:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:28:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:28:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:28:06) { error: {} }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should provide distributed metrics
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should provide distributed metrics
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

 √ó src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Performance and Scalability > should handle network latency gracefully 90007ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should provide distributed metrics
‚ùå [Security] [SECURITY] THREAT: Request from blocked IP attempted (06:22:06) {
  ip: [32m'127.0.0.1'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  requestId: [32m'req_1757798526742_9yp868umauhh'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should provide distributed metrics
‚ùå [Security] [SECURITY] THREAT: Event emission blocked by rate limiter (06:22:06) {
  pattern: [32m'global.eventbus.metrics'[39m,
  reason: [32m'IP blocked due to DDoS protection'[39m,
  clientIP: [32m'127.0.0.1'[39m,
  suspicionScore: [32m'100'[39m
}

 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should recover from temporary failures 45012ms
   ‚Üí eventBus.emitWithRetry is not a function
   ‚Üí Hook timed out in 45000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with "hookTimeout".
stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ÑπÔ∏è [Security] New CSP nonce generated (06:22:06) { noncePrefix: [32m'yab2664m'[39m, timestamp: [32m'1757798526742'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:22:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:22:06) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:22:06) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:22:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] RateLimiter initialized (06:22:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:22:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:22:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:22:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:22:06) { error: {} }

 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should provide distributed metrics 45007ms
   ‚Üí Hook timed out in 45000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with "hookTimeout".
stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Request from blocked IP attempted (06:22:06) {
  ip: [32m'127.0.0.1'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  requestId: [32m'req_1757798526742_xla54jijdgs9'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Event emission blocked by rate limiter (06:22:06) {
  pattern: [32m'global.eventbus.metrics'[39m,
  reason: [32m'IP blocked due to DDoS protection'[39m,
  clientIP: [32m'127.0.0.1'[39m,
  suspicionScore: [32m'100'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Request from blocked IP attempted (06:22:06) {
  ip: [32m'127.0.0.1'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  requestId: [32m'req_1757798526742_w3989wru6oyz'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Event emission blocked by rate limiter (06:22:06) {
  pattern: [32m'global.eventbus.metrics'[39m,
  reason: [32m'IP blocked due to DDoS protection'[39m,
  clientIP: [32m'127.0.0.1'[39m,
  suspicionScore: [32m'100'[39m
}

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Data Consistency > should maintain event ordering with partitioning
‚ÑπÔ∏è [Security] Rate limiter cleanup completed (06:28:06) {
  globalRecords: [32m'0'[39m,
  ipRecords: [32m'0'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'0'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'0'[39m
}

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ÑπÔ∏è [Security] Rate limiter cleanup completed (06:22:06) {
  globalRecords: [32m'0'[39m,
  ipRecords: [32m'0'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'0'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'0'[39m
}

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ÑπÔ∏è [Security] New CSP nonce generated (06:22:06) { noncePrefix: [32m'iwvcvahb'[39m, timestamp: [32m'1757798526742'[39m }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Data Consistency > should maintain event ordering with partitioning
‚ÑπÔ∏è [Security] New CSP nonce generated (06:28:06) { noncePrefix: [32m'f8pboveh'[39m, timestamp: [32m'1757798886702'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Data Consistency > should maintain event ordering with partitioning
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:28:06)
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:28:06)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Data Consistency > should maintain event ordering with partitioning
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:28:06) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:28:06) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:28:06) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:28:06) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:28:06) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:28:06) { instanceId: [32m'undefined'[39m }
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Data Consistency > should maintain event ordering with partitioning
[EventBus] Graceful shutdown completed
[EventBus] Graceful shutdown completed
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:28:06)
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:28:06)

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Data Consistency > should maintain event ordering with partitioning
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:28:06)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:28:06)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:28:06)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:28:06)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:28:06)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:28:06) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:28:06)
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:28:06)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:28:06)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:28:06)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:28:06)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:28:06)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:28:06) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:28:06)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Data Consistency > should handle concurrent updates with conflict resolution
‚ÑπÔ∏è [Security] New CSP nonce generated (06:29:36) { noncePrefix: [32m'f6amhxq0'[39m, timestamp: [32m'1757798976716'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:29:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:29:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:29:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:29:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [Security] New CSP nonce generated (06:29:36) { noncePrefix: [32m'mee0ly8r'[39m, timestamp: [32m'1757798976716'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:29:36)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:29:36) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:29:36) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:29:36) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Data Consistency > should handle concurrent updates with conflict resolution
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:29:36) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:29:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:29:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:29:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:29:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:29:36) { error: {} }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:29:36) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:29:36) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:29:36) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:29:36) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:29:36) { error: {} }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

 √ó src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Data Consistency > should maintain event ordering with partitioning 90013ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:22:06)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Request from blocked IP attempted (06:22:06) {
  ip: [32m'127.0.0.1'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  requestId: [32m'req_1757798526742_o819f9wk0u8r'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Event emission blocked by rate limiter (06:22:06) {
  pattern: [32m'global.eventbus.metrics'[39m,
  reason: [32m'IP blocked due to DDoS protection'[39m,
  clientIP: [32m'127.0.0.1'[39m,
  suspicionScore: [32m'100'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Request from blocked IP attempted (06:22:06) {
  ip: [32m'127.0.0.1'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  requestId: [32m'req_1757798526742_89lt99ys7lup'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
‚ùå [Security] [SECURITY] THREAT: Event emission blocked by rate limiter (06:22:06) {
  pattern: [32m'global.eventbus.metrics'[39m,
  reason: [32m'IP blocked due to DDoS protection'[39m,
  clientIP: [32m'127.0.0.1'[39m,
  suspicionScore: [32m'100'[39m
}

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with isolated microfrontend preset
‚ÑπÔ∏è [Security] New CSP nonce generated (06:22:06) { noncePrefix: [32m'842xrzmt'[39m, timestamp: [32m'1757798526742'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:22:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:22:06) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:22:06) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:22:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with isolated microfrontend preset
‚ùå [Security] [SECURITY] RateLimiter initialized (06:22:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:22:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:22:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:22:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:22:06) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with isolated microfrontend preset
‚ÑπÔ∏è [Security] New CSP nonce generated (06:22:06) { noncePrefix: [32m'pjwbk3pb'[39m, timestamp: [32m'1757798526742'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:22:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:22:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with isolated microfrontend preset
‚ùå [Security] [SECURITY] RateLimiter initialized (06:22:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:22:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:22:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:22:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:22:06) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with isolated microfrontend preset
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:22:06)

 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency 135008ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   ‚Üí Hook timed out in 45000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with "hookTimeout".
stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with isolated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with isolated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with isolated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with isolated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with isolated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with isolated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with isolated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with isolated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with isolated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with isolated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with isolated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with isolated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with isolated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Request from blocked IP attempted (06:22:06) {
  ip: [32m'127.0.0.1'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  requestId: [32m'req_1757798526742_7a33kz1ciwml'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with isolated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Event emission blocked by rate limiter (06:22:06) {
  pattern: [32m'global.eventbus.metrics'[39m,
  reason: [32m'IP blocked due to DDoS protection'[39m,
  clientIP: [32m'127.0.0.1'[39m,
  suspicionScore: [32m'100'[39m
}

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Data Consistency > should handle concurrent updates with conflict resolution
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:29:36)
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:29:36)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Data Consistency > should handle concurrent updates with conflict resolution
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:29:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:29:36) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:29:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:29:36) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:29:36) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:29:36) { instanceId: [32m'undefined'[39m }
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Data Consistency > should handle concurrent updates with conflict resolution
[EventBus] Graceful shutdown completed
[EventBus] Graceful shutdown completed
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:29:36)
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:29:36)

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Data Consistency > should handle concurrent updates with conflict resolution
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:29:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:29:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:29:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:29:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:29:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:29:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:29:36)
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:29:36)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:29:36)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:29:36)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:29:36)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:29:36)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:29:36) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:29:36)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Error Recovery > should recover from BroadcastChannel failures
‚ÑπÔ∏è [Security] New CSP nonce generated (06:31:06) { noncePrefix: [32m'kobp80hs'[39m, timestamp: [32m'1757799066731'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:31:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:31:06) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:31:06) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:31:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [Security] New CSP nonce generated (06:31:06) { noncePrefix: [32m'm92wx552'[39m, timestamp: [32m'1757799066731'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:31:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:31:06) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:31:06) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:31:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Error Recovery > should recover from BroadcastChannel failures
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:31:06) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:31:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:31:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:31:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:31:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:31:06) { error: {} }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:31:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:31:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:31:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:31:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:31:06) { error: {} }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with isolated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with isolated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with coordinated microfrontend preset
‚ÑπÔ∏è [Security] New CSP nonce generated (06:22:06) { noncePrefix: [32m'qx9rxkjr'[39m, timestamp: [32m'1757798526742'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:22:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:22:06) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:22:06) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:22:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with coordinated microfrontend preset
‚ùå [Security] [SECURITY] RateLimiter initialized (06:22:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:22:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:22:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:22:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:22:06) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with coordinated microfrontend preset
‚ÑπÔ∏è [Security] New CSP nonce generated (06:22:06) { noncePrefix: [32m'er56pici'[39m, timestamp: [32m'1757798526742'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:22:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:22:06) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:22:06) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:22:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with coordinated microfrontend preset
‚ùå [Security] [SECURITY] RateLimiter initialized (06:22:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:22:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:22:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:22:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:22:06) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with coordinated microfrontend preset
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:22:06)

 √ó src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Data Consistency > should handle concurrent updates with conflict resolution 90014ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with coordinated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Request from blocked IP attempted (06:22:06) {
  ip: [32m'127.0.0.1'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  requestId: [32m'req_1757798526742_465k2fme5taw'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with coordinated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Event emission blocked by rate limiter (06:22:06) {
  pattern: [32m'global.eventbus.metrics'[39m,
  reason: [32m'IP blocked due to DDoS protection'[39m,
  clientIP: [32m'127.0.0.1'[39m,
  suspicionScore: [32m'100'[39m
}

 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with isolated microfrontend preset 45010ms
   ‚Üí Hook timed out in 45000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with "hookTimeout".
stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with coordinated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with coordinated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with coordinated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with coordinated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with coordinated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with coordinated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with coordinated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with coordinated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with coordinated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with coordinated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with coordinated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with coordinated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with coordinated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Request from blocked IP attempted (06:22:06) {
  ip: [32m'127.0.0.1'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  requestId: [32m'req_1757798526742_71qccvdvoe58'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with coordinated microfrontend preset
‚ùå [Security] [SECURITY] THREAT: Event emission blocked by rate limiter (06:22:06) {
  pattern: [32m'global.eventbus.metrics'[39m,
  reason: [32m'IP blocked due to DDoS protection'[39m,
  clientIP: [32m'127.0.0.1'[39m,
  suspicionScore: [32m'100'[39m
}

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with high-availability preset
‚ÑπÔ∏è [Security] New CSP nonce generated (06:22:06) { noncePrefix: [32m'77f9o69l'[39m, timestamp: [32m'1757798526742'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:22:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:22:06) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:22:06) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:22:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with high-availability preset
‚ùå [Security] [SECURITY] RateLimiter initialized (06:22:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:22:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:22:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:22:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:22:06) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with high-availability preset
‚ÑπÔ∏è [Security] New CSP nonce generated (06:22:06) { noncePrefix: [32m'vmtyov3g'[39m, timestamp: [32m'1757798526742'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:22:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:22:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with high-availability preset
‚ùå [Security] [SECURITY] RateLimiter initialized (06:22:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:22:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:22:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:22:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:22:06) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with high-availability preset
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:22:06)

 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with coordinated microfrontend preset 45014ms
   ‚Üí Hook timed out in 45000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with "hookTimeout".
stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with high-availability preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with high-availability preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with high-availability preset
‚ùå [Security] [SECURITY] THREAT: Request from blocked IP attempted (06:22:06) {
  ip: [32m'127.0.0.1'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  requestId: [32m'req_1757798526742_06zywlwers82'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with high-availability preset
‚ùå [Security] [SECURITY] THREAT: Event emission blocked by rate limiter (06:22:06) {
  pattern: [32m'global.eventbus.metrics'[39m,
  reason: [32m'IP blocked due to DDoS protection'[39m,
  clientIP: [32m'127.0.0.1'[39m,
  suspicionScore: [32m'100'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with high-availability preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with high-availability preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with high-availability preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with high-availability preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Error Recovery > should recover from BroadcastChannel failures
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:31:06)
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:31:06)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Error Recovery > should recover from BroadcastChannel failures
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:31:06) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (06:31:06) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:31:06) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:31:06) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (06:31:06) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (06:31:06) { instanceId: [32m'undefined'[39m }
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Error Recovery > should recover from BroadcastChannel failures
[EventBus] Graceful shutdown completed
[EventBus] Graceful shutdown completed
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:31:06)
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (06:31:06)

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Error Recovery > should recover from BroadcastChannel failures
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:31:06)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:31:06)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:31:06)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:31:06)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:31:06)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:31:06) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:31:06)
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:31:06)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:31:06)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:31:06)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:31:06)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:31:06)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:31:06) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:31:06)

 √ó src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Error Recovery > should recover from BroadcastChannel failures 90013ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with high-availability preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with high-availability preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with high-availability preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with high-availability preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with high-availability preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with high-availability preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with high-availability preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with high-availability preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with high-availability preset
‚ùå [Security] [SECURITY] THREAT: Request from blocked IP attempted (06:22:06) {
  ip: [32m'127.0.0.1'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  requestId: [32m'req_1757798526742_h05xyqgnmql9'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with high-availability preset
‚ùå [Security] [SECURITY] THREAT: Event emission blocked by rate limiter (06:22:06) {
  pattern: [32m'global.eventbus.metrics'[39m,
  reason: [32m'IP blocked due to DDoS protection'[39m,
  clientIP: [32m'127.0.0.1'[39m,
  suspicionScore: [32m'100'[39m
}

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with performance-optimized preset
‚ÑπÔ∏è [Security] New CSP nonce generated (06:22:06) { noncePrefix: [32m'7opsisdk'[39m, timestamp: [32m'1757798526742'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:22:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (06:22:06) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (06:22:06) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:22:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with performance-optimized preset
‚ùå [Security] [SECURITY] RateLimiter initialized (06:22:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:22:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:22:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:22:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:22:06) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with performance-optimized preset
‚ÑπÔ∏è [Security] New CSP nonce generated (06:22:06) { noncePrefix: [32m'cfnrm9u3'[39m, timestamp: [32m'1757798526742'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:22:06)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (06:22:06) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with performance-optimized preset
‚ùå [Security] [SECURITY] RateLimiter initialized (06:22:06) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:22:06) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:22:06) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:22:06) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (06:22:06) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with performance-optimized preset
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (06:22:06)

 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with high-availability preset 45017ms
   ‚Üí Hook timed out in 45000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with "hookTimeout".
stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with performance-optimized preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with performance-optimized preset
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (06:22:06) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with performance-optimized preset
‚ùå [Security] [SECURITY] THREAT: Request from blocked IP attempted (06:22:06) {
  ip: [32m'127.0.0.1'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  requestId: [32m'req_1757798526742_niz5paycaopr'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with performance-optimized preset
‚ùå [Security] [SECURITY] THREAT: Event emission blocked by rate limiter (06:22:06) {
  pattern: [32m'global.eventbus.metrics'[39m,
  reason: [32m'IP blocked due to DDoS protection'[39m,
  clientIP: [32m'127.0.0.1'[39m,
  suspicionScore: [32m'100'[39m
}

 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with performance-optimized preset 45012ms
   ‚Üí Hook timed out in 45000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with "hookTimeout".

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ Failed Tests 39 ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ

 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled
TypeError: eventBus.getInstanceId is not a function
 ‚ùØ src/lib/events/distributed/__tests__/DistributedEventBus.test.ts:166:23
    164|   describe('Initialization', () => {
    165|     it('should initialize with distributed features enabled', () => {
    166|       expect(eventBus.getInstanceId()).toBe('test-instance-1');
       |                       ^
    167|       expect(eventBus.isDistributedEnabled()).toBe(true);
    168|     });

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[1/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
TypeError: microfrontendBus.isDistributedEnabled is not a function
 ‚ùØ src/lib/events/distributed/__tests__/DistributedEventBus.test.ts:181:31
    179|       const microfrontendBus = new DistributedEventBus(microfrontendCo‚Ä¶
    180|       
    181|       expect(microfrontendBus.isDistributedEnabled()).toBe(true);
       |                               ^
    182|       expect(microfrontendBus.getConfig().busId).toBe('microfrontend-b‚Ä¶
    183|     });

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[2/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
Error: Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ‚ùØ src/lib/events/distributed/__tests__/DistributedEventBus.test.ts:187:5
    185| 
    186|   describe('Event Distribution', () => {
    187|     it('should emit events locally and distribute to other instances',‚Ä¶
       |     ^
    188|       const localListener = vi.fn();
    189|       eventBus.on('test.pattern', localListener);

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[3/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
AssertionError: expected "spy" to be called with arguments: [ ObjectContaining{‚Ä¶} ][90m

Number of calls: [1m0[22m
[39m
 ‚ùØ src/lib/events/distributed/__tests__/DistributedEventBus.test.ts:218:30
    216|       await (eventBus as any).handleRemoteEvent(remoteEvent);
    217| 
    218|       expect(remoteListener).toHaveBeenCalledWith(
       |                              ^
    219|         expect.objectContaining({
    220|           pattern: 'remote.pattern',

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[4/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
Error: Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ‚ùØ src/lib/events/distributed/__tests__/DistributedEventBus.test.ts:226:5
    224|     });
    225| 
    226|     it('should prevent infinite loops when distributing events', async‚Ä¶
       |     ^
    227|       const listener = vi.fn();
    228|       eventBus.on('loop.test', listener);

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[5/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
TypeError: eventBus.handleLeadershipChange is not a function
 ‚ùØ src/lib/events/distributed/__tests__/DistributedEventBus.test.ts:254:31
    252| 
    253|       // Simulate leadership change (normally triggered by BrowserLead‚Ä¶
    254|       await (eventBus as any).handleLeadershipChange(true);
       |                               ^
    255| 
    256|       expect(leadershipCallback).toHaveBeenCalledWith(true);

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[6/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected
TypeError: eventBus.handleLeadershipChange is not a function
 ‚ùØ src/lib/events/distributed/__tests__/DistributedEventBus.test.ts:261:31
    259|     it('should perform leader responsibilities when elected', async ()‚Ä¶
    260|       // Force leadership for testing
    261|       await (eventBus as any).handleLeadershipChange(true);
       |                               ^
    262| 
    263|       const status = eventBus.getDistributedStatus();

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[7/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions
TypeError: eventBus.handleNetworkPartition is not a function
 ‚ùØ src/lib/events/distributed/__tests__/DistributedEventBus.test.ts:281:31
    279| 
    280|       // Simulate network partition
    281|       await (eventBus as any).handleNetworkPartition();
       |                               ^
    282| 
    283|       expect(partitionCallback).toHaveBeenCalled();

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[8/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing
TypeError: eventBus.handlePartitionHealing is not a function
 ‚ùØ src/lib/events/distributed/__tests__/DistributedEventBus.test.ts:291:31
    289| 
    290|       // Simulate partition healing
    291|       await (eventBus as any).handlePartitionHealing();
       |                               ^
    292| 
    293|       expect(healingCallback).toHaveBeenCalled();

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[9/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions
TypeError: eventBus.handleNetworkPartition is not a function
 ‚ùØ src/lib/events/distributed/__tests__/DistributedEventBus.test.ts:298:31
    296|     it('should fallback gracefully during partitions', async () => {
    297|       // Simulate partition state
    298|       await (eventBus as any).handleNetworkPartition();
       |                               ^
    299| 
    300|       // Events should still work locally

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[10/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently
TypeError: eventBus.getPartitionInfo is not a function
 ‚ùØ src/lib/events/distributed/__tests__/DistributedEventBus.test.ts:311:54
    309|   describe('Event Partitioning', () => {
    310|     it('should partition events consistently', async () => {
    311|       const partitionInfo1 = await (eventBus as any).getPartitionInfo(‚Ä¶
       |                                                      ^
    312|       const partitionInfo2 = await (eventBus as any).getPartitionInfo(‚Ä¶
    313| 

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[11/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
Error: Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ‚ùØ src/lib/events/distributed/__tests__/DistributedEventBus.test.ts:318:5
    316|     });
    317| 
    318|     it('should maintain ordering within partitions', async () => {
       |     ^
    319|       const orderedEvents: NamespacedEvent[] = [];
    320|       

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[12/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
Error: Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ‚ùØ src/lib/events/distributed/__tests__/DistributedEventBus.test.ts:342:5
    340| 
    341|   describe('Distributed Storage', () => {
    342|     it('should persist events in distributed store', async () => {
       |     ^
    343|       await eventBus.emit('stored.test', { data: 'persist-me' });
    344| 

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[13/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks
TypeError: eventBus.handleConflictingEvent is not a function
 ‚ùØ src/lib/events/distributed/__tests__/DistributedEventBus.test.ts:355:31
    353| 
    354|       // Simulate concurrent updates from different instances
    355|       await (eventBus as any).handleConflictingEvent(event1, event2);
       |                               ^
    356| 
    357|       // Should resolve based on vector clock ordering

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[14/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
Error: Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ‚ùØ src/lib/events/distributed/__tests__/DistributedEventBus.test.ts:368:5
    366|     });
    367| 
    368|     it('should compress large messages', async () => {
       |     ^
    369|       const largeData = 'x'.repeat(10000); // 10KB of data
    370|       

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[15/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully
TypeError: eventBus.handleInstanceShutdown is not a function
 ‚ùØ src/lib/events/distributed/__tests__/DistributedEventBus.test.ts:382:31
    380| 
    381|       // Simulate another instance shutting down
    382|       await (eventBus as any).handleInstanceShutdown('other-instance-i‚Ä¶
       |                               ^
    383| 
    384|       expect(shutdownCallback).toHaveBeenCalledWith('other-instance-id‚Ä¶

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[16/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
Error: Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ‚ùØ src/lib/events/distributed/__tests__/DistributedEventBus.test.ts:389:5
    387| 
    388|   describe('Error Handling and Resilience', () => {
    389|     it('should handle BroadcastChannel errors gracefully', async () =>‚Ä¶
       |     ^
    390|       // Mock BroadcastChannel to throw error
    391|       const originalPostMessage = MockBroadcastChannel.prototype.postM‚Ä¶

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[17/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should recover from temporary failures
 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should provide distributed metrics
 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with isolated microfrontend preset
 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with coordinated microfrontend preset
 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with high-availability preset
 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Configuration Presets > should work with performance-optimized preset
Error: Hook timed out in 45000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with "hookTimeout".
 ‚ùØ src/lib/events/distributed/__tests__/DistributedEventBus.test.ts:156:3
    154|   });
    155| 
    156|   afterEach(async () => {
       |   ^
    157|     if (eventBus) {
    158|       await eventBus.destroy();

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[18/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
Error: Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ‚ùØ src/lib/events/distributed/__tests__/DistributedEventBus.test.ts:403:5
    401|     });
    402| 
    403|     it('should handle IndexedDB errors gracefully', async () => {
       |     ^
    404|       // Mock IndexedDB to fail
    405|       mockIndexedDB.open.mockImplementation(() => {

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[19/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should recover from temporary failures
TypeError: eventBus.emitWithRetry is not a function
 ‚ùØ src/lib/events/distributed/__tests__/DistributedEventBus.test.ts:439:31
    437|       eventBus.on('retry.test', listener);
    438|       
    439|       await (eventBus as any).emitWithRetry('retry.test', { data: 'tes‚Ä¶
       |                               ^
    440|       expect(listener).toHaveBeenCalled();
    441|     });

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[20/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Performance and Metrics > should track cross-instance latency
Error: Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ‚ùØ src/lib/events/distributed/__tests__/DistributedEventBus.test.ts:455:5
    453|     });
    454| 
    455|     it('should track cross-instance latency', async () => {
       |     ^
    456|       await eventBus.emit('latency.test', { timestamp: Date.now() });
    457| 

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[21/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should propagate events across multiple instances
Error: Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ‚ùØ src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts:149:5
    147| 
    148|   describe('Multi-Instance Communication', () => {
    149|     it('should propagate events across multiple instances', async () =‚Ä¶
       |     ^
    150|       const instance1 = createInstance('instance-1');
    151|       const instance2 = createInstance('instance-2');

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[22/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should maintain event ordering across instances
Error: Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ‚ùØ src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts:184:5
    182|     });
    183| 
    184|     it('should maintain event ordering across instances', async () => {
       |     ^
    185|       const instance1 = createInstance('instance-1');
    186|       const instance2 = createInstance('instance-2');

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[23/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should handle different bus IDs independently
Error: Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ‚ùØ src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts:212:5
    210|     });
    211| 
    212|     it('should handle different bus IDs independently', async () => {
       |     ^
    213|       const busA1 = createInstance('instance-1', 'bus-a');
    214|       const busA2 = createInstance('instance-2', 'bus-a');

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[24/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should elect leader consistently across instances
Error: Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ‚ùØ src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts:251:5
    249| 
    250|   describe('Leader Election Integration', () => {
    251|     it('should elect leader consistently across instances', async () =‚Ä¶
       |     ^
    252|       const instance1 = createInstance('instance-1', 'leader-test', {
    253|         distributed: { leaderElection: { priority: 100 } }

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[25/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should handle leader failure and re-election
Error: Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ‚ùØ src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts:276:5
    274|     });
    275| 
    276|     it('should handle leader failure and re-election', async () => {
       |     ^
    277|       const instance1 = createInstance('instance-1', 'failover-test', {
    278|         distributed: { leaderElection: { priority: 200 } }

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[26/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should detect and handle network partitions
Error: Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ‚ùØ src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts:303:5
    301| 
    302|   describe('Network Partition Handling', () => {
    303|     it('should detect and handle network partitions', async () => {
       |     ^
    304|       const instance1 = createInstance('instance-1');
    305|       const instance2 = createInstance('instance-2');

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[27/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should recover from network partitions
Error: Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ‚ùØ src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts:326:5
    324|     });
    325| 
    326|     it('should recover from network partitions', async () => {
       |     ^
    327|       const instance1 = createInstance('instance-1');
    328|       const instance2 = createInstance('instance-2');

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[28/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Factory Pattern Integration > should manage multiple bus instances through factory
Error: Instance undefined already exists
 ‚ùØ DistributedEventBusFactory.createInstance src/lib/events/distributed/DistributedEventBusFactory.ts:99:13
     97|     // Check if instance already exists
     98|     if (this.instances.has(instanceId)) {
     99|       throw new Error(`Instance ${instanceId} already exists`);
       |             ^
    100|     }
    101| 
 ‚ùØ src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts:361:39

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[29/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Factory Pattern Integration > should handle microfrontend factory patterns
Error: Instance undefined already exists
 ‚ùØ DistributedEventBusFactory.createInstance src/lib/events/distributed/DistributedEventBusFactory.ts:99:13
     97|     // Check if instance already exists
     98|     if (this.instances.has(instanceId)) {
     99|       throw new Error(`Instance ${instanceId} already exists`);
       |             ^
    100|     }
    101| 
 ‚ùØ src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts:394:41

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[30/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Performance and Scalability > should handle high-throughput event distribution
Error: Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ‚ùØ src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts:410:5
    408| 
    409|   describe('Performance and Scalability', () => {
    410|     it('should handle high-throughput event distribution', async () =>‚Ä¶
       |     ^
    411|       const instance1 = createInstance('perf-1');
    412|       const instance2 = createInstance('perf-2');

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[31/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Performance and Scalability > should handle network latency gracefully
Error: Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ‚ùØ src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts:440:5
    438|     });
    439| 
    440|     it('should handle network latency gracefully', async () => {
       |     ^
    441|       // Simulate high network latency
    442|       MockBroadcastChannel.simulateLatency(100);

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[32/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Data Consistency > should maintain event ordering with partitioning
Error: Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ‚ùØ src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts:480:5
    478| 
    479|   describe('Data Consistency', () => {
    480|     it('should maintain event ordering with partitioning', async () =>‚Ä¶
       |     ^
    481|       const instance1 = createInstance('partition-1', 'consistency-bus‚Ä¶
    482|       const instance2 = createInstance('partition-2', 'consistency-bus‚Ä¶

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[33/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Data Consistency > should handle concurrent updates with conflict resolution
Error: Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ‚ùØ src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts:512:5
    510|     });
    511| 
    512|     it('should handle concurrent updates with conflict resolution', as‚Ä¶
       |     ^
    513|       const instance1 = createInstance('conflict-1', 'conflict-bus');
    514|       const instance2 = createInstance('conflict-2', 'conflict-bus');

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[34/43]‚éØ

 FAIL  src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Error Recovery > should recover from BroadcastChannel failures
Error: Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ‚ùØ src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts:541:5
    539| 
    540|   describe('Error Recovery', () => {
    541|     it('should recover from BroadcastChannel failures', async () => {
       |     ^
    542|       const instance1 = createInstance('recovery-1');
    543|       const instance2 = createInstance('recovery-2');

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[35/43]‚éØ

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ Unhandled Errors ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ

Vitest caught 21 unhandled errors during the test run.
This might cause false positive tests. Resolve unhandled errors to make sure your tests are not affected.

‚éØ‚éØ‚éØ‚éØ Unhandled Rejection ‚éØ‚éØ‚éØ‚éØ‚éØ
Error: Rate limit exceeded: DDoS attack pattern detected
 ‚ùØ DistributedEventBus.emit src/lib/events/EventBus.ts:405:15
    403|           suspicionScore: rateLimitResult.suspicionScore
    404|         });
    405|         throw new Error(`Rate limit exceeded: ${rateLimitResult.reason‚Ä¶
       |               ^
    406|       }
    407|     }
 ‚ùØ runNextTicks node:internal/process/task_queues:65:5
 ‚ùØ listOnTimeout node:internal/timers:569:9
 ‚ùØ processTimers node:internal/timers:543:7
 ‚ùØ DistributedEventBus.emit src/lib/events/distributed/DistributedEventBus.ts:179:5
 ‚ùØ Timeout._onTimeout src/lib/events/EventBus.ts:1255:7

This error originated in "src/lib/events/distributed/__tests__/DistributedEventBus.test.ts" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.
The latest test that might've caused the error is "should handle BroadcastChannel errors gracefully". It might mean one of the following:
- The error was thrown, while Vitest was running this test.
- If the error occurred after the test had been completed, this was the last documented test before it was thrown.

‚éØ‚éØ‚éØ‚éØ Unhandled Rejection ‚éØ‚éØ‚éØ‚éØ‚éØ
Error: Rate limit exceeded: IP blocked due to DDoS protection
 ‚ùØ DistributedEventBus.emit src/lib/events/EventBus.ts:405:15
    403|           suspicionScore: rateLimitResult.suspicionScore
    404|         });
    405|         throw new Error(`Rate limit exceeded: ${rateLimitResult.reason‚Ä¶
       |               ^
    406|       }
    407|     }
 ‚ùØ runNextTicks node:internal/process/task_queues:65:5
 ‚ùØ listOnTimeout node:internal/timers:569:9
 ‚ùØ processTimers node:internal/timers:543:7
 ‚ùØ DistributedEventBus.emit src/lib/events/distributed/DistributedEventBus.ts:179:5
 ‚ùØ Timeout._onTimeout src/lib/events/EventBus.ts:1255:7

This error originated in "src/lib/events/distributed/__tests__/DistributedEventBus.test.ts" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.
The latest test that might've caused the error is "should handle IndexedDB errors gracefully". It might mean one of the following:
- The error was thrown, while Vitest was running this test.
- If the error occurred after the test had been completed, this was the last documented test before it was thrown.

‚éØ‚éØ‚éØ‚éØ‚éØ Uncaught Exception ‚éØ‚éØ‚éØ‚éØ‚éØ
TypeError: Cannot read properties of undefined (reading 'createIndex')
 ‚ùØ Object.onupgradeneeded src/lib/events/DeduplicationManager.ts:59:17
     57|           
     58|           // Indexes for efficient querying
     59|           store.createIndex('operationId', 'operationId', { unique: tr‚Ä¶
       |                 ^
     60|           store.createIndex('semanticKey', 'semanticKey');
     61|           store.createIndex('timestamp', 'timestamp');
 ‚ùØ Timeout._onTimeout src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts:33:46
 ‚ùØ listOnTimeout node:internal/timers:608:17
 ‚ùØ processTimers node:internal/timers:543:7

This error originated in "src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.
The latest test that might've caused the error is "should handle microfrontend factory patterns". It might mean one of the following:
- The error was thrown, while Vitest was running this test.
- If the error occurred after the test had been completed, this was the last documented test before it was thrown.

‚éØ‚éØ‚éØ‚éØ‚éØ Uncaught Exception ‚éØ‚éØ‚éØ‚éØ‚éØ
TypeError: Cannot read properties of undefined (reading 'createIndex')
 ‚ùØ Object.onupgradeneeded src/lib/events/DeduplicationManager.ts:59:17
     57|           
     58|           // Indexes for efficient querying
     59|           store.createIndex('operationId', 'operationId', { unique: tr‚Ä¶
       |                 ^
     60|           store.createIndex('semanticKey', 'semanticKey');
     61|           store.createIndex('timestamp', 'timestamp');
 ‚ùØ Timeout._onTimeout src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts:33:46
 ‚ùØ listOnTimeout node:internal/timers:608:17
 ‚ùØ processTimers node:internal/timers:543:7

This error originated in "src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.
The latest test that might've caused the error is "should handle high-throughput event distribution". It might mean one of the following:
- The error was thrown, while Vitest was running this test.
- If the error occurred after the test had been completed, this was the last documented test before it was thrown.

‚éØ‚éØ‚éØ‚éØ Unhandled Rejection ‚éØ‚éØ‚éØ‚éØ‚éØ
Error: Rate limit exceeded: IP blocked due to DDoS protection
 ‚ùØ DistributedEventBus.emit src/lib/events/EventBus.ts:405:15
    403|           suspicionScore: rateLimitResult.suspicionScore
    404|         });
    405|         throw new Error(`Rate limit exceeded: ${rateLimitResult.reason‚Ä¶
       |               ^
    406|       }
    407|     }
 ‚ùØ runNextTicks node:internal/process/task_queues:65:5
 ‚ùØ listOnTimeout node:internal/timers:569:9
 ‚ùØ processTimers node:internal/timers:543:7
 ‚ùØ DistributedEventBus.emit src/lib/events/distributed/DistributedEventBus.ts:179:5
 ‚ùØ Timeout._onTimeout src/lib/events/EventBus.ts:1255:7

This error originated in "src/lib/events/distributed/__tests__/DistributedEventBus.test.ts" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.
The latest test that might've caused the error is "should handle IndexedDB errors gracefully". It might mean one of the following:
- The error was thrown, while Vitest was running this test.
- If the error occurred after the test had been completed, this was the last documented test before it was thrown.

‚éØ‚éØ‚éØ‚éØ Unhandled Rejection ‚éØ‚éØ‚éØ‚éØ‚éØ
Error: Rate limit exceeded: IP blocked due to DDoS protection
 ‚ùØ DistributedEventBus.emit src/lib/events/EventBus.ts:405:15
    403|           suspicionScore: rateLimitResult.suspicionScore
    404|         });
    405|         throw new Error(`Rate limit exceeded: ${rateLimitResult.reason‚Ä¶
       |               ^
    406|       }
    407|     }
 ‚ùØ runNextTicks node:internal/process/task_queues:65:5
 ‚ùØ listOnTimeout node:internal/timers:569:9
 ‚ùØ processTimers node:internal/timers:543:7
 ‚ùØ DistributedEventBus.emit src/lib/events/distributed/DistributedEventBus.ts:179:5
 ‚ùØ Timeout._onTimeout src/lib/events/EventBus.ts:1255:7

This error originated in "src/lib/events/distributed/__tests__/DistributedEventBus.test.ts" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.
The latest test that might've caused the error is "should handle IndexedDB errors gracefully". It might mean one of the following:
- The error was thrown, while Vitest was running this test.
- If the error occurred after the test had been completed, this was the last documented test before it was thrown.

‚éØ‚éØ‚éØ‚éØ Unhandled Rejection ‚éØ‚éØ‚éØ‚éØ‚éØ
Error: Rate limit exceeded: IP blocked due to DDoS protection
 ‚ùØ DistributedEventBus.emit src/lib/events/EventBus.ts:405:15
    403|           suspicionScore: rateLimitResult.suspicionScore
    404|         });
    405|         throw new Error(`Rate limit exceeded: ${rateLimitResult.reason‚Ä¶
       |               ^
    406|       }
    407|     }
 ‚ùØ runNextTicks node:internal/process/task_queues:65:5
 ‚ùØ listOnTimeout node:internal/timers:569:9
 ‚ùØ processTimers node:internal/timers:543:7
 ‚ùØ DistributedEventBus.emit src/lib/events/distributed/DistributedEventBus.ts:179:5
 ‚ùØ Timeout._onTimeout src/lib/events/EventBus.ts:1255:7

This error originated in "src/lib/events/distributed/__tests__/DistributedEventBus.test.ts" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.
The latest test that might've caused the error is "should handle IndexedDB errors gracefully". It might mean one of the following:
- The error was thrown, while Vitest was running this test.
- If the error occurred after the test had been completed, this was the last documented test before it was thrown.

‚éØ‚éØ‚éØ‚éØ Unhandled Rejection ‚éØ‚éØ‚éØ‚éØ‚éØ
Error: Rate limit exceeded: IP blocked due to DDoS protection
 ‚ùØ DistributedEventBus.emit src/lib/events/EventBus.ts:405:15
    403|           suspicionScore: rateLimitResult.suspicionScore
    404|         });
    405|         throw new Error(`Rate limit exceeded: ${rateLimitResult.reason‚Ä¶
       |               ^
    406|       }
    407|     }
 ‚ùØ runNextTicks node:internal/process/task_queues:65:5
 ‚ùØ listOnTimeout node:internal/timers:569:9
 ‚ùØ processTimers node:internal/timers:543:7
 ‚ùØ DistributedEventBus.emit src/lib/events/distributed/DistributedEventBus.ts:179:5
 ‚ùØ Timeout._onTimeout src/lib/events/EventBus.ts:1255:7

This error originated in "src/lib/events/distributed/__tests__/DistributedEventBus.test.ts" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.
The latest test that might've caused the error is "should handle IndexedDB errors gracefully". It might mean one of the following:
- The error was thrown, while Vitest was running this test.
- If the error occurred after the test had been completed, this was the last documented test before it was thrown.

‚éØ‚éØ‚éØ‚éØ Unhandled Rejection ‚éØ‚éØ‚éØ‚éØ‚éØ
Error: Rate limit exceeded: IP blocked due to DDoS protection
 ‚ùØ DistributedEventBus.emit src/lib/events/EventBus.ts:405:15
    403|           suspicionScore: rateLimitResult.suspicionScore
    404|         });
    405|         throw new Error(`Rate limit exceeded: ${rateLimitResult.reason‚Ä¶
       |               ^
    406|       }
    407|     }
 ‚ùØ runNextTicks node:internal/process/task_queues:65:5
 ‚ùØ listOnTimeout node:internal/timers:569:9
 ‚ùØ processTimers node:internal/timers:543:7
 ‚ùØ DistributedEventBus.emit src/lib/events/distributed/DistributedEventBus.ts:179:5
 ‚ùØ Timeout._onTimeout src/lib/events/EventBus.ts:1255:7

This error originated in "src/lib/events/distributed/__tests__/DistributedEventBus.test.ts" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.
The latest test that might've caused the error is "should recover from temporary failures". It might mean one of the following:
- The error was thrown, while Vitest was running this test.
- If the error occurred after the test had been completed, this was the last documented test before it was thrown.

‚éØ‚éØ‚éØ‚éØ Unhandled Rejection ‚éØ‚éØ‚éØ‚éØ‚éØ
Error: Rate limit exceeded: IP blocked due to DDoS protection
 ‚ùØ DistributedEventBus.emit src/lib/events/EventBus.ts:405:15
    403|           suspicionScore: rateLimitResult.suspicionScore
    404|         });
    405|         throw new Error(`Rate limit exceeded: ${rateLimitResult.reason‚Ä¶
       |               ^
    406|       }
    407|     }
 ‚ùØ runNextTicks node:internal/process/task_queues:65:5
 ‚ùØ listOnTimeout node:internal/timers:569:9
 ‚ùØ processTimers node:internal/timers:543:7
 ‚ùØ DistributedEventBus.emit src/lib/events/distributed/DistributedEventBus.ts:179:5
 ‚ùØ Timeout._onTimeout src/lib/events/EventBus.ts:1255:7

This error originated in "src/lib/events/distributed/__tests__/DistributedEventBus.test.ts" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.
The latest test that might've caused the error is "should provide distributed metrics". It might mean one of the following:
- The error was thrown, while Vitest was running this test.
- If the error occurred after the test had been completed, this was the last documented test before it was thrown.

‚éØ‚éØ‚éØ‚éØ Unhandled Rejection ‚éØ‚éØ‚éØ‚éØ‚éØ
Error: Rate limit exceeded: IP blocked due to DDoS protection
 ‚ùØ DistributedEventBus.emit src/lib/events/EventBus.ts:405:15
    403|           suspicionScore: rateLimitResult.suspicionScore
    404|         });
    405|         throw new Error(`Rate limit exceeded: ${rateLimitResult.reason‚Ä¶
       |               ^
    406|       }
    407|     }
 ‚ùØ runNextTicks node:internal/process/task_queues:65:5
 ‚ùØ listOnTimeout node:internal/timers:569:9
 ‚ùØ processTimers node:internal/timers:543:7
 ‚ùØ DistributedEventBus.emit src/lib/events/distributed/DistributedEventBus.ts:179:5
 ‚ùØ Timeout._onTimeout src/lib/events/EventBus.ts:1255:7

This error originated in "src/lib/events/distributed/__tests__/DistributedEventBus.test.ts" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.
The latest test that might've caused the error is "should provide distributed metrics". It might mean one of the following:
- The error was thrown, while Vitest was running this test.
- If the error occurred after the test had been completed, this was the last documented test before it was thrown.

‚éØ‚éØ‚éØ‚éØ Unhandled Rejection ‚éØ‚éØ‚éØ‚éØ‚éØ
Error: Rate limit exceeded: IP blocked due to DDoS protection
 ‚ùØ DistributedEventBus.emit src/lib/events/EventBus.ts:405:15
    403|           suspicionScore: rateLimitResult.suspicionScore
    404|         });
    405|         throw new Error(`Rate limit exceeded: ${rateLimitResult.reason‚Ä¶
       |               ^
    406|       }
    407|     }
 ‚ùØ runNextTicks node:internal/process/task_queues:65:5
 ‚ùØ listOnTimeout node:internal/timers:569:9
 ‚ùØ processTimers node:internal/timers:543:7
 ‚ùØ DistributedEventBus.emit src/lib/events/distributed/DistributedEventBus.ts:179:5
 ‚ùØ Timeout._onTimeout src/lib/events/EventBus.ts:1255:7

This error originated in "src/lib/events/distributed/__tests__/DistributedEventBus.test.ts" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.
The latest test that might've caused the error is "should track cross-instance latency". It might mean one of the following:
- The error was thrown, while Vitest was running this test.
- If the error occurred after the test had been completed, this was the last documented test before it was thrown.

‚éØ‚éØ‚éØ‚éØ Unhandled Rejection ‚éØ‚éØ‚éØ‚éØ‚éØ
Error: Rate limit exceeded: IP blocked due to DDoS protection
 ‚ùØ DistributedEventBus.emit src/lib/events/EventBus.ts:405:15
    403|           suspicionScore: rateLimitResult.suspicionScore
    404|         });
    405|         throw new Error(`Rate limit exceeded: ${rateLimitResult.reason‚Ä¶
       |               ^
    406|       }
    407|     }
 ‚ùØ runNextTicks node:internal/process/task_queues:65:5
 ‚ùØ listOnTimeout node:internal/timers:569:9
 ‚ùØ processTimers node:internal/timers:543:7
 ‚ùØ DistributedEventBus.emit src/lib/events/distributed/DistributedEventBus.ts:179:5
 ‚ùØ Timeout._onTimeout src/lib/events/EventBus.ts:1255:7

This error originated in "src/lib/events/distributed/__tests__/DistributedEventBus.test.ts" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.
The latest test that might've caused the error is "should track cross-instance latency". It might mean one of the following:
- The error was thrown, while Vitest was running this test.
- If the error occurred after the test had been completed, this was the last documented test before it was thrown.

‚éØ‚éØ‚éØ‚éØ Unhandled Rejection ‚éØ‚éØ‚éØ‚éØ‚éØ
Error: Rate limit exceeded: IP blocked due to DDoS protection
 ‚ùØ DistributedEventBus.emit src/lib/events/EventBus.ts:405:15
    403|           suspicionScore: rateLimitResult.suspicionScore
    404|         });
    405|         throw new Error(`Rate limit exceeded: ${rateLimitResult.reason‚Ä¶
       |               ^
    406|       }
    407|     }
 ‚ùØ DistributedEventBus.emit src/lib/events/distributed/DistributedEventBus.ts:179:5
 ‚ùØ Timeout._onTimeout src/lib/events/EventBus.ts:1255:7

This error originated in "src/lib/events/distributed/__tests__/DistributedEventBus.test.ts" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.
The latest test that might've caused the error is "should track cross-instance latency". It might mean one of the following:
- The error was thrown, while Vitest was running this test.
- If the error occurred after the test had been completed, this was the last documented test before it was thrown.

‚éØ‚éØ‚éØ‚éØ Unhandled Rejection ‚éØ‚éØ‚éØ‚éØ‚éØ
Error: Rate limit exceeded: IP blocked due to DDoS protection
 ‚ùØ DistributedEventBus.emit src/lib/events/EventBus.ts:405:15
    403|           suspicionScore: rateLimitResult.suspicionScore
    404|         });
    405|         throw new Error(`Rate limit exceeded: ${rateLimitResult.reason‚Ä¶
       |               ^
    406|       }
    407|     }
 ‚ùØ DistributedEventBus.emit src/lib/events/distributed/DistributedEventBus.ts:179:5
 ‚ùØ Timeout._onTimeout src/lib/events/EventBus.ts:1255:7

This error originated in "src/lib/events/distributed/__tests__/DistributedEventBus.test.ts" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.
The latest test that might've caused the error is "should track cross-instance latency". It might mean one of the following:
- The error was thrown, while Vitest was running this test.
- If the error occurred after the test had been completed, this was the last documented test before it was thrown.

‚éØ‚éØ‚éØ‚éØ Unhandled Rejection ‚éØ‚éØ‚éØ‚éØ‚éØ
Error: Rate limit exceeded: IP blocked due to DDoS protection
 ‚ùØ DistributedEventBus.emit src/lib/events/EventBus.ts:405:15
    403|           suspicionScore: rateLimitResult.suspicionScore
    404|         });
    405|         throw new Error(`Rate limit exceeded: ${rateLimitResult.reason‚Ä¶
       |               ^
    406|       }
    407|     }
 ‚ùØ DistributedEventBus.emit src/lib/events/distributed/DistributedEventBus.ts:179:5
 ‚ùØ Timeout._onTimeout src/lib/events/EventBus.ts:1255:7

This error originated in "src/lib/events/distributed/__tests__/DistributedEventBus.test.ts" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.
The latest test that might've caused the error is "should work with isolated microfrontend preset". It might mean one of the following:
- The error was thrown, while Vitest was running this test.
- If the error occurred after the test had been completed, this was the last documented test before it was thrown.

‚éØ‚éØ‚éØ‚éØ Unhandled Rejection ‚éØ‚éØ‚éØ‚éØ‚éØ
Error: Rate limit exceeded: IP blocked due to DDoS protection
 ‚ùØ DistributedEventBus.emit src/lib/events/EventBus.ts:405:15
    403|           suspicionScore: rateLimitResult.suspicionScore
    404|         });
    405|         throw new Error(`Rate limit exceeded: ${rateLimitResult.reason‚Ä¶
       |               ^
    406|       }
    407|     }
 ‚ùØ DistributedEventBus.emit src/lib/events/distributed/DistributedEventBus.ts:179:5
 ‚ùØ Timeout._onTimeout src/lib/events/EventBus.ts:1255:7

This error originated in "src/lib/events/distributed/__tests__/DistributedEventBus.test.ts" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.
The latest test that might've caused the error is "should work with coordinated microfrontend preset". It might mean one of the following:
- The error was thrown, while Vitest was running this test.
- If the error occurred after the test had been completed, this was the last documented test before it was thrown.

‚éØ‚éØ‚éØ‚éØ Unhandled Rejection ‚éØ‚éØ‚éØ‚éØ‚éØ
Error: Rate limit exceeded: IP blocked due to DDoS protection
 ‚ùØ DistributedEventBus.emit src/lib/events/EventBus.ts:405:15
    403|           suspicionScore: rateLimitResult.suspicionScore
    404|         });
    405|         throw new Error(`Rate limit exceeded: ${rateLimitResult.reason‚Ä¶
       |               ^
    406|       }
    407|     }
 ‚ùØ DistributedEventBus.emit src/lib/events/distributed/DistributedEventBus.ts:179:5
 ‚ùØ Timeout._onTimeout src/lib/events/EventBus.ts:1255:7

This error originated in "src/lib/events/distributed/__tests__/DistributedEventBus.test.ts" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.
The latest test that might've caused the error is "should work with coordinated microfrontend preset". It might mean one of the following:
- The error was thrown, while Vitest was running this test.
- If the error occurred after the test had been completed, this was the last documented test before it was thrown.

‚éØ‚éØ‚éØ‚éØ Unhandled Rejection ‚éØ‚éØ‚éØ‚éØ‚éØ
Error: Rate limit exceeded: IP blocked due to DDoS protection
 ‚ùØ DistributedEventBus.emit src/lib/events/EventBus.ts:405:15
    403|           suspicionScore: rateLimitResult.suspicionScore
    404|         });
    405|         throw new Error(`Rate limit exceeded: ${rateLimitResult.reason‚Ä¶
       |               ^
    406|       }
    407|     }
 ‚ùØ DistributedEventBus.emit src/lib/events/distributed/DistributedEventBus.ts:179:5
 ‚ùØ Timeout._onTimeout src/lib/events/EventBus.ts:1255:7

This error originated in "src/lib/events/distributed/__tests__/DistributedEventBus.test.ts" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.
The latest test that might've caused the error is "should work with high-availability preset". It might mean one of the following:
- The error was thrown, while Vitest was running this test.
- If the error occurred after the test had been completed, this was the last documented test before it was thrown.

‚éØ‚éØ‚éØ‚éØ Unhandled Rejection ‚éØ‚éØ‚éØ‚éØ‚éØ
Error: Rate limit exceeded: IP blocked due to DDoS protection
 ‚ùØ DistributedEventBus.emit src/lib/events/EventBus.ts:405:15
    403|           suspicionScore: rateLimitResult.suspicionScore
    404|         });
    405|         throw new Error(`Rate limit exceeded: ${rateLimitResult.reason‚Ä¶
       |               ^
    406|       }
    407|     }
 ‚ùØ DistributedEventBus.emit src/lib/events/distributed/DistributedEventBus.ts:179:5
 ‚ùØ Timeout._onTimeout src/lib/events/EventBus.ts:1255:7

This error originated in "src/lib/events/distributed/__tests__/DistributedEventBus.test.ts" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.
The latest test that might've caused the error is "should work with high-availability preset". It might mean one of the following:
- The error was thrown, while Vitest was running this test.
- If the error occurred after the test had been completed, this was the last documented test before it was thrown.

‚éØ‚éØ‚éØ‚éØ Unhandled Rejection ‚éØ‚éØ‚éØ‚éØ‚éØ
Error: Rate limit exceeded: IP blocked due to DDoS protection
 ‚ùØ DistributedEventBus.emit src/lib/events/EventBus.ts:405:15
    403|           suspicionScore: rateLimitResult.suspicionScore
    404|         });
    405|         throw new Error(`Rate limit exceeded: ${rateLimitResult.reason‚Ä¶
       |               ^
    406|       }
    407|     }
 ‚ùØ DistributedEventBus.emit src/lib/events/distributed/DistributedEventBus.ts:179:5
 ‚ùØ Timeout._onTimeout src/lib/events/EventBus.ts:1255:7

This error originated in "src/lib/events/distributed/__tests__/DistributedEventBus.test.ts" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.
The latest test that might've caused the error is "should work with performance-optimized preset". It might mean one of the following:
- The error was thrown, while Vitest was running this test.
- If the error occurred after the test had been completed, this was the last documented test before it was thrown.
‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ


 Test Files  2 failed | 1 passed (3)
      Tests  39 failed | 22 passed (61)
     Errors  21 errors
   Start at  18:14:33
   Duration  1128.01s (transform 524ms, setup 929ms, collect 1.17s, tests 2263.90s, environment 3.87s, prepare 699ms)

