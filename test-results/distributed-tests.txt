
 RUN  v3.2.4 I:/Programacion/Proyectos/g-mini

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should initialize with correct configuration
[DEBUG] test-instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] test-instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:49:27) {
  instanceId: [32m'test-instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should initialize with correct configuration
[DEBUG] test-instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: SHUTDOWN, senderId: test-instance-1
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:49:27) { instanceId: [32m'test-instance-1'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should initialize with correct configuration
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should start as candidate and attempt to become leader
[DEBUG] test-instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] test-instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:49:27) {
  instanceId: [32m'test-instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should initialize with correct configuration 142ms
stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:27) { noncePrefix: [32m'lc1g1u4s'[39m, timestamp: [32m'1757789367979'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:27)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:27) { noncePrefix: [32m'esqpthza'[39m, timestamp: [32m'1757789367978'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:27)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:49:27) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:27) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:27) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:27) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:27) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:27) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:49:27) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:27) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:27) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:27) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:27) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:27) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:49:27) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'9000b1d4...'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:49:27) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'354f55c7...'[39m }

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:49:27) { reason: [32m'No valid existing ID found'[39m, newId: [32m'9000b1d4...'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:49:27) { reason: [32m'No valid existing ID found'[39m, newId: [32m'354f55c7...'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should start as candidate and attempt to become leader
[DEBUG] test-instance-1: Initial election timeout fired
[DEBUG] test-instance-1: Starting initial election
[DEBUG] test-instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:49:28) { instanceId: [32m'test-instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: ELECTION, senderId: test-instance-1
[DEBUG] test-instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:28) { noncePrefix: [32m'nl2qnmwn'[39m, timestamp: [32m'1757789368054'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:28)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:49:28) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:49:28) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:49:28) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:28) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:28) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:28) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:28) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:49:28) { error: {} }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should propagate events across multiple instances
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:28) { noncePrefix: [32m'zfmhc34a'[39m, timestamp: [32m'1757789368054'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:28)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:49:28) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:49:28) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:49:28) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:28) { noncePrefix: [32m'zcrlh8tx'[39m, timestamp: [32m'1757789368054'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:28)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:49:28) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:49:28) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:49:28) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:28) { noncePrefix: [32m'fuc6rge0'[39m, timestamp: [32m'1757789368054'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:28)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:49:28) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:49:28) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:49:28) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should propagate events across multiple instances
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:28) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:28) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:28) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:28) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:49:28) { error: {} }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:28) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:28) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:28) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:28) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:49:28) { error: {} }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:28) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:28) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:28) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:28) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:49:28) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:49:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:49:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:49:28) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:49:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled
[EventBus] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:49:28)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:49:28)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:49:28)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:28)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:49:28)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:49:28) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:49:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:49:28)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:49:28)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (03:49:28) {
  keyVersion: [32m'key_1757789367977_4ipawzz6'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (03:49:28) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:28) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize all distributed components
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:28) { noncePrefix: [32m'co2hrhtw'[39m, timestamp: [32m'1757789368071'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:28)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:49:28) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:49:28) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:49:28) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize all distributed components
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:49:28) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:28) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:28) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:28) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:28) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:49:28) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize all distributed components
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:49:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize all distributed components
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:49:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize all distributed components
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:49:28) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:49:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize all distributed components
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize all distributed components
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:49:28)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:49:28)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:49:28)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:28)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:49:28)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:49:28) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:49:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize all distributed components
[EventBus] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize all distributed components
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:49:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:28) { noncePrefix: [32m'tvo55q4e'[39m, timestamp: [32m'1757789368076'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:28)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:49:28) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:49:28) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:49:28) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:49:28) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:28) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:28) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:28) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:28) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:49:28) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:28) { noncePrefix: [32m'1izq88y0'[39m, timestamp: [32m'1757789368076'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:28)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:49:28) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:49:28) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:49:28) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:28) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:28) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:28) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:28) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:49:28) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:49:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:49:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:49:28) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:49:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
[EventBus] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:49:28)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:49:28)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:49:28)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:28)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:49:28)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:49:28) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:49:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:49:28)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:49:28)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (03:49:28) {
  keyVersion: [32m'key_1757789368071_m0srci0g'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (03:49:28) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:28) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:49:28)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (03:49:28) {
  keyVersion: [32m'key_1757789368076_dub6uezp'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (03:49:28) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:28) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:49:28)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (03:49:28) {
  keyVersion: [32m'key_1757789368076_dub6uezp'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (03:49:28) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:28) { isInitialized: [32m'true'[39m }
‚ÑπÔ∏è [Security] Request rate limit check passed (03:49:28) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.initialized'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789368086_1matwmhaq1sv'[39m
}

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:28) { noncePrefix: [32m'q1lxxz9w'[39m, timestamp: [32m'1757789368094'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:28)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:49:28) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:49:28) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:49:28) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:49:28) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:28) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:28) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:28) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:28) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:49:28) { error: {} }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:976:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:444:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at DistributedEventBus.doInitialize [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:299:7[90m)[39m

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:49:28)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (03:49:28) {
  keyVersion: [32m'key_1757789368094_7itfepdl'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (03:49:28) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:28) { isInitialized: [32m'true'[39m }
‚ÑπÔ∏è [Security] Request rate limit check passed (03:49:28) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.initialized'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789368094_s9fvsiw7cfiy'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:976:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:444:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at DistributedEventBus.doInitialize [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:299:7[90m)[39m

 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize with distributed features enabled 16ms
   ‚Üí eventBus.getInstanceId is not a function
 ‚úì src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should initialize all distributed components 5ms
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Initialization > should handle microfrontend configuration 7ms
   ‚Üí microfrontendBus.isDistributedEnabled is not a function
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should start as candidate and attempt to become leader
[DEBUG] test-instance-1: Election timeout fired, calling completeElection()
[DEBUG] test-instance-1: completeElection() called, electionInProgress: true
[DEBUG] test-instance-1: Completing election - received 0 responses from: []
[DEBUG] test-instance-1: No responses received, becoming leader
[DEBUG] test-instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] test-instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] test-instance-1: NOW LEADER with priority 100, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: COORDINATOR, senderId: test-instance-1
[DEBUG] test-instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (03:49:29) {
  instanceId: [32m'test-instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'100'[39m
}
[DEBUG] test-instance-1: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should start as candidate and attempt to become leader
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should start as candidate and attempt to become leader
[DEBUG] test-instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: SHUTDOWN, senderId: test-instance-1
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: STEP_DOWN, senderId: test-instance-1
‚ÑπÔ∏è [EventBus] Stopped being leader (03:49:29) { instanceId: [32m'test-instance-1'[39m }
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:49:29) { instanceId: [32m'test-instance-1'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should start as candidate and attempt to become leader
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[DEBUG] instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:49:29) {
  instanceId: [32m'instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should start as candidate and attempt to become leader 2131ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[DEBUG] instance-2: Initializing with priority 200
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 1
[MOCK] Added listener to instance 1, total listeners: 1
[DEBUG] instance-2: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:49:30) {
  instanceId: [32m'instance-2'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'200'[39m
}

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[DEBUG] instance-1: Initial election timeout fired
[DEBUG] instance-1: Starting initial election
[DEBUG] instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:49:30) { instanceId: [32m'instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: ELECTION, senderId: instance-1
[DEBUG] instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received ELECTION from instance-1, connected instances: [instance-1], wasNew: true
[DEBUG] instance-2: Election comparison - my priority: 200, sender priority: 100, current leader: undefined, am I leader: false
[DEBUG] instance-2: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: ELECTION_OK, senderId: instance-2
[DEBUG] instance-2: Responded OK, may start own election later if needed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received ELECTION_OK from instance-2, connected instances: [instance-2], wasNew: true

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[DEBUG] instance-2: Initial election timeout fired
[DEBUG] instance-2: Starting initial election
[DEBUG] instance-2: Starting election with priority 200, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:49:30) { instanceId: [32m'instance-2'[39m, priority: [32m'200'[39m }
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: ELECTION, senderId: instance-2
[DEBUG] instance-2: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received ELECTION from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-1: Election comparison - my priority: 100, sender priority: 200, current leader: undefined, am I leader: false
[DEBUG] instance-1: Sender has higher priority (200 > 100), not responding

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[DEBUG] instance-1: Election timeout fired, calling completeElection()
[DEBUG] instance-1: completeElection() called, electionInProgress: true
[DEBUG] instance-1: Completing election - received 1 responses from: [instance-2]
[DEBUG] instance-1: Checking responder instance-2 with priority 200 vs my priority 100
[DEBUG] instance-1: Found higher priority responder: instance-2 (200)
[DEBUG] instance-1: Responses from higher priority instances, waiting for coordinator

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[DEBUG] instance-2: Election timeout fired, calling completeElection()
[DEBUG] instance-2: completeElection() called, electionInProgress: true
[DEBUG] instance-2: Completing election - received 0 responses from: []
[DEBUG] instance-2: No responses received, becoming leader
[DEBUG] instance-2: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] instance-2: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] instance-2: NOW LEADER with priority 200, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: COORDINATOR, senderId: instance-2
[DEBUG] instance-2: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (03:49:31) {
  instanceId: [32m'instance-2'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'200'[39m
}
[DEBUG] instance-2: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] instance-2: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received COORDINATOR from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-1: Processing COORDINATOR message from instance-2 with priority 200
[DEBUG] instance-1: Received coordinator message from instance-2, previousLeader: undefined, wasLeader: false, electionInProgress: false
[DEBUG] instance-1: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (03:49:31) {
  leaderId: [32m'instance-2'[39m,
  previousLeader: [32m'undefined'[39m,
  instanceId: [32m'instance-1'[39m
}
[DEBUG] instance-1: Notifying 0 callbacks about leadership change (new leader: instance-2)
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[DEBUG] instance-2: Sending heartbeat as leader
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received HEARTBEAT from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-1: Received HEARTBEAT from instance-2, currentLeader is instance-2, senderPriority: 200, myPriority: 100
[DEBUG] instance-1: Not challenging leader - myPriority: 100, senderPriority: 200, isCurrentlyLeader: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[DEBUG] instance-2: Sending heartbeat as leader
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received HEARTBEAT from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-1: Received HEARTBEAT from instance-2, currentLeader is instance-2, senderPriority: 200, myPriority: 100
[DEBUG] instance-1: Not challenging leader - myPriority: 100, senderPriority: 200, isCurrentlyLeader: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[DEBUG] instance-2: Detected inactive instance: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[DEBUG] instance-2: Sending heartbeat as leader
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received HEARTBEAT from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-1: Received HEARTBEAT from instance-2, currentLeader is instance-2, senderPriority: 200, myPriority: 100
[DEBUG] instance-1: Not challenging leader - myPriority: 100, senderPriority: 200, isCurrentlyLeader: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[TEST] Poll 1: election1.isLeader(): false, election2.isLeader(): true
[TEST] Stable leadership achieved on poll 1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[DEBUG] instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: SHUTDOWN, senderId: instance-1
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:49:33) { instanceId: [32m'instance-1'[39m }
[DEBUG] instance-2: Destroying leader election instance
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: SHUTDOWN, senderId: instance-2
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: STEP_DOWN, senderId: instance-2
‚ÑπÔ∏è [EventBus] Stopped being leader (03:49:33) { instanceId: [32m'instance-2'[39m }
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] instance-2: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:49:33) { instanceId: [32m'instance-2'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[MOCK] Sending to instance 1 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[MOCK] Sending to instance 0 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[MOCK] Sending to instance 0 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities
[MOCK] Closing BroadcastChannel instance 1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:49:33) {
  instanceId: [32m'instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-1: Initial election timeout fired
[DEBUG] instance-1: Starting initial election
[DEBUG] instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:49:33) { instanceId: [32m'instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: ELECTION, senderId: instance-1
[DEBUG] instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-1: Election timeout fired, calling completeElection()
[DEBUG] instance-1: completeElection() called, electionInProgress: true
[DEBUG] instance-1: Completing election - received 0 responses from: []
[DEBUG] instance-1: No responses received, becoming leader
[DEBUG] instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] instance-1: NOW LEADER with priority 100, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: COORDINATOR, senderId: instance-1
[DEBUG] instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (03:49:34) {
  instanceId: [32m'instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'100'[39m
}
[DEBUG] instance-1: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-2: Initializing with priority 200
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 1
[MOCK] Added listener to instance 1, total listeners: 1
[DEBUG] instance-2: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:49:35) {
  instanceId: [32m'instance-2'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'200'[39m
}

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-2: Initial election timeout fired
[DEBUG] instance-2: Starting initial election
[DEBUG] instance-2: Starting election with priority 200, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:49:35) { instanceId: [32m'instance-2'[39m, priority: [32m'200'[39m }
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: ELECTION, senderId: instance-2
[DEBUG] instance-2: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received ELECTION from instance-2, connected instances: [instance-2], wasNew: true
[DEBUG] instance-1: Election comparison - my priority: 100, sender priority: 200, current leader: instance-1, am I leader: true
[DEBUG] instance-1: Sender has higher priority (200 > 100), not responding

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received HEARTBEAT from instance-1, connected instances: [instance-1], wasNew: true
[DEBUG] instance-2: Received HEARTBEAT from instance-1, currentLeader is undefined, senderPriority: 100, myPriority: 200
[DEBUG] instance-2: Received heartbeat from unknown leader instance-1 (priority 100), considering as current leader

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received HEARTBEAT from instance-1, connected instances: [instance-1], wasNew: false
[DEBUG] instance-2: Received HEARTBEAT from instance-1, currentLeader is instance-1, senderPriority: 100, myPriority: 200
[DEBUG] instance-2: Detected leader instance-1 with lower priority (100 < 200), checking if challenge needed
[DEBUG] instance-2: Already in election process, not restarting challenge (this prevents infinite loops)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-2: Election timeout fired, calling completeElection()
[DEBUG] instance-2: completeElection() called, electionInProgress: true
[DEBUG] instance-2: Completing election - received 0 responses from: []
[DEBUG] instance-2: No responses received, becoming leader
[DEBUG] instance-2: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=instance-1
[DEBUG] instance-2: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=instance-1
[DEBUG] instance-2: NOW LEADER with priority 200, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: COORDINATOR, senderId: instance-2
[DEBUG] instance-2: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (03:49:36) {
  instanceId: [32m'instance-2'[39m,
  previousLeader: [32m'instance-1'[39m,
  priority: [32m'200'[39m
}
[DEBUG] instance-2: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=true, previousLeader=instance-1, callbacks=0
[DEBUG] instance-2: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received COORDINATOR from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-1: Processing COORDINATOR message from instance-2 with priority 200
[DEBUG] instance-1: Received coordinator message from instance-2, previousLeader: instance-1, wasLeader: true, electionInProgress: false
[DEBUG] instance-1: Stepping down from leadership
‚ÑπÔ∏è [EventBus] Stopped being leader (03:49:36) { instanceId: [32m'instance-1'[39m }
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] instance-1: No callbacks registered
[DEBUG] instance-1: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (03:49:36) {
  leaderId: [32m'instance-2'[39m,
  previousLeader: [32m'instance-1'[39m,
  instanceId: [32m'instance-1'[39m
}
[DEBUG] instance-1: Notifying 0 callbacks about leadership change (new leader: instance-2)
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=instance-1, callbacks=0
[DEBUG] instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-2: Sending heartbeat as leader
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received HEARTBEAT from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-1: Received HEARTBEAT from instance-2, currentLeader is instance-2, senderPriority: 200, myPriority: 100
[DEBUG] instance-1: Not challenging leader - myPriority: 100, senderPriority: 200, isCurrentlyLeader: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-3: Initializing with priority 300
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 2
[MOCK] Added listener to instance 2, total listeners: 1
[DEBUG] instance-3: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:49:37) {
  instanceId: [32m'instance-3'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'300'[39m
}

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-3: Initial election timeout fired
[DEBUG] instance-3: Starting initial election
[DEBUG] instance-3: Starting election with priority 300, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:49:37) { instanceId: [32m'instance-3'[39m, priority: [32m'300'[39m }
[MOCK] Instance 2 broadcasting to 2 other instances. Message type: ELECTION, senderId: instance-3
[DEBUG] instance-3: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received ELECTION from instance-3, connected instances: [instance-2, instance-3], wasNew: true
[DEBUG] instance-1: Election comparison - my priority: 100, sender priority: 300, current leader: instance-2, am I leader: false
[DEBUG] instance-1: Sender has higher priority (300 > 100), not responding
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received ELECTION from instance-3, connected instances: [instance-1, instance-3], wasNew: true
[DEBUG] instance-2: Election comparison - my priority: 200, sender priority: 300, current leader: instance-2, am I leader: true
[DEBUG] instance-2: Sender has higher priority (300 > 200), not responding

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-2: Sending heartbeat as leader
[MOCK] Instance 1 broadcasting to 2 other instances. Message type: HEARTBEAT, senderId: instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received HEARTBEAT from instance-2, connected instances: [instance-2, instance-3], wasNew: false
[DEBUG] instance-1: Received HEARTBEAT from instance-2, currentLeader is instance-2, senderPriority: 200, myPriority: 100
[DEBUG] instance-1: Not challenging leader - myPriority: 100, senderPriority: 200, isCurrentlyLeader: false
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] instance-3: Received HEARTBEAT from instance-2, connected instances: [instance-2], wasNew: true
[DEBUG] instance-3: Received HEARTBEAT from instance-2, currentLeader is undefined, senderPriority: 200, myPriority: 300
[DEBUG] instance-3: Received heartbeat from unknown leader instance-2 (priority 200), considering as current leader

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-2: Sending heartbeat as leader
[MOCK] Instance 1 broadcasting to 2 other instances. Message type: HEARTBEAT, senderId: instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received HEARTBEAT from instance-2, connected instances: [instance-2, instance-3], wasNew: false
[DEBUG] instance-1: Received HEARTBEAT from instance-2, currentLeader is instance-2, senderPriority: 200, myPriority: 100
[DEBUG] instance-1: Not challenging leader - myPriority: 100, senderPriority: 200, isCurrentlyLeader: false
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] instance-3: Received HEARTBEAT from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-3: Received HEARTBEAT from instance-2, currentLeader is instance-2, senderPriority: 200, myPriority: 300
[DEBUG] instance-3: Detected leader instance-2 with lower priority (200 < 300), checking if challenge needed
[DEBUG] instance-3: Already in election process, not restarting challenge (this prevents infinite loops)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-3: Election timeout fired, calling completeElection()
[DEBUG] instance-3: completeElection() called, electionInProgress: true
[DEBUG] instance-3: Completing election - received 0 responses from: []
[DEBUG] instance-3: No responses received, becoming leader
[DEBUG] instance-3: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=instance-2
[DEBUG] instance-3: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=instance-2
[DEBUG] instance-3: NOW LEADER with priority 300, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 2 broadcasting to 2 other instances. Message type: COORDINATOR, senderId: instance-3
[DEBUG] instance-3: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (03:49:38) {
  instanceId: [32m'instance-3'[39m,
  previousLeader: [32m'instance-2'[39m,
  priority: [32m'300'[39m
}
[DEBUG] instance-3: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] instance-3: notifyLeadershipChange called with isLeader=true, previousLeader=instance-2, callbacks=0
[DEBUG] instance-3: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received COORDINATOR from instance-3, connected instances: [instance-2, instance-3], wasNew: false
[DEBUG] instance-1: Processing COORDINATOR message from instance-3 with priority 300
[DEBUG] instance-1: Received coordinator message from instance-3, previousLeader: instance-2, wasLeader: false, electionInProgress: false
[DEBUG] instance-1: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (03:49:38) {
  leaderId: [32m'instance-3'[39m,
  previousLeader: [32m'instance-2'[39m,
  instanceId: [32m'instance-1'[39m
}
[DEBUG] instance-1: Notifying 0 callbacks about leadership change (new leader: instance-3)
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=instance-2, callbacks=0
[DEBUG] instance-1: No callbacks registered
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received COORDINATOR from instance-3, connected instances: [instance-1, instance-3], wasNew: false
[DEBUG] instance-2: Processing COORDINATOR message from instance-3 with priority 300
[DEBUG] instance-2: Received coordinator message from instance-3, previousLeader: instance-2, wasLeader: true, electionInProgress: false
[DEBUG] instance-2: Stepping down from leadership
‚ÑπÔ∏è [EventBus] Stopped being leader (03:49:38) { instanceId: [32m'instance-2'[39m }
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] instance-2: No callbacks registered
[DEBUG] instance-2: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (03:49:38) {
  leaderId: [32m'instance-3'[39m,
  previousLeader: [32m'instance-2'[39m,
  instanceId: [32m'instance-2'[39m
}
[DEBUG] instance-2: Notifying 0 callbacks about leadership change (new leader: instance-3)
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=false, previousLeader=instance-2, callbacks=0
[DEBUG] instance-2: No callbacks registered

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Initialization > should handle multiple instances with different priorities 3231ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[DEBUG] instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 2 other instances. Message type: SHUTDOWN, senderId: instance-1
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:49:39) { instanceId: [32m'instance-1'[39m }
[DEBUG] instance-2: Destroying leader election instance
[MOCK] Instance 1 broadcasting to 2 other instances. Message type: SHUTDOWN, senderId: instance-2
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:49:39) { instanceId: [32m'instance-2'[39m }
[DEBUG] instance-3: Destroying leader election instance
[MOCK] Instance 2 broadcasting to 2 other instances. Message type: SHUTDOWN, senderId: instance-3
[MOCK] Instance 2 broadcasting to 2 other instances. Message type: STEP_DOWN, senderId: instance-3
‚ÑπÔ∏è [EventBus] Stopped being leader (03:49:39) { instanceId: [32m'instance-3'[39m }
[DEBUG] instance-3: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] instance-3: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:49:39) { instanceId: [32m'instance-3'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 1 (1 listeners)
[MOCK] Sending to instance 2 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 0 (1 listeners)
[MOCK] Sending to instance 2 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 0 (1 listeners)
[MOCK] Sending to instance 1 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Sending to instance 0 (1 listeners)
[MOCK] Sending to instance 1 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Closing BroadcastChannel instance 1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly
[MOCK] Closing BroadcastChannel instance 2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[DEBUG] instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:49:39) {
  instanceId: [32m'instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle Fast Bully Algorithm correctly 6123ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[DEBUG] instance-1: Initial election timeout fired
[DEBUG] instance-1: Starting initial election
[DEBUG] instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:49:39) { instanceId: [32m'instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: ELECTION, senderId: instance-1
[DEBUG] instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[DEBUG] instance-1: Election timeout fired, calling completeElection()
[DEBUG] instance-1: completeElection() called, electionInProgress: true
[DEBUG] instance-1: Completing election - received 0 responses from: []
[DEBUG] instance-1: No responses received, becoming leader
[DEBUG] instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] instance-1: NOW LEADER with priority 100, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: COORDINATOR, senderId: instance-1
[DEBUG] instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (03:49:40) {
  instanceId: [32m'instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'100'[39m
}
[DEBUG] instance-1: Notifying 1 callbacks about leadership change (became leader)
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=1
[DEBUG] instance-1: Calling callback 0 (attempt 1) with (true, undefined)
[DEBUG] instance-1: Callback 0 completed successfully
[DEBUG] instance-1: All callbacks processed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[DEBUG] instance-2: Initializing with priority 200
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 1
[MOCK] Added listener to instance 1, total listeners: 1
[DEBUG] instance-2: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:49:41) {
  instanceId: [32m'instance-2'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'200'[39m
}

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[DEBUG] instance-2: Initial election timeout fired
[DEBUG] instance-2: Starting initial election
[DEBUG] instance-2: Starting election with priority 200, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:49:42) { instanceId: [32m'instance-2'[39m, priority: [32m'200'[39m }
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: ELECTION, senderId: instance-2
[DEBUG] instance-2: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received ELECTION from instance-2, connected instances: [instance-2], wasNew: true
[DEBUG] instance-1: Election comparison - my priority: 100, sender priority: 200, current leader: instance-1, am I leader: true
[DEBUG] instance-1: Sender has higher priority (200 > 100), not responding

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received HEARTBEAT from instance-1, connected instances: [instance-1], wasNew: true
[DEBUG] instance-2: Received HEARTBEAT from instance-1, currentLeader is undefined, senderPriority: 100, myPriority: 200
[DEBUG] instance-2: Received heartbeat from unknown leader instance-1 (priority 100), considering as current leader

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received HEARTBEAT from instance-1, connected instances: [instance-1], wasNew: false
[DEBUG] instance-2: Received HEARTBEAT from instance-1, currentLeader is instance-1, senderPriority: 100, myPriority: 200
[DEBUG] instance-2: Detected leader instance-1 with lower priority (100 < 200), checking if challenge needed
[DEBUG] instance-2: Already in election process, not restarting challenge (this prevents infinite loops)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[DEBUG] instance-2: Election timeout fired, calling completeElection()
[DEBUG] instance-2: completeElection() called, electionInProgress: true
[DEBUG] instance-2: Completing election - received 0 responses from: []
[DEBUG] instance-2: No responses received, becoming leader
[DEBUG] instance-2: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=instance-1
[DEBUG] instance-2: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=instance-1
[DEBUG] instance-2: NOW LEADER with priority 200, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: COORDINATOR, senderId: instance-2
[DEBUG] instance-2: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (03:49:43) {
  instanceId: [32m'instance-2'[39m,
  previousLeader: [32m'instance-1'[39m,
  priority: [32m'200'[39m
}
[DEBUG] instance-2: Notifying 1 callbacks about leadership change (became leader)
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=true, previousLeader=instance-1, callbacks=1
[DEBUG] instance-2: Calling callback 0 (attempt 1) with (true, instance-1)
[DEBUG] instance-2: Callback 0 completed successfully
[DEBUG] instance-2: All callbacks processed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received COORDINATOR from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-1: Processing COORDINATOR message from instance-2 with priority 200
[DEBUG] instance-1: Received coordinator message from instance-2, previousLeader: instance-1, wasLeader: true, electionInProgress: false
[DEBUG] instance-1: Stepping down from leadership
‚ÑπÔ∏è [EventBus] Stopped being leader (03:49:43) { instanceId: [32m'instance-1'[39m }
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=1
[DEBUG] instance-1: Calling callback 0 (attempt 1) with (false, undefined)
[DEBUG] instance-1: Callback 0 completed successfully
[DEBUG] instance-1: All callbacks processed
[DEBUG] instance-1: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (03:49:43) {
  leaderId: [32m'instance-2'[39m,
  previousLeader: [32m'instance-1'[39m,
  instanceId: [32m'instance-1'[39m
}
[DEBUG] instance-1: Notifying 1 callbacks about leadership change (new leader: instance-2)
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=instance-1, callbacks=1
[DEBUG] instance-1: Calling callback 0 (attempt 1) with (false, instance-1)
[DEBUG] instance-1: Callback 0 completed successfully
[DEBUG] instance-1: All callbacks processed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received HEARTBEAT from instance-1, connected instances: [instance-1], wasNew: false
[DEBUG] instance-2: Received HEARTBEAT from instance-1, currentLeader is instance-2, senderPriority: 100, myPriority: 200
[DEBUG] instance-2: Received heartbeat from competing leader instance-1 (priority 100) while I am leader (priority 200)
[DEBUG] instance-2: I have higher priority than competing leader, continuing as leader
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: COORDINATOR, senderId: instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received COORDINATOR from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-1: Processing COORDINATOR message from instance-2 with priority 200
[DEBUG] instance-1: Received coordinator message from instance-2, previousLeader: instance-2, wasLeader: false, electionInProgress: false
[DEBUG] instance-1: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (03:49:43) {
  leaderId: [32m'instance-2'[39m,
  previousLeader: [32m'instance-2'[39m,
  instanceId: [32m'instance-1'[39m
}
[DEBUG] instance-1: Notifying 1 callbacks about leadership change (new leader: instance-2)
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=instance-2, callbacks=1
[DEBUG] instance-1: Calling callback 0 (attempt 1) with (false, instance-2)
[DEBUG] instance-1: Callback 0 completed successfully
[DEBUG] instance-1: All callbacks processed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[DEBUG] instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: SHUTDOWN, senderId: instance-1
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:49:43) { instanceId: [32m'instance-1'[39m }
[DEBUG] instance-2: Destroying leader election instance
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: SHUTDOWN, senderId: instance-2
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: STEP_DOWN, senderId: instance-2
‚ÑπÔ∏è [EventBus] Stopped being leader (03:49:43) { instanceId: [32m'instance-2'[39m }
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=1
[DEBUG] instance-2: Calling callback 0 (attempt 1) with (false, undefined)
[DEBUG] instance-2: Callback 0 completed successfully
[DEBUG] instance-2: All callbacks processed
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:49:43) { instanceId: [32m'instance-2'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[MOCK] Sending to instance 1 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[MOCK] Sending to instance 0 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[MOCK] Sending to instance 0 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly
[MOCK] Closing BroadcastChannel instance 1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[DEBUG] test-instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] test-instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:49:43) {
  instanceId: [32m'test-instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle election messages correctly 4126ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[DEBUG] test-instance-1: Initial election timeout fired
[DEBUG] test-instance-1: Starting initial election
[DEBUG] test-instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:49:43) { instanceId: [32m'test-instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: ELECTION, senderId: test-instance-1
[DEBUG] test-instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[DEBUG] test-instance-1: Election timeout fired, calling completeElection()
[DEBUG] test-instance-1: completeElection() called, electionInProgress: true
[DEBUG] test-instance-1: Completing election - received 0 responses from: []
[DEBUG] test-instance-1: No responses received, becoming leader
[DEBUG] test-instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] test-instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] test-instance-1: NOW LEADER with priority 100, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: COORDINATOR, senderId: test-instance-1
[DEBUG] test-instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (03:49:44) {
  instanceId: [32m'test-instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'100'[39m
}
[DEBUG] test-instance-1: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[DEBUG] instance-2: Initializing with priority 50
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 1
[MOCK] Added listener to instance 1, total listeners: 1
[DEBUG] instance-2: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:49:45) {
  instanceId: [32m'instance-2'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'50'[39m
}

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[DEBUG] instance-2: Initial election timeout fired
[DEBUG] instance-2: Starting initial election
[DEBUG] instance-2: Starting election with priority 50, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:49:46) { instanceId: [32m'instance-2'[39m, priority: [32m'50'[39m }
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: ELECTION, senderId: instance-2
[DEBUG] instance-2: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[DEBUG] test-instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: SHUTDOWN, senderId: test-instance-1
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: STEP_DOWN, senderId: test-instance-1
‚ÑπÔ∏è [EventBus] Stopped being leader (03:49:46) { instanceId: [32m'test-instance-1'[39m }
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:49:46) { instanceId: [32m'test-instance-1'[39m }
[DEBUG] instance-2: Destroying leader election instance
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: SHUTDOWN, senderId: instance-2
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:49:46) { instanceId: [32m'instance-2'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[MOCK] Sending to instance 0 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[MOCK] Sending to instance 1 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[MOCK] Sending to instance 1 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[MOCK] Sending to instance 0 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements
[MOCK] Closing BroadcastChannel instance 1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should send regular heartbeats when leader
[DEBUG] test-instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] test-instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:49:46) {
  instanceId: [32m'test-instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leader Election Protocol > should handle coordinator announcements 2836ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should send regular heartbeats when leader
[DEBUG] test-instance-1: Initial election timeout fired
[DEBUG] test-instance-1: Starting initial election
[DEBUG] test-instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:49:46) { instanceId: [32m'test-instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: ELECTION, senderId: test-instance-1
[DEBUG] test-instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should send regular heartbeats when leader
[DEBUG] test-instance-1: Election timeout fired, calling completeElection()
[DEBUG] test-instance-1: completeElection() called, electionInProgress: true
[DEBUG] test-instance-1: Completing election - received 0 responses from: []
[DEBUG] test-instance-1: No responses received, becoming leader
[DEBUG] test-instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] test-instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] test-instance-1: NOW LEADER with priority 100, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: COORDINATOR, senderId: test-instance-1
[DEBUG] test-instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (03:49:47) {
  instanceId: [32m'test-instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'100'[39m
}
[DEBUG] test-instance-1: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should send regular heartbeats when leader
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should send regular heartbeats when leader
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should send regular heartbeats when leader
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should send regular heartbeats when leader
[DEBUG] test-instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: SHUTDOWN, senderId: test-instance-1
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: STEP_DOWN, senderId: test-instance-1
‚ÑπÔ∏è [EventBus] Stopped being leader (03:49:49) { instanceId: [32m'test-instance-1'[39m }
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:49:49) { instanceId: [32m'test-instance-1'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should send regular heartbeats when leader
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-1: Initializing with priority 200
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:49:49) {
  instanceId: [32m'instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'200'[39m
}
[DEBUG] instance-2: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 1
[MOCK] Added listener to instance 1, total listeners: 1
[DEBUG] instance-2: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:49:49) {
  instanceId: [32m'instance-2'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should send regular heartbeats when leader 3202ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-1: Initial election timeout fired
[DEBUG] instance-1: Starting initial election
[DEBUG] instance-1: Starting election with priority 200, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:49:49) { instanceId: [32m'instance-1'[39m, priority: [32m'200'[39m }
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: ELECTION, senderId: instance-1
[DEBUG] instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-2: Initial election timeout fired
[DEBUG] instance-2: Starting initial election
[DEBUG] instance-2: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:49:49) { instanceId: [32m'instance-2'[39m, priority: [32m'100'[39m }
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: ELECTION, senderId: instance-2
[DEBUG] instance-2: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received ELECTION from instance-1, connected instances: [instance-1], wasNew: true
[DEBUG] instance-2: Election comparison - my priority: 100, sender priority: 200, current leader: undefined, am I leader: false
[DEBUG] instance-2: Sender has higher priority (200 > 100), not responding

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received ELECTION from instance-2, connected instances: [instance-2], wasNew: true
[DEBUG] instance-1: Election comparison - my priority: 200, sender priority: 100, current leader: undefined, am I leader: false
[DEBUG] instance-1: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: ELECTION_OK, senderId: instance-1
[DEBUG] instance-1: Responded OK, may start own election later if needed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received ELECTION_OK from instance-1, connected instances: [instance-1], wasNew: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-1: Election timeout fired, calling completeElection()
[DEBUG] instance-1: completeElection() called, electionInProgress: true
[DEBUG] instance-1: Completing election - received 0 responses from: []
[DEBUG] instance-1: No responses received, becoming leader
[DEBUG] instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] instance-1: NOW LEADER with priority 200, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: COORDINATOR, senderId: instance-1
[DEBUG] instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (03:49:50) {
  instanceId: [32m'instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'200'[39m
}
[DEBUG] instance-1: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-2: Election timeout fired, calling completeElection()
[DEBUG] instance-2: completeElection() called, electionInProgress: true
[DEBUG] instance-2: Completing election - received 1 responses from: [instance-1]
[DEBUG] instance-2: Checking responder instance-1 with priority 200 vs my priority 100
[DEBUG] instance-2: Found higher priority responder: instance-1 (200)
[DEBUG] instance-2: Responses from higher priority instances, waiting for coordinator

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received COORDINATOR from instance-1, connected instances: [instance-1], wasNew: false
[DEBUG] instance-2: Processing COORDINATOR message from instance-1 with priority 200
[DEBUG] instance-2: Received coordinator message from instance-1, previousLeader: undefined, wasLeader: false, electionInProgress: false
[DEBUG] instance-2: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (03:49:50) {
  leaderId: [32m'instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  instanceId: [32m'instance-2'[39m
}
[DEBUG] instance-2: Notifying 0 callbacks about leadership change (new leader: instance-1)
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] instance-2: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received HEARTBEAT from instance-1, connected instances: [instance-1], wasNew: false
[DEBUG] instance-2: Received HEARTBEAT from instance-1, currentLeader is instance-1, senderPriority: 200, myPriority: 100
[DEBUG] instance-2: Not challenging leader - myPriority: 100, senderPriority: 200, isCurrentlyLeader: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received HEARTBEAT from instance-1, connected instances: [instance-1], wasNew: false
[DEBUG] instance-2: Received HEARTBEAT from instance-1, currentLeader is instance-1, senderPriority: 200, myPriority: 100
[DEBUG] instance-2: Not challenging leader - myPriority: 100, senderPriority: 200, isCurrentlyLeader: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: SHUTDOWN, senderId: instance-1
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: STEP_DOWN, senderId: instance-1
‚ÑπÔ∏è [EventBus] Stopped being leader (03:49:51) { instanceId: [32m'instance-1'[39m }
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] instance-1: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:49:51) { instanceId: [32m'instance-1'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received SHUTDOWN from instance-1, connected instances: [instance-1], wasNew: false
[DEBUG] instance-2: Received shutdown notification from instance-1
‚ÑπÔ∏è [EventBus] Instance shutdown detected (03:49:51) { shutdownInstanceId: [32m'instance-1'[39m, instanceId: [32m'instance-2'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received STEP_DOWN from instance-1, connected instances: [instance-1], wasNew: true

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-2: Starting election with priority 100, participationCount: 2
‚ÑπÔ∏è [EventBus] Starting leader election (03:49:52) { instanceId: [32m'instance-2'[39m, priority: [32m'100'[39m }
[MOCK] Instance 1 broadcasting to 0 other instances. Message type: ELECTION, senderId: instance-2
[DEBUG] instance-2: Setting election timeout for 1000ms

stderr | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
‚ö†Ô∏è [EventBus] Leader heartbeat timeout, starting election (03:49:52) { currentLeader: [32m'undefined'[39m, instanceId: [32m'instance-2'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-2: Cannot start election - already in progress: true, destroyed: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-2: Election timeout fired, calling completeElection()
[DEBUG] instance-2: completeElection() called, electionInProgress: true
[DEBUG] instance-2: Completing election - received 0 responses from: []
[DEBUG] instance-2: No responses received, becoming leader
[DEBUG] instance-2: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] instance-2: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=instance-1
[DEBUG] instance-2: NOW LEADER with priority 100, totalElections: 2, isCurrentlyLeader=true
[MOCK] Instance 1 broadcasting to 0 other instances. Message type: COORDINATOR, senderId: instance-2
[DEBUG] instance-2: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (03:49:53) {
  instanceId: [32m'instance-2'[39m,
  previousLeader: [32m'instance-1'[39m,
  priority: [32m'100'[39m
}
[DEBUG] instance-2: Notifying 1 callbacks about leadership change (became leader)
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=true, previousLeader=instance-1, callbacks=1
[DEBUG] instance-2: Calling callback 0 (attempt 1) with (true, instance-1)
[DEBUG] instance-2: Callback 0 completed successfully
[DEBUG] instance-2: All callbacks processed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-2: Sending heartbeat as leader
[MOCK] Instance 1 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-2: Sending heartbeat as leader
[MOCK] Instance 1 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-2: Detected inactive instance: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-2: Sending heartbeat as leader
[MOCK] Instance 1 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-2: Sending heartbeat as leader
[MOCK] Instance 1 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-2: Sending heartbeat as leader
[MOCK] Instance 1 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[DEBUG] instance-2: Destroying leader election instance
[MOCK] Instance 1 broadcasting to 0 other instances. Message type: SHUTDOWN, senderId: instance-2
[MOCK] Instance 1 broadcasting to 0 other instances. Message type: STEP_DOWN, senderId: instance-2
‚ÑπÔ∏è [EventBus] Stopped being leader (03:49:56) { instanceId: [32m'instance-2'[39m }
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=1
[DEBUG] instance-2: Calling callback 0 (attempt 1) with (false, undefined)
[DEBUG] instance-2: Callback 0 completed successfully
[DEBUG] instance-2: All callbacks processed
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:49:56) { instanceId: [32m'instance-2'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election
[MOCK] Closing BroadcastChannel instance 1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should handle missing heartbeats gracefully
[DEBUG] test-instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] test-instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:49:56) {
  instanceId: [32m'test-instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should detect leader failure and start new election 6636ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should handle missing heartbeats gracefully
[DEBUG] test-instance-1: Initial election timeout fired
[DEBUG] test-instance-1: Starting initial election
[DEBUG] test-instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:49:56) { instanceId: [32m'test-instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: ELECTION, senderId: test-instance-1
[DEBUG] test-instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should handle missing heartbeats gracefully
[DEBUG] test-instance-1: Election timeout fired, calling completeElection()
[DEBUG] test-instance-1: completeElection() called, electionInProgress: true
[DEBUG] test-instance-1: Completing election - received 0 responses from: []
[DEBUG] test-instance-1: No responses received, becoming leader
[DEBUG] test-instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] test-instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] test-instance-1: NOW LEADER with priority 100, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: COORDINATOR, senderId: test-instance-1
[DEBUG] test-instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (03:49:57) {
  instanceId: [32m'test-instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'100'[39m
}
[DEBUG] test-instance-1: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should handle missing heartbeats gracefully
[DEBUG] test-instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: SHUTDOWN, senderId: test-instance-1
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: STEP_DOWN, senderId: test-instance-1
‚ÑπÔ∏è [EventBus] Stopped being leader (03:49:57) { instanceId: [32m'test-instance-1'[39m }
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:49:57) { instanceId: [32m'test-instance-1'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should handle missing heartbeats gracefully
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[DEBUG] instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:49:57) {
  instanceId: [32m'instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Heartbeat Management > should handle missing heartbeats gracefully 1617ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[DEBUG] instance-1: Initial election timeout fired
[DEBUG] instance-1: Starting initial election
[DEBUG] instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:49:57) { instanceId: [32m'instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: ELECTION, senderId: instance-1
[DEBUG] instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ÑπÔ∏è [Security] Request rate limit check passed (03:49:28) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'98'[39m,
  suspicionScore: [32m'39'[39m,
  requestId: [32m'req_1757789368094_npy5l3fsz02r'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:976:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:444:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1239:7[90m)[39m

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[DEBUG] instance-1: Election timeout fired, calling completeElection()
[DEBUG] instance-1: completeElection() called, electionInProgress: true
[DEBUG] instance-1: Completing election - received 0 responses from: []
[DEBUG] instance-1: No responses received, becoming leader
[DEBUG] instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] instance-1: NOW LEADER with priority 100, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: COORDINATOR, senderId: instance-1
[DEBUG] instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (03:49:58) {
  instanceId: [32m'instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'100'[39m
}
[DEBUG] instance-1: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[DEBUG] instance-2: Initializing with priority 200
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 1
[MOCK] Added listener to instance 1, total listeners: 1
[DEBUG] instance-2: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:50:00) {
  instanceId: [32m'instance-2'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'200'[39m
}

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[DEBUG] instance-2: Initial election timeout fired
[DEBUG] instance-2: Starting initial election
[DEBUG] instance-2: Starting election with priority 200, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:50:00) { instanceId: [32m'instance-2'[39m, priority: [32m'200'[39m }
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: ELECTION, senderId: instance-2
[DEBUG] instance-2: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received ELECTION from instance-2, connected instances: [instance-2], wasNew: true
[DEBUG] instance-1: Election comparison - my priority: 100, sender priority: 200, current leader: instance-1, am I leader: true
[DEBUG] instance-1: Sender has higher priority (200 > 100), not responding

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received HEARTBEAT from instance-1, connected instances: [instance-1], wasNew: true
[DEBUG] instance-2: Received HEARTBEAT from instance-1, currentLeader is undefined, senderPriority: 100, myPriority: 200
[DEBUG] instance-2: Received heartbeat from unknown leader instance-1 (priority 100), considering as current leader

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received HEARTBEAT from instance-1, connected instances: [instance-1], wasNew: false
[DEBUG] instance-2: Received HEARTBEAT from instance-1, currentLeader is instance-1, senderPriority: 100, myPriority: 200
[DEBUG] instance-2: Detected leader instance-1 with lower priority (100 < 200), checking if challenge needed
[DEBUG] instance-2: Already in election process, not restarting challenge (this prevents infinite loops)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[DEBUG] instance-2: Election timeout fired, calling completeElection()
[DEBUG] instance-2: completeElection() called, electionInProgress: true
[DEBUG] instance-2: Completing election - received 0 responses from: []
[DEBUG] instance-2: No responses received, becoming leader
[DEBUG] instance-2: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=instance-1
[DEBUG] instance-2: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=instance-1
[DEBUG] instance-2: NOW LEADER with priority 200, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: COORDINATOR, senderId: instance-2
[DEBUG] instance-2: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (03:50:01) {
  instanceId: [32m'instance-2'[39m,
  previousLeader: [32m'instance-1'[39m,
  priority: [32m'200'[39m
}
[DEBUG] instance-2: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=true, previousLeader=instance-1, callbacks=0
[DEBUG] instance-2: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received COORDINATOR from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-1: Processing COORDINATOR message from instance-2 with priority 200
[DEBUG] instance-1: Received coordinator message from instance-2, previousLeader: instance-1, wasLeader: true, electionInProgress: false
[DEBUG] instance-1: Stepping down from leadership
‚ÑπÔ∏è [EventBus] Stopped being leader (03:50:01) { instanceId: [32m'instance-1'[39m }
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] instance-1: No callbacks registered
[DEBUG] instance-1: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (03:50:01) {
  leaderId: [32m'instance-2'[39m,
  previousLeader: [32m'instance-1'[39m,
  instanceId: [32m'instance-1'[39m
}
[DEBUG] instance-1: Notifying 0 callbacks about leadership change (new leader: instance-2)
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=instance-1, callbacks=0
[DEBUG] instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[DEBUG] instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: SHUTDOWN, senderId: instance-1
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:50:01) { instanceId: [32m'instance-1'[39m }
[DEBUG] instance-2: Destroying leader election instance
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: SHUTDOWN, senderId: instance-2
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: STEP_DOWN, senderId: instance-2
‚ÑπÔ∏è [EventBus] Stopped being leader (03:50:01) { instanceId: [32m'instance-2'[39m }
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] instance-2: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:50:01) { instanceId: [32m'instance-2'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[MOCK] Sending to instance 1 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[MOCK] Sending to instance 0 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[MOCK] Sending to instance 0 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances
[MOCK] Closing BroadcastChannel instance 1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully
[DEBUG] instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:50:01) {
  instanceId: [32m'instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}
[DEBUG] instance-2: Initializing with priority 200
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 1
[MOCK] Added listener to instance 1, total listeners: 1
[DEBUG] instance-2: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:50:01) {
  instanceId: [32m'instance-2'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'200'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should track connected instances 4129ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully
[DEBUG] instance-1: Initial election timeout fired
[DEBUG] instance-1: Starting initial election
[DEBUG] instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:50:02) { instanceId: [32m'instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: ELECTION, senderId: instance-1
[DEBUG] instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received ELECTION from instance-1, connected instances: [instance-1], wasNew: true
[DEBUG] instance-2: Election comparison - my priority: 200, sender priority: 100, current leader: undefined, am I leader: false
[DEBUG] instance-2: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: ELECTION_OK, senderId: instance-2
[DEBUG] instance-2: Responded OK, may start own election later if needed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully
[DEBUG] instance-2: Initial election timeout fired
[DEBUG] instance-2: Starting initial election
[DEBUG] instance-2: Starting election with priority 200, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:50:02) { instanceId: [32m'instance-2'[39m, priority: [32m'200'[39m }
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: ELECTION, senderId: instance-2
[DEBUG] instance-2: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully
[DEBUG] instance-2: Destroying leader election instance
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: SHUTDOWN, senderId: instance-2
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:50:02) { instanceId: [32m'instance-2'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received ELECTION_OK from instance-2, connected instances: [instance-2], wasNew: true

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received ELECTION from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-1: Election comparison - my priority: 100, sender priority: 200, current leader: undefined, am I leader: false
[DEBUG] instance-1: Sender has higher priority (200 > 100), not responding

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received SHUTDOWN from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-1: Received shutdown notification from instance-2
‚ÑπÔ∏è [EventBus] Instance shutdown detected (03:50:02) { shutdownInstanceId: [32m'instance-2'[39m, instanceId: [32m'instance-1'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully
[MOCK] Closing BroadcastChannel instance 1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully
[DEBUG] instance-1: Election timeout fired, calling completeElection()
[DEBUG] instance-1: completeElection() called, electionInProgress: true
[DEBUG] instance-1: Completing election - received 1 responses from: [instance-2]
[DEBUG] instance-1: Checking responder instance-2 with priority 200 vs my priority 100
[DEBUG] instance-1: Found higher priority responder: instance-2 (200)
[DEBUG] instance-1: Responses from higher priority instances, waiting for coordinator

stderr | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully
‚ö†Ô∏è [EventBus] No coordinator message received, restarting election (03:50:04)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully
[DEBUG] instance-1: No coordinator message received, restarting election
[DEBUG] instance-1: Starting election with priority 100, participationCount: 2
‚ÑπÔ∏è [EventBus] Starting leader election (03:50:04) { instanceId: [32m'instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: ELECTION, senderId: instance-1
[DEBUG] instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully
[DEBUG] instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: SHUTDOWN, senderId: instance-1
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:50:04) { instanceId: [32m'instance-1'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] test-instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:50:04) {
  instanceId: [32m'test-instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should handle instance shutdown gracefully 2845ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Initial election timeout fired
[DEBUG] test-instance-1: Starting initial election
[DEBUG] test-instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:50:04) { instanceId: [32m'test-instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: ELECTION, senderId: test-instance-1
[DEBUG] test-instance-1: Setting election timeout for 200ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Election timeout fired, calling completeElection()
[DEBUG] test-instance-1: completeElection() called, electionInProgress: true
[DEBUG] test-instance-1: Completing election - received 0 responses from: []
[DEBUG] test-instance-1: No responses received, becoming leader
[DEBUG] test-instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] test-instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] test-instance-1: NOW LEADER with priority 100, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: COORDINATOR, senderId: test-instance-1
[DEBUG] test-instance-1: Starting heartbeat with interval 100ms
‚ÑπÔ∏è [EventBus] Became leader (03:50:05) {
  instanceId: [32m'test-instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'100'[39m
}
[DEBUG] test-instance-1: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[DEBUG] test-instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: SHUTDOWN, senderId: test-instance-1
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: STEP_DOWN, senderId: test-instance-1
‚ÑπÔ∏è [EventBus] Stopped being leader (03:50:06) { instanceId: [32m'test-instance-1'[39m }
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:50:06) { instanceId: [32m'test-instance-1'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle BroadcastChannel errors gracefully
[DEBUG] test-instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] test-instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:50:06) {
  instanceId: [32m'test-instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Instance Management > should cleanup inactive instances 1611ms
stderr | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle BroadcastChannel errors gracefully
[DEBUG] test-instance-1: Failed to send message: Error: Channel error
    at MockBroadcastChannel.<anonymous> [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\__tests__\BrowserLeaderElection.test.ts:387:15[90m)[39m
    at MockBroadcastChannel.mockCall [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+spy@3.2.4/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at MockBroadcastChannel.postMessage [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/tinyspy@4.0.3/node_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at BrowserLeaderElection.sendMessage [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\BrowserLeaderElection.ts:860:29[90m)[39m
    at BrowserLeaderElection.startElection [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\BrowserLeaderElection.ts:539:10[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\BrowserLeaderElection.ts:507:14[90m)[39m
[90m    at listOnTimeout (node:internal/timers:608:17)[39m
[90m    at processTimers (node:internal/timers:543:7)[39m
‚ùå [EventBus] Failed to send leader election message (03:50:06) {
  messageType: [32m'ELECTION'[39m,
  error: [32m'Channel error'[39m,
  instanceId: [32m'test-instance-1'[39m
}

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle BroadcastChannel errors gracefully
[DEBUG] test-instance-1: Initial election timeout fired
[DEBUG] test-instance-1: Starting initial election
[DEBUG] test-instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:50:06) { instanceId: [32m'test-instance-1'[39m, priority: [32m'100'[39m }
[DEBUG] test-instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle BroadcastChannel errors gracefully
[DEBUG] test-instance-1: Election timeout fired, calling completeElection()
[DEBUG] test-instance-1: completeElection() called, electionInProgress: true
[DEBUG] test-instance-1: Completing election - received 0 responses from: []
[DEBUG] test-instance-1: No responses received, becoming leader
[DEBUG] test-instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] test-instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] test-instance-1: NOW LEADER with priority 100, totalElections: 1, isCurrentlyLeader=true
[DEBUG] test-instance-1: Communication failure as leader, stepping down
‚ÑπÔ∏è [EventBus] Stopped being leader (03:50:07) { instanceId: [32m'test-instance-1'[39m }
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered
[DEBUG] test-instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (03:50:07) {
  instanceId: [32m'test-instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'100'[39m
}
[DEBUG] test-instance-1: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered

stderr | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle BroadcastChannel errors gracefully
[DEBUG] test-instance-1: Failed to send message: Error: Channel error
    at MockBroadcastChannel.<anonymous> [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\__tests__\BrowserLeaderElection.test.ts:387:15[90m)[39m
    at MockBroadcastChannel.mockCall [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+spy@3.2.4/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at MockBroadcastChannel.postMessage [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/tinyspy@4.0.3/node_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at BrowserLeaderElection.sendMessage [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\BrowserLeaderElection.ts:860:29[90m)[39m
    at BrowserLeaderElection.becomeLeader [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\BrowserLeaderElection.ts:664:10[90m)[39m
    at BrowserLeaderElection.completeElection [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\BrowserLeaderElection.ts:580:12[90m)[39m
    at Timeout.<anonymous> [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\BrowserLeaderElection.ts:554:12[90m)[39m
[90m    at listOnTimeout (node:internal/timers:608:17)[39m
[90m    at processTimers (node:internal/timers:543:7)[39m
‚ùå [EventBus] Failed to send leader election message (03:50:07) {
  messageType: [32m'COORDINATOR'[39m,
  error: [32m'Channel error'[39m,
  instanceId: [32m'test-instance-1'[39m
}

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle BroadcastChannel errors gracefully
[DEBUG] test-instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: SHUTDOWN, senderId: test-instance-1
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:50:08) { instanceId: [32m'test-instance-1'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle BroadcastChannel errors gracefully
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle malformed messages
[DEBUG] test-instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] test-instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:50:08) {
  instanceId: [32m'test-instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle BroadcastChannel errors gracefully 2612ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle malformed messages
[DEBUG] test-instance-1: Initial election timeout fired
[DEBUG] test-instance-1: Starting initial election
[DEBUG] test-instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:50:09) { instanceId: [32m'test-instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: ELECTION, senderId: test-instance-1
[DEBUG] test-instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle malformed messages
[DEBUG] test-instance-1: Election timeout fired, calling completeElection()
[DEBUG] test-instance-1: completeElection() called, electionInProgress: true
[DEBUG] test-instance-1: Completing election - received 0 responses from: []
[DEBUG] test-instance-1: No responses received, becoming leader
[DEBUG] test-instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] test-instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] test-instance-1: NOW LEADER with priority 100, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: COORDINATOR, senderId: test-instance-1
[DEBUG] test-instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (03:50:10) {
  instanceId: [32m'test-instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'100'[39m
}
[DEBUG] test-instance-1: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle malformed messages
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle malformed messages
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle malformed messages
[DEBUG] test-instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: SHUTDOWN, senderId: test-instance-1
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: STEP_DOWN, senderId: test-instance-1
‚ÑπÔ∏è [EventBus] Stopped being leader (03:50:11) { instanceId: [32m'test-instance-1'[39m }
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:50:11) { instanceId: [32m'test-instance-1'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle malformed messages
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[DEBUG] rapid-instance-0: Initializing with priority 39.71203803085521
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] rapid-instance-0: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:50:11) {
  instanceId: [32m'rapid-instance-0'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'39.71203803085521'[39m
}
[DEBUG] rapid-instance-1: Initializing with priority 215.130678193707
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 1
[MOCK] Added listener to instance 1, total listeners: 1
[DEBUG] rapid-instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:50:11) {
  instanceId: [32m'rapid-instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'215.130678193707'[39m
}
[DEBUG] rapid-instance-2: Initializing with priority 46.587969564728326
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 2
[MOCK] Added listener to instance 2, total listeners: 1
[DEBUG] rapid-instance-2: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:50:11) {
  instanceId: [32m'rapid-instance-2'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'46.587969564728326'[39m
}
[DEBUG] rapid-instance-3: Initializing with priority 823.2563651382497
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 3
[MOCK] Added listener to instance 3, total listeners: 1
[DEBUG] rapid-instance-3: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:50:11) {
  instanceId: [32m'rapid-instance-3'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'823.2563651382497'[39m
}
[DEBUG] rapid-instance-4: Initializing with priority 854.3903844345456
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 4
[MOCK] Added listener to instance 4, total listeners: 1
[DEBUG] rapid-instance-4: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:50:11) {
  instanceId: [32m'rapid-instance-4'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'854.3903844345456'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle malformed messages 2614ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[DEBUG] rapid-instance-0: Initial election timeout fired
[DEBUG] rapid-instance-0: Starting initial election
[DEBUG] rapid-instance-0: Starting election with priority 39.71203803085521, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:50:11) { instanceId: [32m'rapid-instance-0'[39m, priority: [32m'39.71203803085521'[39m }
[MOCK] Instance 0 broadcasting to 4 other instances. Message type: ELECTION, senderId: rapid-instance-0
[DEBUG] rapid-instance-0: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[DEBUG] rapid-instance-1: Initial election timeout fired
[DEBUG] rapid-instance-1: Starting initial election
[DEBUG] rapid-instance-1: Starting election with priority 215.130678193707, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:50:11) { instanceId: [32m'rapid-instance-1'[39m, priority: [32m'215.130678193707'[39m }
[MOCK] Instance 1 broadcasting to 4 other instances. Message type: ELECTION, senderId: rapid-instance-1
[DEBUG] rapid-instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[DEBUG] rapid-instance-2: Initial election timeout fired
[DEBUG] rapid-instance-2: Starting initial election
[DEBUG] rapid-instance-2: Starting election with priority 46.587969564728326, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:50:11) { instanceId: [32m'rapid-instance-2'[39m, priority: [32m'46.587969564728326'[39m }
[MOCK] Instance 2 broadcasting to 4 other instances. Message type: ELECTION, senderId: rapid-instance-2
[DEBUG] rapid-instance-2: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[DEBUG] rapid-instance-3: Initial election timeout fired
[DEBUG] rapid-instance-3: Starting initial election
[DEBUG] rapid-instance-3: Starting election with priority 823.2563651382497, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:50:11) { instanceId: [32m'rapid-instance-3'[39m, priority: [32m'823.2563651382497'[39m }
[MOCK] Instance 3 broadcasting to 4 other instances. Message type: ELECTION, senderId: rapid-instance-3
[DEBUG] rapid-instance-3: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[DEBUG] rapid-instance-4: Initial election timeout fired
[DEBUG] rapid-instance-4: Starting initial election
[DEBUG] rapid-instance-4: Starting election with priority 854.3903844345456, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:50:11) { instanceId: [32m'rapid-instance-4'[39m, priority: [32m'854.3903844345456'[39m }
[MOCK] Instance 4 broadcasting to 4 other instances. Message type: ELECTION, senderId: rapid-instance-4
[DEBUG] rapid-instance-4: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] rapid-instance-1: Received ELECTION from rapid-instance-0, connected instances: [rapid-instance-0], wasNew: true
[DEBUG] rapid-instance-1: Election comparison - my priority: 215.130678193707, sender priority: 39.71203803085521, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-1: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 1 broadcasting to 4 other instances. Message type: ELECTION_OK, senderId: rapid-instance-1
[DEBUG] rapid-instance-1: Responded OK, may start own election later if needed
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received ELECTION from rapid-instance-0, connected instances: [rapid-instance-0], wasNew: true
[DEBUG] rapid-instance-2: Election comparison - my priority: 46.587969564728326, sender priority: 39.71203803085521, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-2: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 2 broadcasting to 4 other instances. Message type: ELECTION_OK, senderId: rapid-instance-2
[DEBUG] rapid-instance-2: Responded OK, may start own election later if needed
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received ELECTION from rapid-instance-0, connected instances: [rapid-instance-0], wasNew: true
[DEBUG] rapid-instance-3: Election comparison - my priority: 823.2563651382497, sender priority: 39.71203803085521, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-3: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 3 broadcasting to 4 other instances. Message type: ELECTION_OK, senderId: rapid-instance-3
[DEBUG] rapid-instance-3: Responded OK, may start own election later if needed
[MOCK] Sending to instance 4 (1 listeners)
[DEBUG] rapid-instance-4: Received ELECTION from rapid-instance-0, connected instances: [rapid-instance-0], wasNew: true
[DEBUG] rapid-instance-4: Election comparison - my priority: 854.3903844345456, sender priority: 39.71203803085521, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-4: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 4 broadcasting to 4 other instances. Message type: ELECTION_OK, senderId: rapid-instance-4
[DEBUG] rapid-instance-4: Responded OK, may start own election later if needed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received ELECTION from rapid-instance-1, connected instances: [rapid-instance-1], wasNew: true
[DEBUG] rapid-instance-0: Election comparison - my priority: 39.71203803085521, sender priority: 215.130678193707, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-0: Sender has higher priority (215.130678193707 > 39.71203803085521), not responding
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received ELECTION from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1], wasNew: true
[DEBUG] rapid-instance-2: Election comparison - my priority: 46.587969564728326, sender priority: 215.130678193707, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-2: Sender has higher priority (215.130678193707 > 46.587969564728326), not responding
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received ELECTION from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1], wasNew: true
[DEBUG] rapid-instance-3: Election comparison - my priority: 823.2563651382497, sender priority: 215.130678193707, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-3: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 3 broadcasting to 4 other instances. Message type: ELECTION_OK, senderId: rapid-instance-3
[DEBUG] rapid-instance-3: Responded OK, may start own election later if needed
[MOCK] Sending to instance 4 (1 listeners)
[DEBUG] rapid-instance-4: Received ELECTION from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1], wasNew: true
[DEBUG] rapid-instance-4: Election comparison - my priority: 854.3903844345456, sender priority: 215.130678193707, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-4: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 4 broadcasting to 4 other instances. Message type: ELECTION_OK, senderId: rapid-instance-4
[DEBUG] rapid-instance-4: Responded OK, may start own election later if needed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received ELECTION from rapid-instance-2, connected instances: [rapid-instance-1, rapid-instance-2], wasNew: true
[DEBUG] rapid-instance-0: Election comparison - my priority: 39.71203803085521, sender priority: 46.587969564728326, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-0: Sender has higher priority (46.587969564728326 > 39.71203803085521), not responding
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] rapid-instance-1: Received ELECTION from rapid-instance-2, connected instances: [rapid-instance-0, rapid-instance-2], wasNew: true
[DEBUG] rapid-instance-1: Election comparison - my priority: 215.130678193707, sender priority: 46.587969564728326, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-1: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 1 broadcasting to 4 other instances. Message type: ELECTION_OK, senderId: rapid-instance-1
[DEBUG] rapid-instance-1: Responded OK, may start own election later if needed
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received ELECTION from rapid-instance-2, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2], wasNew: true
[DEBUG] rapid-instance-3: Election comparison - my priority: 823.2563651382497, sender priority: 46.587969564728326, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-3: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 3 broadcasting to 4 other instances. Message type: ELECTION_OK, senderId: rapid-instance-3
[DEBUG] rapid-instance-3: Responded OK, may start own election later if needed
[MOCK] Sending to instance 4 (1 listeners)
[DEBUG] rapid-instance-4: Received ELECTION from rapid-instance-2, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2], wasNew: true
[DEBUG] rapid-instance-4: Election comparison - my priority: 854.3903844345456, sender priority: 46.587969564728326, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-4: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 4 broadcasting to 4 other instances. Message type: ELECTION_OK, senderId: rapid-instance-4
[DEBUG] rapid-instance-4: Responded OK, may start own election later if needed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received ELECTION from rapid-instance-3, connected instances: [rapid-instance-1, rapid-instance-2, rapid-instance-3], wasNew: true
[DEBUG] rapid-instance-0: Election comparison - my priority: 39.71203803085521, sender priority: 823.2563651382497, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-0: Sender has higher priority (823.2563651382497 > 39.71203803085521), not responding
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] rapid-instance-1: Received ELECTION from rapid-instance-3, connected instances: [rapid-instance-0, rapid-instance-2, rapid-instance-3], wasNew: true
[DEBUG] rapid-instance-1: Election comparison - my priority: 215.130678193707, sender priority: 823.2563651382497, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-1: Sender has higher priority (823.2563651382497 > 215.130678193707), not responding
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received ELECTION from rapid-instance-3, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-3], wasNew: true
[DEBUG] rapid-instance-2: Election comparison - my priority: 46.587969564728326, sender priority: 823.2563651382497, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-2: Sender has higher priority (823.2563651382497 > 46.587969564728326), not responding
[MOCK] Sending to instance 4 (1 listeners)
[DEBUG] rapid-instance-4: Received ELECTION from rapid-instance-3, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2, rapid-instance-3], wasNew: true
[DEBUG] rapid-instance-4: Election comparison - my priority: 854.3903844345456, sender priority: 823.2563651382497, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-4: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 4 broadcasting to 4 other instances. Message type: ELECTION_OK, senderId: rapid-instance-4
[DEBUG] rapid-instance-4: Responded OK, may start own election later if needed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received ELECTION from rapid-instance-4, connected instances: [rapid-instance-1, rapid-instance-2, rapid-instance-3, rapid-instance-4], wasNew: true
[DEBUG] rapid-instance-0: Election comparison - my priority: 39.71203803085521, sender priority: 854.3903844345456, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-0: Sender has higher priority (854.3903844345456 > 39.71203803085521), not responding
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] rapid-instance-1: Received ELECTION from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-2, rapid-instance-3, rapid-instance-4], wasNew: true
[DEBUG] rapid-instance-1: Election comparison - my priority: 215.130678193707, sender priority: 854.3903844345456, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-1: Sender has higher priority (854.3903844345456 > 215.130678193707), not responding
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received ELECTION from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-3, rapid-instance-4], wasNew: true
[DEBUG] rapid-instance-2: Election comparison - my priority: 46.587969564728326, sender priority: 854.3903844345456, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-2: Sender has higher priority (854.3903844345456 > 46.587969564728326), not responding
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received ELECTION from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2, rapid-instance-4], wasNew: true
[DEBUG] rapid-instance-3: Election comparison - my priority: 823.2563651382497, sender priority: 854.3903844345456, current leader: undefined, am I leader: false
[DEBUG] rapid-instance-3: Sender has higher priority (854.3903844345456 > 823.2563651382497), not responding

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received ELECTION_OK from rapid-instance-1, connected instances: [rapid-instance-1, rapid-instance-2, rapid-instance-3, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received ELECTION_OK from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-3, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received ELECTION_OK from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 4 (1 listeners)
[DEBUG] rapid-instance-4: Received ELECTION_OK from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2, rapid-instance-3], wasNew: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received ELECTION_OK from rapid-instance-2, connected instances: [rapid-instance-1, rapid-instance-2, rapid-instance-3, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] rapid-instance-1: Received ELECTION_OK from rapid-instance-2, connected instances: [rapid-instance-0, rapid-instance-2, rapid-instance-3, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received ELECTION_OK from rapid-instance-2, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 4 (1 listeners)
[DEBUG] rapid-instance-4: Received ELECTION_OK from rapid-instance-2, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2, rapid-instance-3], wasNew: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received ELECTION_OK from rapid-instance-3, connected instances: [rapid-instance-1, rapid-instance-2, rapid-instance-3, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] rapid-instance-1: Received ELECTION_OK from rapid-instance-3, connected instances: [rapid-instance-0, rapid-instance-2, rapid-instance-3, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received ELECTION_OK from rapid-instance-3, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-3, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 4 (1 listeners)
[DEBUG] rapid-instance-4: Received ELECTION_OK from rapid-instance-3, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2, rapid-instance-3], wasNew: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-1, rapid-instance-2, rapid-instance-3, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] rapid-instance-1: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-2, rapid-instance-3, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-3, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2, rapid-instance-4], wasNew: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received ELECTION_OK from rapid-instance-3, connected instances: [rapid-instance-1, rapid-instance-2, rapid-instance-3, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] rapid-instance-1: Received ELECTION_OK from rapid-instance-3, connected instances: [rapid-instance-0, rapid-instance-2, rapid-instance-3, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received ELECTION_OK from rapid-instance-3, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-3, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 4 (1 listeners)
[DEBUG] rapid-instance-4: Received ELECTION_OK from rapid-instance-3, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2, rapid-instance-3], wasNew: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-1, rapid-instance-2, rapid-instance-3, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] rapid-instance-1: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-2, rapid-instance-3, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-3, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2, rapid-instance-4], wasNew: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received ELECTION_OK from rapid-instance-1, connected instances: [rapid-instance-1, rapid-instance-2, rapid-instance-3, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received ELECTION_OK from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-3, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received ELECTION_OK from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 4 (1 listeners)
[DEBUG] rapid-instance-4: Received ELECTION_OK from rapid-instance-1, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2, rapid-instance-3], wasNew: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received ELECTION_OK from rapid-instance-3, connected instances: [rapid-instance-1, rapid-instance-2, rapid-instance-3, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] rapid-instance-1: Received ELECTION_OK from rapid-instance-3, connected instances: [rapid-instance-0, rapid-instance-2, rapid-instance-3, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received ELECTION_OK from rapid-instance-3, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-3, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 4 (1 listeners)
[DEBUG] rapid-instance-4: Received ELECTION_OK from rapid-instance-3, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2, rapid-instance-3], wasNew: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-1, rapid-instance-2, rapid-instance-3, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] rapid-instance-1: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-2, rapid-instance-3, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-3, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2, rapid-instance-4], wasNew: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-1, rapid-instance-2, rapid-instance-3, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] rapid-instance-1: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-2, rapid-instance-3, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-3, rapid-instance-4], wasNew: false
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received ELECTION_OK from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2, rapid-instance-4], wasNew: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[DEBUG] rapid-instance-0: Election timeout fired, calling completeElection()
[DEBUG] rapid-instance-0: completeElection() called, electionInProgress: true
[DEBUG] rapid-instance-0: Completing election - received 4 responses from: [rapid-instance-1, rapid-instance-2, rapid-instance-3, rapid-instance-4]
[DEBUG] rapid-instance-0: Checking responder rapid-instance-1 with priority 215.130678193707 vs my priority 39.71203803085521
[DEBUG] rapid-instance-0: Found higher priority responder: rapid-instance-1 (215.130678193707)
[DEBUG] rapid-instance-0: Responses from higher priority instances, waiting for coordinator

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[DEBUG] rapid-instance-1: Election timeout fired, calling completeElection()
[DEBUG] rapid-instance-1: completeElection() called, electionInProgress: true
[DEBUG] rapid-instance-1: Completing election - received 3 responses from: [rapid-instance-2, rapid-instance-3, rapid-instance-4]
[DEBUG] rapid-instance-1: Checking responder rapid-instance-2 with priority 46.587969564728326 vs my priority 215.130678193707
[DEBUG] rapid-instance-1: Checking responder rapid-instance-3 with priority 823.2563651382497 vs my priority 215.130678193707
[DEBUG] rapid-instance-1: Found higher priority responder: rapid-instance-3 (823.2563651382497)
[DEBUG] rapid-instance-1: Responses from higher priority instances, waiting for coordinator

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[DEBUG] rapid-instance-2: Election timeout fired, calling completeElection()
[DEBUG] rapid-instance-2: completeElection() called, electionInProgress: true
[DEBUG] rapid-instance-2: Completing election - received 3 responses from: [rapid-instance-1, rapid-instance-3, rapid-instance-4]
[DEBUG] rapid-instance-2: Checking responder rapid-instance-1 with priority 215.130678193707 vs my priority 46.587969564728326
[DEBUG] rapid-instance-2: Found higher priority responder: rapid-instance-1 (215.130678193707)
[DEBUG] rapid-instance-2: Responses from higher priority instances, waiting for coordinator

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[DEBUG] rapid-instance-3: Election timeout fired, calling completeElection()
[DEBUG] rapid-instance-3: completeElection() called, electionInProgress: true
[DEBUG] rapid-instance-3: Completing election - received 3 responses from: [rapid-instance-1, rapid-instance-2, rapid-instance-4]
[DEBUG] rapid-instance-3: Checking responder rapid-instance-1 with priority 215.130678193707 vs my priority 823.2563651382497
[DEBUG] rapid-instance-3: Checking responder rapid-instance-2 with priority 46.587969564728326 vs my priority 823.2563651382497
[DEBUG] rapid-instance-3: Checking responder rapid-instance-4 with priority 854.3903844345456 vs my priority 823.2563651382497
[DEBUG] rapid-instance-3: Found higher priority responder: rapid-instance-4 (854.3903844345456)
[DEBUG] rapid-instance-3: Responses from higher priority instances, waiting for coordinator

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[DEBUG] rapid-instance-4: Election timeout fired, calling completeElection()
[DEBUG] rapid-instance-4: completeElection() called, electionInProgress: true
[DEBUG] rapid-instance-4: Completing election - received 3 responses from: [rapid-instance-1, rapid-instance-2, rapid-instance-3]
[DEBUG] rapid-instance-4: Checking responder rapid-instance-1 with priority 215.130678193707 vs my priority 854.3903844345456
[DEBUG] rapid-instance-4: Checking responder rapid-instance-2 with priority 46.587969564728326 vs my priority 854.3903844345456
[DEBUG] rapid-instance-4: Checking responder rapid-instance-3 with priority 823.2563651382497 vs my priority 854.3903844345456
[DEBUG] rapid-instance-4: All responders have lower priority, becoming leader
[DEBUG] rapid-instance-4: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] rapid-instance-4: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] rapid-instance-4: NOW LEADER with priority 854.3903844345456, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 4 broadcasting to 4 other instances. Message type: COORDINATOR, senderId: rapid-instance-4
[DEBUG] rapid-instance-4: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (03:50:12) {
  instanceId: [32m'rapid-instance-4'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'854.3903844345456'[39m
}
[DEBUG] rapid-instance-4: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] rapid-instance-4: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] rapid-instance-4: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received COORDINATOR from rapid-instance-4, connected instances: [rapid-instance-1, rapid-instance-2, rapid-instance-3, rapid-instance-4], wasNew: false
[DEBUG] rapid-instance-0: Processing COORDINATOR message from rapid-instance-4 with priority 854.3903844345456
[DEBUG] rapid-instance-0: Received coordinator message from rapid-instance-4, previousLeader: undefined, wasLeader: false, electionInProgress: false
[DEBUG] rapid-instance-0: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (03:50:12) {
  leaderId: [32m'rapid-instance-4'[39m,
  previousLeader: [32m'undefined'[39m,
  instanceId: [32m'rapid-instance-0'[39m
}
[DEBUG] rapid-instance-0: Notifying 0 callbacks about leadership change (new leader: rapid-instance-4)
[DEBUG] rapid-instance-0: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] rapid-instance-0: No callbacks registered
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] rapid-instance-1: Received COORDINATOR from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-2, rapid-instance-3, rapid-instance-4], wasNew: false
[DEBUG] rapid-instance-1: Processing COORDINATOR message from rapid-instance-4 with priority 854.3903844345456
[DEBUG] rapid-instance-1: Received coordinator message from rapid-instance-4, previousLeader: undefined, wasLeader: false, electionInProgress: false
[DEBUG] rapid-instance-1: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (03:50:12) {
  leaderId: [32m'rapid-instance-4'[39m,
  previousLeader: [32m'undefined'[39m,
  instanceId: [32m'rapid-instance-1'[39m
}
[DEBUG] rapid-instance-1: Notifying 0 callbacks about leadership change (new leader: rapid-instance-4)
[DEBUG] rapid-instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] rapid-instance-1: No callbacks registered
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received COORDINATOR from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-3, rapid-instance-4], wasNew: false
[DEBUG] rapid-instance-2: Processing COORDINATOR message from rapid-instance-4 with priority 854.3903844345456
[DEBUG] rapid-instance-2: Received coordinator message from rapid-instance-4, previousLeader: undefined, wasLeader: false, electionInProgress: false
[DEBUG] rapid-instance-2: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (03:50:12) {
  leaderId: [32m'rapid-instance-4'[39m,
  previousLeader: [32m'undefined'[39m,
  instanceId: [32m'rapid-instance-2'[39m
}
[DEBUG] rapid-instance-2: Notifying 0 callbacks about leadership change (new leader: rapid-instance-4)
[DEBUG] rapid-instance-2: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] rapid-instance-2: No callbacks registered
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received COORDINATOR from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2, rapid-instance-4], wasNew: false
[DEBUG] rapid-instance-3: Processing COORDINATOR message from rapid-instance-4 with priority 854.3903844345456
[DEBUG] rapid-instance-3: Received coordinator message from rapid-instance-4, previousLeader: undefined, wasLeader: false, electionInProgress: false
[DEBUG] rapid-instance-3: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (03:50:12) {
  leaderId: [32m'rapid-instance-4'[39m,
  previousLeader: [32m'undefined'[39m,
  instanceId: [32m'rapid-instance-3'[39m
}
[DEBUG] rapid-instance-3: Notifying 0 callbacks about leadership change (new leader: rapid-instance-4)
[DEBUG] rapid-instance-3: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] rapid-instance-3: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[DEBUG] rapid-instance-4: Sending heartbeat as leader
[MOCK] Instance 4 broadcasting to 4 other instances. Message type: HEARTBEAT, senderId: rapid-instance-4

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] rapid-instance-0: Received HEARTBEAT from rapid-instance-4, connected instances: [rapid-instance-1, rapid-instance-2, rapid-instance-3, rapid-instance-4], wasNew: false
[DEBUG] rapid-instance-0: Received HEARTBEAT from rapid-instance-4, currentLeader is rapid-instance-4, senderPriority: 854.3903844345456, myPriority: 39.71203803085521
[DEBUG] rapid-instance-0: Not challenging leader - myPriority: 39.71203803085521, senderPriority: 854.3903844345456, isCurrentlyLeader: false
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] rapid-instance-1: Received HEARTBEAT from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-2, rapid-instance-3, rapid-instance-4], wasNew: false
[DEBUG] rapid-instance-1: Received HEARTBEAT from rapid-instance-4, currentLeader is rapid-instance-4, senderPriority: 854.3903844345456, myPriority: 215.130678193707
[DEBUG] rapid-instance-1: Not challenging leader - myPriority: 215.130678193707, senderPriority: 854.3903844345456, isCurrentlyLeader: false
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] rapid-instance-2: Received HEARTBEAT from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-3, rapid-instance-4], wasNew: false
[DEBUG] rapid-instance-2: Received HEARTBEAT from rapid-instance-4, currentLeader is rapid-instance-4, senderPriority: 854.3903844345456, myPriority: 46.587969564728326
[DEBUG] rapid-instance-2: Not challenging leader - myPriority: 46.587969564728326, senderPriority: 854.3903844345456, isCurrentlyLeader: false
[MOCK] Sending to instance 3 (1 listeners)
[DEBUG] rapid-instance-3: Received HEARTBEAT from rapid-instance-4, connected instances: [rapid-instance-0, rapid-instance-1, rapid-instance-2, rapid-instance-4], wasNew: false
[DEBUG] rapid-instance-3: Received HEARTBEAT from rapid-instance-4, currentLeader is rapid-instance-4, senderPriority: 854.3903844345456, myPriority: 823.2563651382497
[DEBUG] rapid-instance-3: Not challenging leader - myPriority: 823.2563651382497, senderPriority: 854.3903844345456, isCurrentlyLeader: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[DEBUG] rapid-instance-0: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 4 other instances. Message type: SHUTDOWN, senderId: rapid-instance-0
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:50:13) { instanceId: [32m'rapid-instance-0'[39m }
[DEBUG] rapid-instance-1: Destroying leader election instance
[MOCK] Instance 1 broadcasting to 4 other instances. Message type: SHUTDOWN, senderId: rapid-instance-1
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:50:13) { instanceId: [32m'rapid-instance-1'[39m }
[DEBUG] rapid-instance-2: Destroying leader election instance
[MOCK] Instance 2 broadcasting to 4 other instances. Message type: SHUTDOWN, senderId: rapid-instance-2
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:50:13) { instanceId: [32m'rapid-instance-2'[39m }
[DEBUG] rapid-instance-3: Destroying leader election instance
[MOCK] Instance 3 broadcasting to 4 other instances. Message type: SHUTDOWN, senderId: rapid-instance-3
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:50:13) { instanceId: [32m'rapid-instance-3'[39m }
[DEBUG] rapid-instance-4: Destroying leader election instance
[MOCK] Instance 4 broadcasting to 4 other instances. Message type: SHUTDOWN, senderId: rapid-instance-4
[MOCK] Instance 4 broadcasting to 4 other instances. Message type: STEP_DOWN, senderId: rapid-instance-4
‚ÑπÔ∏è [EventBus] Stopped being leader (03:50:13) { instanceId: [32m'rapid-instance-4'[39m }
[DEBUG] rapid-instance-4: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] rapid-instance-4: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:50:13) { instanceId: [32m'rapid-instance-4'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 1 (1 listeners)
[MOCK] Sending to instance 2 (1 listeners)
[MOCK] Sending to instance 3 (1 listeners)
[MOCK] Sending to instance 4 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[MOCK] Sending to instance 2 (1 listeners)
[MOCK] Sending to instance 3 (1 listeners)
[MOCK] Sending to instance 4 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[MOCK] Sending to instance 1 (1 listeners)
[MOCK] Sending to instance 3 (1 listeners)
[MOCK] Sending to instance 4 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[MOCK] Sending to instance 1 (1 listeners)
[MOCK] Sending to instance 2 (1 listeners)
[MOCK] Sending to instance 4 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[MOCK] Sending to instance 1 (1 listeners)
[MOCK] Sending to instance 2 (1 listeners)
[MOCK] Sending to instance 3 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Sending to instance 0 (1 listeners)
[MOCK] Sending to instance 1 (1 listeners)
[MOCK] Sending to instance 2 (1 listeners)
[MOCK] Sending to instance 3 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Closing BroadcastChannel instance 1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Closing BroadcastChannel instance 2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Closing BroadcastChannel instance 3

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections
[MOCK] Closing BroadcastChannel instance 4

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[DEBUG] instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:50:13) {
  instanceId: [32m'instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Error Handling > should handle rapid succession of elections 2124ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[DEBUG] instance-1: Initial election timeout fired
[DEBUG] instance-1: Starting initial election
[DEBUG] instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:50:13) { instanceId: [32m'instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: ELECTION, senderId: instance-1
[DEBUG] instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[DEBUG] instance-1: Election timeout fired, calling completeElection()
[DEBUG] instance-1: completeElection() called, electionInProgress: true
[DEBUG] instance-1: Completing election - received 0 responses from: []
[DEBUG] instance-1: No responses received, becoming leader
[DEBUG] instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] instance-1: NOW LEADER with priority 100, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: COORDINATOR, senderId: instance-1
[DEBUG] instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (03:50:14) {
  instanceId: [32m'instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'100'[39m
}
[DEBUG] instance-1: Notifying 1 callbacks about leadership change (became leader)
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=1
[DEBUG] instance-1: Calling callback 0 (attempt 1) with (true, undefined)
[DEBUG] instance-1: Callback 0 completed successfully
[DEBUG] instance-1: All callbacks processed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[DEBUG] instance-2: Initializing with priority 200
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 1
[MOCK] Added listener to instance 1, total listeners: 1
[DEBUG] instance-2: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:50:16) {
  instanceId: [32m'instance-2'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'200'[39m
}

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[DEBUG] instance-2: Initial election timeout fired
[DEBUG] instance-2: Starting initial election
[DEBUG] instance-2: Starting election with priority 200, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:50:16) { instanceId: [32m'instance-2'[39m, priority: [32m'200'[39m }
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: ELECTION, senderId: instance-2
[DEBUG] instance-2: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received ELECTION from instance-2, connected instances: [instance-2], wasNew: true
[DEBUG] instance-1: Election comparison - my priority: 100, sender priority: 200, current leader: instance-1, am I leader: true
[DEBUG] instance-1: Sender has higher priority (200 > 100), not responding

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received HEARTBEAT from instance-1, connected instances: [instance-1], wasNew: true
[DEBUG] instance-2: Received HEARTBEAT from instance-1, currentLeader is undefined, senderPriority: 100, myPriority: 200
[DEBUG] instance-2: Received heartbeat from unknown leader instance-1 (priority 100), considering as current leader

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[DEBUG] instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] instance-2: Received HEARTBEAT from instance-1, connected instances: [instance-1], wasNew: false
[DEBUG] instance-2: Received HEARTBEAT from instance-1, currentLeader is instance-1, senderPriority: 100, myPriority: 200
[DEBUG] instance-2: Detected leader instance-1 with lower priority (100 < 200), checking if challenge needed
[DEBUG] instance-2: Already in election process, not restarting challenge (this prevents infinite loops)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[DEBUG] instance-2: Election timeout fired, calling completeElection()
[DEBUG] instance-2: completeElection() called, electionInProgress: true
[DEBUG] instance-2: Completing election - received 0 responses from: []
[DEBUG] instance-2: No responses received, becoming leader
[DEBUG] instance-2: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=instance-1
[DEBUG] instance-2: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=instance-1
[DEBUG] instance-2: NOW LEADER with priority 200, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: COORDINATOR, senderId: instance-2
[DEBUG] instance-2: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (03:50:17) {
  instanceId: [32m'instance-2'[39m,
  previousLeader: [32m'instance-1'[39m,
  priority: [32m'200'[39m
}
[DEBUG] instance-2: Notifying 1 callbacks about leadership change (became leader)
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=true, previousLeader=instance-1, callbacks=1
[DEBUG] instance-2: Calling callback 0 (attempt 1) with (true, instance-1)
[DEBUG] instance-2: Callback 0 completed successfully
[DEBUG] instance-2: All callbacks processed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received COORDINATOR from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-1: Processing COORDINATOR message from instance-2 with priority 200
[DEBUG] instance-1: Received coordinator message from instance-2, previousLeader: instance-1, wasLeader: true, electionInProgress: false
[DEBUG] instance-1: Stepping down from leadership
‚ÑπÔ∏è [EventBus] Stopped being leader (03:50:17) { instanceId: [32m'instance-1'[39m }
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=1
[DEBUG] instance-1: Calling callback 0 (attempt 1) with (false, undefined)
[DEBUG] instance-1: Callback 0 completed successfully
[DEBUG] instance-1: All callbacks processed
[DEBUG] instance-1: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (03:50:17) {
  leaderId: [32m'instance-2'[39m,
  previousLeader: [32m'instance-1'[39m,
  instanceId: [32m'instance-1'[39m
}
[DEBUG] instance-1: Notifying 1 callbacks about leadership change (new leader: instance-2)
[DEBUG] instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=instance-1, callbacks=1
[DEBUG] instance-1: Calling callback 0 (attempt 1) with (false, instance-1)
[DEBUG] instance-1: Callback 0 completed successfully
[DEBUG] instance-1: All callbacks processed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[DEBUG] instance-2: Sending heartbeat as leader
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: HEARTBEAT, senderId: instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] instance-1: Received HEARTBEAT from instance-2, connected instances: [instance-2], wasNew: false
[DEBUG] instance-1: Received HEARTBEAT from instance-2, currentLeader is instance-2, senderPriority: 200, myPriority: 100
[DEBUG] instance-1: Not challenging leader - myPriority: 100, senderPriority: 200, isCurrentlyLeader: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[DEBUG] instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 1 other instances. Message type: SHUTDOWN, senderId: instance-1
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:50:18) { instanceId: [32m'instance-1'[39m }
[DEBUG] instance-2: Destroying leader election instance
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: SHUTDOWN, senderId: instance-2
[MOCK] Instance 1 broadcasting to 1 other instances. Message type: STEP_DOWN, senderId: instance-2
‚ÑπÔ∏è [EventBus] Stopped being leader (03:50:18) { instanceId: [32m'instance-2'[39m }
[DEBUG] instance-2: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=1
[DEBUG] instance-2: Calling callback 0 (attempt 1) with (false, undefined)
[DEBUG] instance-2: Callback 0 completed successfully
[DEBUG] instance-2: All callbacks processed
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:50:18) { instanceId: [32m'instance-2'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[MOCK] Sending to instance 1 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[MOCK] Sending to instance 0 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[MOCK] Sending to instance 0 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions
[MOCK] Closing BroadcastChannel instance 1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle leadership duration tracking
[DEBUG] test-instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] test-instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:50:18) {
  instanceId: [32m'test-instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle smooth leadership transitions 4631ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle leadership duration tracking
[DEBUG] test-instance-1: Initial election timeout fired
[DEBUG] test-instance-1: Starting initial election
[DEBUG] test-instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:50:18) { instanceId: [32m'test-instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: ELECTION, senderId: test-instance-1
[DEBUG] test-instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle leadership duration tracking
[DEBUG] test-instance-1: Election timeout fired, calling completeElection()
[DEBUG] test-instance-1: completeElection() called, electionInProgress: true
[DEBUG] test-instance-1: Completing election - received 0 responses from: []
[DEBUG] test-instance-1: No responses received, becoming leader
[DEBUG] test-instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] test-instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] test-instance-1: NOW LEADER with priority 100, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: COORDINATOR, senderId: test-instance-1
[DEBUG] test-instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (03:50:19) {
  instanceId: [32m'test-instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'100'[39m
}
[DEBUG] test-instance-1: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle leadership duration tracking
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle leadership duration tracking
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle leadership duration tracking
[DEBUG] test-instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: SHUTDOWN, senderId: test-instance-1
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: STEP_DOWN, senderId: test-instance-1
‚ÑπÔ∏è [EventBus] Stopped being leader (03:50:21) { instanceId: [32m'test-instance-1'[39m }
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:50:21) { instanceId: [32m'test-instance-1'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle leadership duration tracking
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should provide accurate leadership metrics
[DEBUG] test-instance-1: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] test-instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:50:21) {
  instanceId: [32m'test-instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Leadership Transitions > should handle leadership duration tracking 2823ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should provide accurate leadership metrics
[DEBUG] test-instance-1: Initial election timeout fired
[DEBUG] test-instance-1: Starting initial election
[DEBUG] test-instance-1: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:50:21) { instanceId: [32m'test-instance-1'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: ELECTION, senderId: test-instance-1
[DEBUG] test-instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should provide accurate leadership metrics
[DEBUG] test-instance-1: Election timeout fired, calling completeElection()
[DEBUG] test-instance-1: completeElection() called, electionInProgress: true
[DEBUG] test-instance-1: Completing election - received 0 responses from: []
[DEBUG] test-instance-1: No responses received, becoming leader
[DEBUG] test-instance-1: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] test-instance-1: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] test-instance-1: NOW LEADER with priority 100, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: COORDINATOR, senderId: test-instance-1
[DEBUG] test-instance-1: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (03:50:22) {
  instanceId: [32m'test-instance-1'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'100'[39m
}
[DEBUG] test-instance-1: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should provide accurate leadership metrics
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should provide accurate leadership metrics
[DEBUG] test-instance-1: Sending heartbeat as leader
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: HEARTBEAT, senderId: test-instance-1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should provide accurate leadership metrics
[DEBUG] test-instance-1: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: SHUTDOWN, senderId: test-instance-1
[MOCK] Instance 0 broadcasting to 0 other instances. Message type: STEP_DOWN, senderId: test-instance-1
‚ÑπÔ∏è [EventBus] Stopped being leader (03:50:23) { instanceId: [32m'test-instance-1'[39m }
[DEBUG] test-instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] test-instance-1: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:50:23) { instanceId: [32m'test-instance-1'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should provide accurate leadership metrics
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[DEBUG] stats-instance-0: Initializing with priority 100
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 0
[MOCK] Added listener to instance 0, total listeners: 1
[DEBUG] stats-instance-0: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:50:23) {
  instanceId: [32m'stats-instance-0'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'100'[39m
}

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[DEBUG] stats-instance-1: Initializing with priority 200
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 1
[MOCK] Added listener to instance 1, total listeners: 1
[DEBUG] stats-instance-1: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:50:23) {
  instanceId: [32m'stats-instance-1'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'200'[39m
}

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should provide accurate leadership metrics 2617ms
stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[DEBUG] stats-instance-2: Initializing with priority 300
[MOCK] Creating BroadcastChannel for test-election-channel, instanceId: 2
[MOCK] Added listener to instance 2, total listeners: 1
[DEBUG] stats-instance-2: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:50:23) {
  instanceId: [32m'stats-instance-2'[39m,
  channelName: [32m'test-election-channel'[39m,
  priority: [32m'300'[39m
}

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[DEBUG] stats-instance-0: Initial election timeout fired
[DEBUG] stats-instance-0: Starting initial election
[DEBUG] stats-instance-0: Starting election with priority 100, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:50:23) { instanceId: [32m'stats-instance-0'[39m, priority: [32m'100'[39m }
[MOCK] Instance 0 broadcasting to 2 other instances. Message type: ELECTION, senderId: stats-instance-0
[DEBUG] stats-instance-0: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] stats-instance-1: Received ELECTION from stats-instance-0, connected instances: [stats-instance-0], wasNew: true
[DEBUG] stats-instance-1: Election comparison - my priority: 200, sender priority: 100, current leader: undefined, am I leader: false
[DEBUG] stats-instance-1: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 1 broadcasting to 2 other instances. Message type: ELECTION_OK, senderId: stats-instance-1
[DEBUG] stats-instance-1: Responded OK, may start own election later if needed
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] stats-instance-2: Received ELECTION from stats-instance-0, connected instances: [stats-instance-0], wasNew: true
[DEBUG] stats-instance-2: Election comparison - my priority: 300, sender priority: 100, current leader: undefined, am I leader: false
[DEBUG] stats-instance-2: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 2 broadcasting to 2 other instances. Message type: ELECTION_OK, senderId: stats-instance-2
[DEBUG] stats-instance-2: Responded OK, may start own election later if needed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] stats-instance-0: Received ELECTION_OK from stats-instance-1, connected instances: [stats-instance-1], wasNew: true
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] stats-instance-2: Received ELECTION_OK from stats-instance-1, connected instances: [stats-instance-0, stats-instance-1], wasNew: true

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] stats-instance-0: Received ELECTION_OK from stats-instance-2, connected instances: [stats-instance-1, stats-instance-2], wasNew: true
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] stats-instance-1: Received ELECTION_OK from stats-instance-2, connected instances: [stats-instance-0, stats-instance-2], wasNew: true

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[DEBUG] stats-instance-1: Initial election timeout fired
[DEBUG] stats-instance-1: Starting initial election
[DEBUG] stats-instance-1: Starting election with priority 200, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:50:23) { instanceId: [32m'stats-instance-1'[39m, priority: [32m'200'[39m }
[MOCK] Instance 1 broadcasting to 2 other instances. Message type: ELECTION, senderId: stats-instance-1
[DEBUG] stats-instance-1: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] stats-instance-0: Received ELECTION from stats-instance-1, connected instances: [stats-instance-1, stats-instance-2], wasNew: false
[DEBUG] stats-instance-0: Election comparison - my priority: 100, sender priority: 200, current leader: undefined, am I leader: false
[DEBUG] stats-instance-0: Sender has higher priority (200 > 100), not responding
[MOCK] Sending to instance 2 (1 listeners)
[DEBUG] stats-instance-2: Received ELECTION from stats-instance-1, connected instances: [stats-instance-0, stats-instance-1], wasNew: false
[DEBUG] stats-instance-2: Election comparison - my priority: 300, sender priority: 200, current leader: undefined, am I leader: false
[DEBUG] stats-instance-2: I have higher priority, responding with OK and preparing to take leadership
[MOCK] Instance 2 broadcasting to 2 other instances. Message type: ELECTION_OK, senderId: stats-instance-2
[DEBUG] stats-instance-2: Responded OK, may start own election later if needed

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] stats-instance-0: Received ELECTION_OK from stats-instance-2, connected instances: [stats-instance-1, stats-instance-2], wasNew: false
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] stats-instance-1: Received ELECTION_OK from stats-instance-2, connected instances: [stats-instance-0, stats-instance-2], wasNew: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[DEBUG] stats-instance-2: Initial election timeout fired
[DEBUG] stats-instance-2: Starting initial election
[DEBUG] stats-instance-2: Starting election with priority 300, participationCount: 1
‚ÑπÔ∏è [EventBus] Starting leader election (03:50:24) { instanceId: [32m'stats-instance-2'[39m, priority: [32m'300'[39m }
[MOCK] Instance 2 broadcasting to 2 other instances. Message type: ELECTION, senderId: stats-instance-2
[DEBUG] stats-instance-2: Setting election timeout for 1000ms

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] stats-instance-0: Received ELECTION from stats-instance-2, connected instances: [stats-instance-1, stats-instance-2], wasNew: false
[DEBUG] stats-instance-0: Election comparison - my priority: 100, sender priority: 300, current leader: undefined, am I leader: false
[DEBUG] stats-instance-0: Sender has higher priority (300 > 100), not responding
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] stats-instance-1: Received ELECTION from stats-instance-2, connected instances: [stats-instance-0, stats-instance-2], wasNew: false
[DEBUG] stats-instance-1: Election comparison - my priority: 200, sender priority: 300, current leader: undefined, am I leader: false
[DEBUG] stats-instance-1: Sender has higher priority (300 > 200), not responding

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[DEBUG] stats-instance-0: Election timeout fired, calling completeElection()
[DEBUG] stats-instance-0: completeElection() called, electionInProgress: true
[DEBUG] stats-instance-0: Completing election - received 2 responses from: [stats-instance-1, stats-instance-2]
[DEBUG] stats-instance-0: Checking responder stats-instance-1 with priority 200 vs my priority 100
[DEBUG] stats-instance-0: Found higher priority responder: stats-instance-1 (200)
[DEBUG] stats-instance-0: Responses from higher priority instances, waiting for coordinator

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[DEBUG] stats-instance-1: Election timeout fired, calling completeElection()
[DEBUG] stats-instance-1: completeElection() called, electionInProgress: true
[DEBUG] stats-instance-1: Completing election - received 1 responses from: [stats-instance-2]
[DEBUG] stats-instance-1: Checking responder stats-instance-2 with priority 300 vs my priority 200
[DEBUG] stats-instance-1: Found higher priority responder: stats-instance-2 (300)
[DEBUG] stats-instance-1: Responses from higher priority instances, waiting for coordinator

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[DEBUG] stats-instance-2: Election timeout fired, calling completeElection()
[DEBUG] stats-instance-2: completeElection() called, electionInProgress: true
[DEBUG] stats-instance-2: Completing election - received 0 responses from: []
[DEBUG] stats-instance-2: No responses received, becoming leader
[DEBUG] stats-instance-2: becomeLeader() called - current state: isCurrentlyLeader=false, isDestroyed=false, currentLeader=undefined
[DEBUG] stats-instance-2: BECOMING LEADER - setting isCurrentlyLeader=true, previousLeader=undefined
[DEBUG] stats-instance-2: NOW LEADER with priority 300, totalElections: 1, isCurrentlyLeader=true
[MOCK] Instance 2 broadcasting to 2 other instances. Message type: COORDINATOR, senderId: stats-instance-2
[DEBUG] stats-instance-2: Starting heartbeat with interval 500ms
‚ÑπÔ∏è [EventBus] Became leader (03:50:25) {
  instanceId: [32m'stats-instance-2'[39m,
  previousLeader: [32m'undefined'[39m,
  priority: [32m'300'[39m
}
[DEBUG] stats-instance-2: Notifying 0 callbacks about leadership change (became leader)
[DEBUG] stats-instance-2: notifyLeadershipChange called with isLeader=true, previousLeader=undefined, callbacks=0
[DEBUG] stats-instance-2: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] stats-instance-0: Received COORDINATOR from stats-instance-2, connected instances: [stats-instance-1, stats-instance-2], wasNew: false
[DEBUG] stats-instance-0: Processing COORDINATOR message from stats-instance-2 with priority 300
[DEBUG] stats-instance-0: Received coordinator message from stats-instance-2, previousLeader: undefined, wasLeader: false, electionInProgress: false
[DEBUG] stats-instance-0: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (03:50:25) {
  leaderId: [32m'stats-instance-2'[39m,
  previousLeader: [32m'undefined'[39m,
  instanceId: [32m'stats-instance-0'[39m
}
[DEBUG] stats-instance-0: Notifying 0 callbacks about leadership change (new leader: stats-instance-2)
[DEBUG] stats-instance-0: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] stats-instance-0: No callbacks registered
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] stats-instance-1: Received COORDINATOR from stats-instance-2, connected instances: [stats-instance-0, stats-instance-2], wasNew: false
[DEBUG] stats-instance-1: Processing COORDINATOR message from stats-instance-2 with priority 300
[DEBUG] stats-instance-1: Received coordinator message from stats-instance-2, previousLeader: undefined, wasLeader: false, electionInProgress: false
[DEBUG] stats-instance-1: cancelElection() called but no election was in progress
‚ÑπÔ∏è [EventBus] New leader elected (03:50:25) {
  leaderId: [32m'stats-instance-2'[39m,
  previousLeader: [32m'undefined'[39m,
  instanceId: [32m'stats-instance-1'[39m
}
[DEBUG] stats-instance-1: Notifying 0 callbacks about leadership change (new leader: stats-instance-2)
[DEBUG] stats-instance-1: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] stats-instance-1: No callbacks registered

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[DEBUG] stats-instance-2: Sending heartbeat as leader
[MOCK] Instance 2 broadcasting to 2 other instances. Message type: HEARTBEAT, senderId: stats-instance-2

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Sending to instance 0 (1 listeners)
[DEBUG] stats-instance-0: Received HEARTBEAT from stats-instance-2, connected instances: [stats-instance-1, stats-instance-2], wasNew: false
[DEBUG] stats-instance-0: Received HEARTBEAT from stats-instance-2, currentLeader is stats-instance-2, senderPriority: 300, myPriority: 100
[DEBUG] stats-instance-0: Not challenging leader - myPriority: 100, senderPriority: 300, isCurrentlyLeader: false
[MOCK] Sending to instance 1 (1 listeners)
[DEBUG] stats-instance-1: Received HEARTBEAT from stats-instance-2, connected instances: [stats-instance-0, stats-instance-2], wasNew: false
[DEBUG] stats-instance-1: Received HEARTBEAT from stats-instance-2, currentLeader is stats-instance-2, senderPriority: 300, myPriority: 200
[DEBUG] stats-instance-1: Not challenging leader - myPriority: 200, senderPriority: 300, isCurrentlyLeader: false

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[DEBUG] stats-instance-0: Destroying leader election instance
[MOCK] Instance 0 broadcasting to 2 other instances. Message type: SHUTDOWN, senderId: stats-instance-0
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:50:25) { instanceId: [32m'stats-instance-0'[39m }
[DEBUG] stats-instance-1: Destroying leader election instance
[MOCK] Instance 1 broadcasting to 2 other instances. Message type: SHUTDOWN, senderId: stats-instance-1
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:50:25) { instanceId: [32m'stats-instance-1'[39m }
[DEBUG] stats-instance-2: Destroying leader election instance
[MOCK] Instance 2 broadcasting to 2 other instances. Message type: SHUTDOWN, senderId: stats-instance-2
[MOCK] Instance 2 broadcasting to 2 other instances. Message type: STEP_DOWN, senderId: stats-instance-2
‚ÑπÔ∏è [EventBus] Stopped being leader (03:50:25) { instanceId: [32m'stats-instance-2'[39m }
[DEBUG] stats-instance-2: notifyLeadershipChange called with isLeader=false, previousLeader=undefined, callbacks=0
[DEBUG] stats-instance-2: No callbacks registered
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:50:25) { instanceId: [32m'stats-instance-2'[39m }

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Sending to instance 1 (1 listeners)
[MOCK] Sending to instance 2 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Sending to instance 0 (1 listeners)
[MOCK] Sending to instance 2 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Sending to instance 0 (1 listeners)
[MOCK] Sending to instance 1 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Sending to instance 0 (1 listeners)
[MOCK] Sending to instance 1 (1 listeners)

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Closing BroadcastChannel instance 0

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Closing BroadcastChannel instance 1

stdout | src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics
[MOCK] Closing BroadcastChannel instance 2

 ‚úì src/lib/events/distributed/__tests__/BrowserLeaderElection.test.ts > BrowserLeaderElection > Metrics and Monitoring > should track election statistics 2289ms
stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:49:28) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:49:28) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:49:28) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:49:28) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ÑπÔ∏è [Security] Request rate limit check passed (03:49:28) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'97'[39m,
  suspicionScore: [32m'41'[39m,
  requestId: [32m'req_1757789368094_d1ma5l75xwlc'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:976:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:444:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1239:7[90m)[39m

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should propagate events across multiple instances
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:49:28)
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:49:28)
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:49:28)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should propagate events across multiple instances
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:49:28) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:49:28) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:49:28) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:49:28) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:49:28) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:49:28) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:49:28) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:49:28) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:49:28) { instanceId: [32m'undefined'[39m }
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should propagate events across multiple instances
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:49:28)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:49:28)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:49:28)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:28)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:49:28)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:49:28) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:49:28)
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:49:28)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:49:28)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:49:28)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:28)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:49:28)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:49:28) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:49:28)
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:49:28)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:49:28)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:49:28)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:28)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:49:28)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:49:28) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:49:28)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should propagate events across multiple instances
[EventBus] Graceful shutdown completed
[EventBus] Graceful shutdown completed
[EventBus] Graceful shutdown completed
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:49:28)
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:49:28)
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:49:28)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should maintain event ordering across instances
‚ÑπÔ∏è [Security] New CSP nonce generated (03:50:58) { noncePrefix: [32m'cmlh9atz'[39m, timestamp: [32m'1757789458086'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:50:58)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:50:58) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:50:58) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:50:58) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [Security] New CSP nonce generated (03:50:58) { noncePrefix: [32m'q5us8f7q'[39m, timestamp: [32m'1757789458086'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:50:58)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:50:58) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:50:58) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:50:58) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should maintain event ordering across instances
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:50:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:50:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:50:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:50:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:50:58) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:50:58) { error: {} }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:50:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:50:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:50:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:50:58) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:50:58) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:49:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:49:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:49:28) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:49:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:49:28)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:49:28)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:49:28)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:28)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:49:28)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:49:28) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:49:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
[EventBus] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:49:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances
‚ÑπÔ∏è [Security] Request rate limit check passed (03:50:58) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'43'[39m,
  requestId: [32m'req_1757789458110_r3xd1059d9mz'[39m
}

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
‚ÑπÔ∏è [Security] New CSP nonce generated (03:50:58) { noncePrefix: [32m'7o7xh0zt'[39m, timestamp: [32m'1757789458111'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:50:58)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:50:58) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:50:58) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:50:58) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:50:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:50:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:50:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:50:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:50:58) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:50:58) { error: {} }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
‚ùå [EventBus] Failed to handle remote event (03:50:58) {
  eventId: [32m'remote-event-1'[39m,
  pattern: [32m'remote.pattern'[39m,
  error: [32m"Cannot read properties of undefined (reading 'includes')"[39m
}

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:50:58)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:50:58) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:50:58) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:50:58) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:50:58)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:50:58)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:50:58)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:50:58)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:50:58)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:50:58) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:50:58)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
[EventBus] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:50:58)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:976:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:444:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1239:7[90m)[39m

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:50:58)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (03:50:58) {
  keyVersion: [32m'key_1757789458111_iqzw63rs'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (03:50:58) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:50:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
[EventBus] Adding subscription to weak subscription manager for pattern: remote.pattern
[EventBus] Subscription added: remote.pattern (sub_1757789458124_q2rx5g5p1) [moduleId: anonymous]

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:50:58) {
  subscriptionId: [32m'sub_1757789458124_q2rx5g5p1'[39m,
  pattern: [32m'remote.pattern'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ÑπÔ∏è [Security] New CSP nonce generated (03:50:58) { noncePrefix: [32m'pl7hic1p'[39m, timestamp: [32m'1757789458125'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:50:58)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:50:58) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:50:58) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:50:58) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:50:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:50:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:50:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:50:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:50:58) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:50:58) { error: {} }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:50:58)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (03:50:58) {
  keyVersion: [32m'key_1757789458125_vwpkjk5v'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (03:50:58) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:50:58) { isInitialized: [32m'true'[39m }
‚ÑπÔ∏è [Security] Request rate limit check passed (03:50:58) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.initialized'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789458125_j5uhg4t0wpjj'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:976:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:444:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at DistributedEventBus.doInitialize [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:299:7[90m)[39m

 √ó src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should propagate events across multiple instances 90031ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should emit events locally and distribute to other instances 90014ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should handle remote events from other instances 10ms
   ‚Üí expected "spy" to be called with arguments: [ ObjectContaining{‚Ä¶} ][90m

Number of calls: [1m0[22m
[39m
stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:50:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:50:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:50:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:50:58) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ÑπÔ∏è [Security] Request rate limit check passed (03:50:58) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'98'[39m,
  suspicionScore: [32m'45'[39m,
  requestId: [32m'req_1757789458125_y8h3kd5347ep'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:976:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:444:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1239:7[90m)[39m

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ÑπÔ∏è [Security] Request rate limit check passed (03:50:58) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'97'[39m,
  suspicionScore: [32m'47'[39m,
  requestId: [32m'req_1757789458125_g8id6e26ffx8'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:50:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:976:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:444:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1239:7[90m)[39m

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:50:58) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should maintain event ordering across instances
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:50:58)
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:50:58)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should maintain event ordering across instances
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:50:58) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:50:58) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:50:58) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:50:58) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:50:58) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:50:58) { instanceId: [32m'undefined'[39m }
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should maintain event ordering across instances
[EventBus] Graceful shutdown completed
[EventBus] Graceful shutdown completed
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:50:58)
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:50:58)

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should maintain event ordering across instances
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:50:58)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:50:58)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:50:58)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:50:58)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:50:58)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:50:58) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:50:58)
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:50:58)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:50:58)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:50:58)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:50:58)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:50:58)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:50:58) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:50:58)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should handle different bus IDs independently
‚ÑπÔ∏è [Security] New CSP nonce generated (03:52:28) { noncePrefix: [32m'fvka3cic'[39m, timestamp: [32m'1757789548104'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:52:28)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:52:28) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:52:28) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:52:28) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [Security] New CSP nonce generated (03:52:28) { noncePrefix: [32m'19x9skez'[39m, timestamp: [32m'1757789548104'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:52:28)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:52:28) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:52:28) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:52:28) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [Security] New CSP nonce generated (03:52:28) { noncePrefix: [32m'qd7cs4wp'[39m, timestamp: [32m'1757789548104'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:52:28)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:52:28) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:52:28) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:52:28) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should handle different bus IDs independently
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:52:28) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:52:28) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:52:28) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:52:28) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:52:28) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:52:28) { error: {} }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:52:28) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:52:28) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:52:28) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:52:28) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:52:28) { error: {} }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:52:28) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:52:28) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:52:28) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:52:28) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:52:28) { error: {} }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:50:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:50:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:50:58) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ÑπÔ∏è [Security] Request rate limit check passed (03:50:58) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'96'[39m,
  suspicionScore: [32m'49'[39m,
  requestId: [32m'req_1757789458125_p01md1mk0hzv'[39m
}

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:50:58)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:50:58) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:50:58) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:50:58) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:50:58)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:50:58)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:50:58)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:50:58)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:50:58)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:50:58) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:50:58)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
[EventBus] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:50:58)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:976:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:444:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1239:7[90m)[39m

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should participate in leader election
‚ÑπÔ∏è [Security] New CSP nonce generated (03:52:28) { noncePrefix: [32m'7pqh3kmw'[39m, timestamp: [32m'1757789548136'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:52:28)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:52:28) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:52:28) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:52:28) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should participate in leader election
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:52:28) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:52:28) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:52:28) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:52:28) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:52:28) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:52:28) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should participate in leader election
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:52:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should participate in leader election
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:52:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should participate in leader election
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:52:28) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:52:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should participate in leader election
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should participate in leader election
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:52:28)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:52:28)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:52:28) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:52:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should participate in leader election
[EventBus] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should participate in leader election
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:52:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ÑπÔ∏è [Security] New CSP nonce generated (03:52:28) { noncePrefix: [32m'kgzmp021'[39m, timestamp: [32m'1757789548143'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:52:28)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:52:28) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:52:28) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:52:28) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:52:28) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:52:28) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:52:28) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:52:28) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:52:28) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:52:28) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:52:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:52:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:52:28) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:52:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
[EventBus] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:52:28)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:52:28)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:52:28) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:52:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:52:28)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:52:28)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (03:52:28) {
  keyVersion: [32m'key_1757789548136_naacrmqu'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (03:52:28) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:52:28) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:52:28)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (03:52:28) {
  keyVersion: [32m'key_1757789548143_amflx1j7'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (03:52:28) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:52:28) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected
‚ÑπÔ∏è [Security] New CSP nonce generated (03:52:28) { noncePrefix: [32m'zo5sst6a'[39m, timestamp: [32m'1757789548151'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:52:28)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:52:28) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:52:28) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:52:28) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:52:28) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:52:28) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:52:28) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:52:28) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:52:28) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:52:28) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:52:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:52:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:52:28) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:52:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected
[EventBus] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:52:28)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:52:28)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:52:28) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:52:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:52:28)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:52:28)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (03:52:28) {
  keyVersion: [32m'key_1757789548151_qpgi7eto'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (03:52:28) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:52:28) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions
‚ÑπÔ∏è [Security] New CSP nonce generated (03:52:28) { noncePrefix: [32m'joq6gfxs'[39m, timestamp: [32m'1757789548158'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:52:28)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:52:28) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:52:28) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:52:28) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:52:28) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:52:28) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:52:28) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:52:28) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:52:28) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:52:28) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:52:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:52:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:52:28) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:52:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions
[EventBus] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:52:28)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:52:28)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:52:28) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:52:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:52:28)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:52:28)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (03:52:28) {
  keyVersion: [32m'key_1757789548158_0em7dmil'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (03:52:28) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:52:28) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing
‚ÑπÔ∏è [Security] New CSP nonce generated (03:52:28) { noncePrefix: [32m'uro0i083'[39m, timestamp: [32m'1757789548165'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:52:28)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:52:28) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:52:28) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:52:28) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:52:28) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:52:28) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:52:28) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:52:28) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:52:28) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:52:28) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:52:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:52:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:52:28) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:52:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing
[EventBus] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:52:28)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:52:28)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:52:28) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:52:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:52:28)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:52:28)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (03:52:28) {
  keyVersion: [32m'key_1757789548165_vcjnqn0o'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (03:52:28) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:52:28) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions
‚ÑπÔ∏è [Security] New CSP nonce generated (03:52:28) { noncePrefix: [32m'hoa926ls'[39m, timestamp: [32m'1757789548173'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:52:28)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:52:28) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:52:28) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:52:28) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:52:28) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:52:28) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:52:28) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:52:28) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:52:28) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:52:28) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:52:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:52:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:52:28) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:52:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions
[EventBus] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:52:28)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:52:28)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:52:28) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:52:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:52:28)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:52:28)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (03:52:28) {
  keyVersion: [32m'key_1757789548173_x7d8zho7'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (03:52:28) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:52:28) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently
‚ÑπÔ∏è [Security] New CSP nonce generated (03:52:28) { noncePrefix: [32m'8igupu6y'[39m, timestamp: [32m'1757789548178'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:52:28)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:52:28) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:52:28) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:52:28) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:52:28) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:52:28) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:52:28) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:52:28) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:52:28) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:52:28) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:52:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:52:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:52:28) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:52:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently
[EventBus] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:52:28)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:52:28)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:52:28) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:52:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:52:28)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:52:28)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (03:52:28) {
  keyVersion: [32m'key_1757789548178_8piok427'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (03:52:28) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:52:28) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ÑπÔ∏è [Security] New CSP nonce generated (03:52:28) { noncePrefix: [32m'7p9jhkol'[39m, timestamp: [32m'1757789548184'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:52:28)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:52:28) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:52:28) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:52:28) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:52:28) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:52:28) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:52:28) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:52:28) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:52:28) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:52:28) { error: {} }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:52:28)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (03:52:28) {
  keyVersion: [32m'key_1757789548184_mpxip4r4'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (03:52:28) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:52:28) { isInitialized: [32m'true'[39m }
‚ÑπÔ∏è [Security] Request rate limit check passed (03:52:28) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.initialized'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789548184_76s97xtl1mvl'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:976:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:444:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at DistributedEventBus.doInitialize [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:299:7[90m)[39m

 √ó src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should maintain event ordering across instances 90018ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Distribution > should prevent infinite loops when distributing events 90010ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ‚úì src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should participate in leader election 6ms
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should handle leadership changes 6ms
   ‚Üí eventBus.handleLeadershipChange is not a function
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Leader Election > should perform leader responsibilities when elected 6ms
   ‚Üí eventBus.handleLeadershipChange is not a function
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should detect network partitions 5ms
   ‚Üí eventBus.handleNetworkPartition is not a function
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should handle partition healing 5ms
   ‚Üí eventBus.handlePartitionHealing is not a function
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Network Partition Handling > should fallback gracefully during partitions 4ms
   ‚Üí eventBus.handleNetworkPartition is not a function
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should partition events consistently 5ms
   ‚Üí eventBus.getPartitionInfo is not a function
stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:52:28) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ÑπÔ∏è [Security] Request rate limit check passed (03:52:28) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'51'[39m,
  requestId: [32m'req_1757789548184_0vh6x8lj6kcy'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:976:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:444:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1239:7[90m)[39m

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:52:28) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:52:28) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:52:28) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:52:28) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ÑπÔ∏è [Security] Request rate limit check passed (03:52:28) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'98'[39m,
  suspicionScore: [32m'53'[39m,
  requestId: [32m'req_1757789548184_pfuzbu4jqdbz'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:976:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:444:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1239:7[90m)[39m

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:52:28) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:52:28) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:52:28) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:52:28) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:52:28) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:52:28) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:52:28) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should handle different bus IDs independently
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:52:28)
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:52:28)
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:52:28)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should handle different bus IDs independently
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:52:28) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:52:28) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:52:28) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:52:28) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:52:28) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:52:28) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:52:28) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:52:28) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:52:28) { instanceId: [32m'undefined'[39m }
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should handle different bus IDs independently
[EventBus] Graceful shutdown completed
[EventBus] Graceful shutdown completed
[EventBus] Graceful shutdown completed
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:52:28)
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:52:28)
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:52:28)

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should handle different bus IDs independently
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:52:28)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:52:28)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:52:28) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:52:28)
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:52:28)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:52:28)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:52:28) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:52:28)
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:52:28)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:52:28)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:52:28) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:52:28)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should elect leader consistently across instances
‚ÑπÔ∏è [Security] New CSP nonce generated (03:53:58) { noncePrefix: [32m'jyem46ge'[39m, timestamp: [32m'1757789638122'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:53:58)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:53:58) {
  distributed: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  instanceId: [32m'undefined'[39m
}
‚ÑπÔ∏è [Security] New CSP nonce generated (03:53:58) { noncePrefix: [32m'e4txirpz'[39m, timestamp: [32m'1757789638122'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:53:58)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:53:58) {
  distributed: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  instanceId: [32m'undefined'[39m
}
‚ÑπÔ∏è [Security] New CSP nonce generated (03:53:58) { noncePrefix: [32m'dceyjrgj'[39m, timestamp: [32m'1757789638122'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:53:58)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:53:58) {
  distributed: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  instanceId: [32m'undefined'[39m
}

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should elect leader consistently across instances
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:53:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:53:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:53:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:53:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:53:58) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [Security] [SECURITY] RateLimiter initialized (03:53:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:53:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:53:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:53:58) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [Security] [SECURITY] RateLimiter initialized (03:53:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:53:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:53:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:53:58) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:52:28) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ÑπÔ∏è [Security] Request rate limit check passed (03:52:28) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'97'[39m,
  suspicionScore: [32m'55'[39m,
  requestId: [32m'req_1757789548184_yqnpx8x8lbp4'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:976:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:444:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1239:7[90m)[39m

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:52:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:52:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:52:28) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:52:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
[EventBus] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:52:28)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:52:28)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:52:28)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:52:28) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:52:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:52:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ÑπÔ∏è [Security] New CSP nonce generated (03:53:58) { noncePrefix: [32m'8hx6yu3q'[39m, timestamp: [32m'1757789638199'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:53:58)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:53:58) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:53:58) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:53:58) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:53:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:53:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:53:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:53:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:53:58) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:53:58) { error: {} }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:53:58)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (03:53:58) {
  keyVersion: [32m'key_1757789638199_nwtyucw9'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (03:53:58) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:53:58) { isInitialized: [32m'true'[39m }
‚ÑπÔ∏è [Security] Request rate limit check passed (03:53:58) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.initialized'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789638199_4ewcrdf5dvhd'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:976:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:444:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at DistributedEventBus.doInitialize [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:299:7[90m)[39m

 √ó src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Multi-Instance Communication > should handle different bus IDs independently 90018ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Event Partitioning > should maintain ordering within partitions 90014ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ÑπÔ∏è [Security] Rate limiter cleanup completed (03:53:58) {
  globalRecords: [32m'0'[39m,
  ipRecords: [32m'0'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'0'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'0'[39m
}

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ÑπÔ∏è [Security] New CSP nonce generated (03:53:58) { noncePrefix: [32m'jr4ffp3v'[39m, timestamp: [32m'1757789638199'[39m }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should elect leader consistently across instances
‚ÑπÔ∏è [Security] Rate limiter cleanup completed (03:53:58) {
  globalRecords: [32m'0'[39m,
  ipRecords: [32m'0'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'0'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'0'[39m
}

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should elect leader consistently across instances
‚ÑπÔ∏è [Security] New CSP nonce generated (03:53:58) { noncePrefix: [32m'ezx1e8eq'[39m, timestamp: [32m'1757789638122'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:53:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:53:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:53:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:53:58) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ÑπÔ∏è [Security] Request rate limit check passed (03:53:58) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'57'[39m,
  requestId: [32m'req_1757789638199_96eek0abv064'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:53:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:53:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:976:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:444:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1239:7[90m)[39m

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:53:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:53:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:53:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:53:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:53:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:53:58) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ÑπÔ∏è [Security] Request rate limit check passed (03:53:58) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'98'[39m,
  suspicionScore: [32m'59'[39m,
  requestId: [32m'req_1757789638199_77r37cnp6rnq'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:976:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:444:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1239:7[90m)[39m

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:53:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:53:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:53:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:53:58) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should elect leader consistently across instances
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:53:58)
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:53:58)
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:53:58)
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should elect leader consistently across instances
[EventBus] Graceful shutdown completed
[EventBus] Graceful shutdown completed
[EventBus] Graceful shutdown completed
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:53:58)
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:53:58)
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:53:58)

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should elect leader consistently across instances
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:53:58)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:53:58)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:53:58)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:53:58)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:53:58)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:53:58) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:53:58)
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:53:58)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:53:58)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:53:58)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:53:58)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:53:58)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:53:58) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:53:58)
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:53:58)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:53:58)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:53:58)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:53:58)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:53:58)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:53:58) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:53:58)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should handle leader failure and re-election
‚ÑπÔ∏è [Security] New CSP nonce generated (03:55:28) { noncePrefix: [32m'r2yqhiek'[39m, timestamp: [32m'1757789728134'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:55:28)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:55:28) {
  distributed: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  instanceId: [32m'undefined'[39m
}
‚ÑπÔ∏è [Security] New CSP nonce generated (03:55:28) { noncePrefix: [32m'cuztmj2l'[39m, timestamp: [32m'1757789728134'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:55:28)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:55:28) {
  distributed: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  instanceId: [32m'undefined'[39m
}

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should handle leader failure and re-election
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:55:28) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:55:28) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:55:28) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:55:28) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:55:28) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [Security] [SECURITY] RateLimiter initialized (03:55:28) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:55:28) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:55:28) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:55:28) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:53:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:53:58) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ÑπÔ∏è [Security] Request rate limit check passed (03:53:58) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'97'[39m,
  suspicionScore: [32m'61'[39m,
  requestId: [32m'req_1757789638199_s8s41rxdjkq4'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:976:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:444:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1239:7[90m)[39m

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:53:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:53:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:53:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:53:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:53:58) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:53:58)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:53:58) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:53:58) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:53:58) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:53:58)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:53:58)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:53:58)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:53:58)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:53:58)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:53:58) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:53:58)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
[EventBus] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:53:58)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks
‚ÑπÔ∏è [Security] New CSP nonce generated (03:55:28) { noncePrefix: [32m'uywow0r4'[39m, timestamp: [32m'1757789728211'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:55:28)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:55:28) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:55:28) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:55:28) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:55:28) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:55:28) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:55:28) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:55:28) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:55:28) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:55:28) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:55:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:55:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:55:28) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:55:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks
[EventBus] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:55:28)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:55:28)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:55:28)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:55:28)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:55:28)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:55:28) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:55:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:55:28)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:55:28)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (03:55:28) {
  keyVersion: [32m'key_1757789728211_orl7rft5'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (03:55:28) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:55:28) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should communicate with other instances
‚ÑπÔ∏è [Security] New CSP nonce generated (03:55:28) { noncePrefix: [32m'vgn7kv0o'[39m, timestamp: [32m'1757789728217'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:55:28)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:55:28) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:55:28) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:55:28) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should communicate with other instances
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:55:28) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:55:28) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:55:28) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:55:28) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:55:28) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:55:28) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should communicate with other instances
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:55:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should communicate with other instances
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:55:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should communicate with other instances
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:55:28) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:55:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should communicate with other instances
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should communicate with other instances
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:55:28)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:55:28)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:55:28)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:55:28)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:55:28)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:55:28) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:55:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should communicate with other instances
[EventBus] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should communicate with other instances
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:55:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ÑπÔ∏è [Security] New CSP nonce generated (03:55:28) { noncePrefix: [32m'pdyecu95'[39m, timestamp: [32m'1757789728222'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:55:28)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:55:28) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:55:28) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:55:28) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:55:28) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:55:28) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:55:28) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:55:28) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:55:28) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:55:28) { error: {} }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:55:28)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (03:55:28) {
  keyVersion: [32m'key_1757789728217_g9rouvac'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (03:55:28) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:55:28) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:55:28)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (03:55:28) {
  keyVersion: [32m'key_1757789728222_jl7u8aig'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (03:55:28) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:55:28) { isInitialized: [32m'true'[39m }
‚ÑπÔ∏è [Security] Request rate limit check passed (03:55:28) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.initialized'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789728222_n4rdzxc2nmet'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:976:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:444:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at DistributedEventBus.doInitialize [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:299:7[90m)[39m

 √ó src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should elect leader consistently across instances 90012ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should persist events in distributed store 90011ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Distributed Storage > should handle storage conflicts with vector clocks 5ms
   ‚Üí eventBus.handleConflictingEvent is not a function
 ‚úì src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should communicate with other instances 4ms
stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:55:28) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ÑπÔ∏è [Security] Request rate limit check passed (03:55:28) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'63'[39m,
  requestId: [32m'req_1757789728222_2kreveouloyt'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:976:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:444:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1239:7[90m)[39m

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:55:28) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:55:28) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:55:28) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:55:28) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:55:28) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:55:28) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:55:28) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:55:28) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ÑπÔ∏è [Security] Request rate limit check passed (03:55:28) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'98'[39m,
  suspicionScore: [32m'65'[39m,
  requestId: [32m'req_1757789728222_lyw5ypqi703n'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:976:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:444:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1239:7[90m)[39m

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:55:28) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:55:28) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:55:28) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:55:28) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should handle leader failure and re-election
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:55:28)
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:55:28)
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should handle leader failure and re-election
[EventBus] Graceful shutdown completed
[EventBus] Graceful shutdown completed
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:55:28)
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:55:28)

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should handle leader failure and re-election
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:55:28)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:55:28)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:55:28)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:55:28)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:55:28)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:55:28) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:55:28)
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:55:28)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:55:28)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:55:28)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:55:28)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:55:28)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:55:28) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:55:28)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should detect and handle network partitions
‚ÑπÔ∏è [Security] New CSP nonce generated (03:56:58) { noncePrefix: [32m'3vgwdn18'[39m, timestamp: [32m'1757789818145'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:56:58)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:56:58) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:56:58) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:56:58) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [Security] New CSP nonce generated (03:56:58) { noncePrefix: [32m'1y7utwp7'[39m, timestamp: [32m'1757789818145'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:56:58)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:56:58) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:56:58) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:56:58) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should detect and handle network partitions
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:56:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:56:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:56:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:56:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:56:58) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:56:58) { error: {} }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:56:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:56:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:56:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:56:58) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:56:58) { error: {} }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:55:28) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ÑπÔ∏è [Security] Request rate limit check passed (03:55:28) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'97'[39m,
  suspicionScore: [32m'67'[39m,
  requestId: [32m'req_1757789728222_dax85u5xvz3v'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:976:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:444:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1239:7[90m)[39m

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:55:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:55:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:55:28) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:55:28) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:55:28)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:55:28)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:55:28)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:55:28)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:55:28)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:55:28) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:55:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
[EventBus] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:55:28)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully
‚ÑπÔ∏è [Security] New CSP nonce generated (03:56:58) { noncePrefix: [32m'7sqesuqt'[39m, timestamp: [32m'1757789818239'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:56:58)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:56:58) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:56:58) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:56:58) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:56:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:56:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:56:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:56:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:56:58) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:56:58) { error: {} }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:56:58)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:56:58) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:56:58) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:56:58) { instanceId: [32m'undefined'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:56:58)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:56:58)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:56:58)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:56:58)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:56:58)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:56:58) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:56:58)

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully
[EventBus] Graceful shutdown completed

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:56:58)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:56:58)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (03:56:58) {
  keyVersion: [32m'key_1757789818239_awasju56'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (03:56:58) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:56:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ÑπÔ∏è [Security] New CSP nonce generated (03:56:58) { noncePrefix: [32m'210eunjn'[39m, timestamp: [32m'1757789818247'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:56:58)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:56:58) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:56:58) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:56:58) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:56:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:56:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:56:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:56:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:56:58) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:56:58) { error: {} }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:56:58)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (03:56:58) {
  keyVersion: [32m'key_1757789818247_grgswod2'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (03:56:58) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:56:58) { isInitialized: [32m'true'[39m }
‚ÑπÔ∏è [Security] Request rate limit check passed (03:56:58) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.initialized'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789818247_jp9ff6a08txk'[39m
}

 √ó src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Leader Election Integration > should handle leader failure and re-election 90011ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:976:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:444:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at DistributedEventBus.doInitialize [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:299:7[90m)[39m

 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should compress large messages 90016ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Cross-Instance Communication > should handle instance shutdown gracefully 6ms
   ‚Üí eventBus.handleInstanceShutdown is not a function
stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ÑπÔ∏è [Security] Request rate limit check passed (03:56:58) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'69'[39m,
  requestId: [32m'req_1757789818247_cnmd5pt0oar6'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:976:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:444:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1239:7[90m)[39m

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ÑπÔ∏è [Security] Request rate limit check passed (03:56:58) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'98'[39m,
  suspicionScore: [32m'71'[39m,
  requestId: [32m'req_1757789818247_x3in5j5tzyes'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:976:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:444:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1239:7[90m)[39m

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should detect and handle network partitions
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:56:58)
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:56:58)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should detect and handle network partitions
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:56:58) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Shutdown notification sent to other instances (03:56:58) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:56:58) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:56:58) { instanceId: [32m'undefined'[39m }
[DEBUG] undefined: Destroying leader election instance
‚ÑπÔ∏è [EventBus] Leader election destroyed (03:56:58) { instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [EventBus] Cross-instance coordinator destroyed (03:56:58) { instanceId: [32m'undefined'[39m }
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should detect and handle network partitions
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:56:58)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:56:58)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:56:58)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:56:58)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:56:58)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:56:58) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:56:58)
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:56:58)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:56:58)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:56:58)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:56:58)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:56:58)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:56:58) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:56:58)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should detect and handle network partitions
[EventBus] Graceful shutdown completed
[EventBus] Graceful shutdown completed
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:56:58)
‚ÑπÔ∏è [EventBus] Distributed graceful shutdown completed (03:56:58)

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should recover from network partitions
‚ÑπÔ∏è [Security] New CSP nonce generated (03:58:28) { noncePrefix: [32m'kjmqm0op'[39m, timestamp: [32m'1757789908157'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:58:28)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:58:28) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:58:28) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:58:28) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
‚ÑπÔ∏è [Security] New CSP nonce generated (03:58:28) { noncePrefix: [32m'mfs8dw7a'[39m, timestamp: [32m'1757789908157'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:58:28)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:58:28) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:58:28) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:58:28) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }

stderr | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should recover from network partitions
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:58:28) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:58:28) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:58:28) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:58:28) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:58:28) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:58:28) { error: {} }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:58:28) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:58:28) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:58:28) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:58:28) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:58:28) { error: {} }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ÑπÔ∏è [Security] Request rate limit check passed (03:56:58) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  remainingRequests: [32m'97'[39m,
  suspicionScore: [32m'73'[39m,
  requestId: [32m'req_1757789818247_2ba7lj5903fq'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
[DeduplicationManager] Error checking duplicates: TypeError: store.index is not a function
    at DeduplicationStore.findByOperationId [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:104:25[90m)[39m
    at DeduplicationManager.isDuplicate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\DeduplicationManager.ts:291:52[90m)[39m
    at DistributedEventBus.checkDuplication [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:976:12[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:444:37[90m)[39m
    at DistributedEventBus.emit [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\distributed\DistributedEventBus.ts:179:5[90m)[39m
    at Timeout._onTimeout [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1239:7[90m)[39m

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

 √ó src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should detect and handle network partitions 90011ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ÑπÔ∏è [EventBus] Starting distributed graceful shutdown (03:56:58)

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] ATTACK: DDoS pattern detected (03:56:58) {
  ip: [32m'127.0.0.1'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  requestCount: [32m'4'[39m,
  suspicionScore: [32m'75'[39m,
  attackPattern: {
    rapid_fire: [32m'20'[39m,
    pattern_repetition: [32m'0'[39m,
    burst_spikes: [32m'20'[39m,
    geographic_anomaly: [32m'0'[39m
  },
  threshold: [32m'500'[39m
}
‚ùå [Security] [SECURITY] ATTACK: DDoS attack detected and IP blocked (03:56:58) {
  ip: [32m'127.0.0.1'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  suspicionScore: [32m'75'[39m,
  requestId: [32m'req_1757789818247_01q8uja6639r'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Event emission blocked by rate limiter (03:56:58) {
  pattern: [32m'global.eventbus.metrics'[39m,
  reason: [32m'DDoS attack pattern detected'[39m,
  clientIP: [32m'127.0.0.1'[39m,
  suspicionScore: [32m'75'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ÑπÔ∏è [Security] New CSP nonce generated (03:56:58) { noncePrefix: [32m'pycq72b1'[39m, timestamp: [32m'1757789818247'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:56:58)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1
[DEBUG] undefined: Initializing with priority auto
[DEBUG] undefined: Scheduling initial election in 200ms
‚ÑπÔ∏è [EventBus] Leader election initialized (03:56:58) {
  instanceId: [32m'undefined'[39m,
  channelName: [32m'leader-undefined'[39m,
  priority: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] Cross-instance coordinator initialized (03:56:58) {
  instanceId: [32m'undefined'[39m,
  busId: [32m'undefined'[39m,
  channelName: [32m'undefined'[39m
}
‚ÑπÔ∏è [EventBus] DistributedEventBus initialized (03:56:58) { distributed: [32m'false'[39m, busId: [32m'undefined'[39m, instanceId: [32m'undefined'[39m }
[EventStore] Database upgrade needed
[EventStore] Stores created during upgrade
[EventStore] IndexedDB open success event
[EventStore] Database opened successfully

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] RateLimiter initialized (03:56:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:56:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:56:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:56:58) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}
‚ùå [EventBus] Failed to initialize distributed layer (03:56:58) { error: {} }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] EncryptionKeyManager initialized (03:56:58) {
  keyVersion: [32m'key_1757789818247_grgswod2'[39m,
  rotationInterval: [32m'86400000'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] EncryptedEventStore initialized (03:56:58) { enabled: [32m'true'[39m, sensitivePatterns: [32m'6'[39m, compression: [32m'true'[39m }

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:56:58) { isInitialized: [32m'true'[39m }
‚ÑπÔ∏è [Security] Request rate limit check passed (03:56:58) {
  ip: [32m'127.0.0.1'[39m,
  userId: [32m'undefined'[39m,
  eventPattern: [32m'global.eventbus.initialized'[39m,
  remainingRequests: [32m'99'[39m,
  suspicionScore: [32m'37'[39m,
  requestId: [32m'req_1757789818247_5nfnj090sv43'[39m
}

 √ó src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle BroadcastChannel errors gracefully 135028ms
   ‚Üí Test timed out in 90000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   ‚Üí Hook timed out in 45000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with "hookTimeout".
stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should recover from network partitions
‚ÑπÔ∏è [Security] Rate limiter cleanup completed (03:58:28) {
  globalRecords: [32m'0'[39m,
  ipRecords: [32m'0'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'0'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'0'[39m
}

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ÑπÔ∏è [Security] Rate limiter cleanup completed (03:56:58) {
  globalRecords: [32m'0'[39m,
  ipRecords: [32m'0'[39m,
  userRecords: [32m'0'[39m,
  eventRecords: [32m'0'[39m,
  blockedIPs: [32m'0'[39m,
  attackPatterns: [32m'0'[39m
}

stdout | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ÑπÔ∏è [Security] New CSP nonce generated (03:56:58) { noncePrefix: [32m'k83kg5t8'[39m, timestamp: [32m'1757789818247'[39m }

stdout | src/lib/events/distributed/__tests__/integration/distributed-integration.test.ts > Distributed EventBus Integration Tests > Network Partition Handling > should recover from network partitions
‚ÑπÔ∏è [Security] New CSP nonce generated (03:58:28) { noncePrefix: [32m'idnxtdg3'[39m, timestamp: [32m'1757789908157'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Deduplication cleanup failed (03:56:58) { error: [32m'store.index is not a function'[39m }

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Request from blocked IP attempted (03:56:58) {
  ip: [32m'127.0.0.1'[39m,
  eventPattern: [32m'global.eventbus.metrics'[39m,
  requestId: [32m'req_1757789818247_0oy2eexgqsq8'[39m
}

stderr | src/lib/events/distributed/__tests__/DistributedEventBus.test.ts > DistributedEventBus > Error Handling and Resilience > should handle IndexedDB errors gracefully
‚ùå [Security] [SECURITY] THREAT: Event emission blocked by rate limiter (03:56:58) {
  pattern: [32m'global.eventbus.metrics'[39m,
  reason: [32m'IP blocked due to DDoS protection'[39m,
  clientIP: [32m'127.0.0.1'[39m,
  suspicionScore: [32m'100'[39m
}

