
 RUN  v3.2.4 I:/Programacion/Proyectos/g-mini

 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should create valid EventId 2ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should reject invalid EventId format 2ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should create valid SubscriptionId 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should reject invalid SubscriptionId format 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should create valid TraceId 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should reject invalid TraceId format 1ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should create valid SpanId 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should reject invalid SpanId format 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should create valid ModuleId 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should reject invalid ModuleId format 1ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should create valid InstanceId 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should reject invalid InstanceId format 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Type Guards > should correctly identify EventId 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Type Guards > should correctly identify SubscriptionId 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Type Guards > should correctly identify TraceId 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Type Guards > should correctly identify SpanId 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Event Pattern Validation > should validate correct event patterns 1ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Event Pattern Validation > should validate wildcard patterns 0ms
 × src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Event Pattern Validation > should reject invalid event patterns 14ms
   → expected true to be false // Object.is equality
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Template Literal Type Extraction > should extract module names correctly 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Template Literal Type Extraction > should extract entity names correctly 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Template Literal Type Extraction > should extract action names correctly 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Payload Type Safety > should enforce correct payload types for sales events 2ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Payload Type Safety > should enforce correct payload types for inventory events 1ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Payload Type Safety > should allow wildcard payload types 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Types Isolation > should prevent mixing different branded types 2ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Types Isolation > should maintain type safety in function parameters 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Advanced Type Patterns > should support complex event pattern matching 1ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Advanced Type Patterns > should provide type-safe event handlers 0ms
stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should calculate correct percentiles for event publishing
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (05:01:37) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should calculate correct percentiles for event publishing
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (05:01:37)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should calculate percentiles for subscription handling
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (05:01:37) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should calculate percentiles for subscription handling
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (05:01:37)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should handle edge cases in percentile calculations
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (05:01:37) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Storage > should append events successfully 7ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Storage > should append multiple events 1ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Storage > should handle large payloads 1ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Storage > should reject invalid events 2ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Storage > should handle duplicate event IDs 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Retrieval > should retrieve all events 1ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Retrieval > should filter events by pattern 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Retrieval > should filter events by exact pattern 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Retrieval > should filter events by timestamp range 1ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Retrieval > should combine pattern and timestamp filters 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Retrieval > should return empty array for non-matching patterns 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Retrieval > should return empty array for out-of-range timestamps 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Replay > should replay all events in order 17ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Replay > should replay events from specific timestamp 1ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Replay > should replay specific pattern events 1ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Replay > should replay events in timestamp order regardless of insertion order 1ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Status Management > should mark events as processed 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Status Management > should mark events as synced 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Status Management > should handle marking non-existent events 1ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Cleanup > should cleanup old events 1ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Cleanup > should not cleanup recent events 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Cleanup > should return correct count of cleaned events 0ms
 ↓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Storage Limits > should respect maximum event history size
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Storage Limits > should handle storage quota exceeded 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Concurrent Access > should handle concurrent writes 1ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Concurrent Access > should handle concurrent reads 1ms
stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should handle edge cases in percentile calculations
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (05:01:37) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should handle edge cases in percentile calculations
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (05:01:37)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should calculate percentiles with large datasets
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (05:01:37) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should calculate percentiles with large datasets
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (05:01:37)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should identify hot paths based on frequency threshold
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (05:01:37) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should identify hot paths based on frequency threshold
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (05:01:37)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should calculate average latency for hot paths
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (05:01:37) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should calculate average latency for hot paths
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (05:01:37)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should sort hot paths by execution count
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (05:01:37) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should sort hot paths by execution count
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (05:01:37)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should identify hot paths based on threshold configuration
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (05:01:37) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should identify hot paths based on threshold configuration
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (05:01:37) {
  maxDataPoints: [32m'10000'[39m,
  retentionMs: [32m'3600000'[39m,
  hotPathAnalysis: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (05:01:37)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should identify hot paths based on threshold configuration
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (05:01:37)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should track real-time metrics when enabled
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (05:01:37) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should track real-time metrics when enabled
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (05:01:37)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should not track when profiler is disabled
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (05:01:37) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should calculate correct percentiles for event publishing 38ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should calculate percentiles for subscription handling 3ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should handle edge cases in percentile calculations 3ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should calculate percentiles with large datasets 38ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should identify hot paths based on frequency threshold 5ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should calculate average latency for hot paths 4ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should sort hot paths by execution count 3ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should identify hot paths based on threshold configuration 3ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should track real-time metrics when enabled 1ms
stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should not track when profiler is disabled
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler toggled (05:01:37) { enabled: [32m'false'[39m }

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should not track when profiler is disabled
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (05:01:37)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should calculate throughput metrics
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (05:01:37) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should calculate throughput metrics
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (05:01:38)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (05:01:38)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should track error rates
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (05:01:37) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should track error rates
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (05:01:37)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should respect max data points limit
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (05:01:37) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should respect max data points limit
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (05:01:37) { maxDataPoints: [32m'5'[39m, retentionMs: [32m'300000'[39m, hotPathAnalysis: [32m'true'[39m }

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should respect max data points limit
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (05:01:37)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should clean up old data based on retention period
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (05:01:37) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should clean up old data based on retention period
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (05:01:37) { maxDataPoints: [32m'1000'[39m, retentionMs: [32m'1000'[39m, hotPathAnalysis: [32m'true'[39m }

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should clean up old data based on retention period
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (05:02:49)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (05:02:49)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should handle cleanup gracefully during active profiling
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (05:01:37) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should handle cleanup gracefully during active profiling
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (05:01:38)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (05:01:38)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should generate comprehensive performance report
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (05:01:37) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should generate comprehensive performance report
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (05:01:37)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should export performance data for external analysis
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (05:01:37) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should export performance data for external analysis
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (05:01:37)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should clear performance data when requested
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (05:01:37) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should clear performance data when requested
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (05:01:37)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should clear performance data when requested
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (05:01:37)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Configuration Validation > should work with different threshold configurations
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (05:01:37) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Configuration Validation > should work with different threshold configurations
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (05:01:37) {
  maxDataPoints: [32m'10000'[39m,
  retentionMs: [32m'3600000'[39m,
  hotPathAnalysis: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (05:01:37)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Configuration Validation > should work with different threshold configurations
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (05:01:37)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Configuration Validation > should handle profiler enable/disable
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (05:01:37) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Configuration Validation > should handle profiler enable/disable
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler toggled (05:01:37) { enabled: [32m'false'[39m }
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler toggled (05:01:37) { enabled: [32m'true'[39m }

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Configuration Validation > should handle profiler enable/disable
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (05:01:37)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Memory Management > should clean up resources on destroy
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (05:01:37) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Memory Management > should clean up resources on destroy
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (05:01:37)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Memory Management > should clean up resources on destroy
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (05:01:37)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Memory Management > should handle concurrent access safely
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (05:01:37) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Memory Management > should handle concurrent access safely
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (05:01:37)

 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should not track when profiler is disabled 1ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should calculate throughput metrics 2ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should track error rates 1ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should respect max data points limit 4ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should clean up old data based on retention period 3ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should handle cleanup gracefully during active profiling 3ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should generate comprehensive performance report 7ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should export performance data for external analysis 2ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should clear performance data when requested 2ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Configuration Validation > should work with different threshold configurations 2ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Configuration Validation > should handle profiler enable/disable 1ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Memory Management > should clean up resources on destroy 2ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Memory Management > should handle concurrent access safely 2ms
stdout | src/lib/events/__tests__/unit/EventBus.test.ts
ℹ️ [Security] New CSP nonce generated (05:01:37) { noncePrefix: [32m'lj1thcyg'[39m, timestamp: [32m'1757793697788'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:37)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/__tests__/unit/EventBus.test.ts
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:37) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:37) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:37) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:37) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:37) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:37) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts
ℹ️ [Security] New CSP nonce generated (05:01:37) { noncePrefix: [32m'loz4wuqd'[39m, timestamp: [32m'1757793697802'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:37)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:37) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:37) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:37) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:37) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:37) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:37) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/EventBus.test.ts
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:37) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'fd94bad5...'[39m }

stderr | src/lib/events/__tests__/unit/EventBus.test.ts
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:37) { reason: [32m'No valid existing ID found'[39m, newId: [32m'fd94bad5...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts
ℹ️ [Security] New CSP nonce generated (05:01:37) { noncePrefix: [32m'2e9qnf1u'[39m, timestamp: [32m'1757793697802'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:37)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/__tests__/unit/ModuleRegistry.test.ts
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:37) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:37) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:37) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:37) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:37) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:37) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:37) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'8d58b9be...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:37) { reason: [32m'No valid existing ID found'[39m, newId: [32m'8d58b9be...'[39m }

stderr | src/lib/events/__tests__/unit/ModuleRegistry.test.ts
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:37) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'2a7ff2ea...'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit basic event successfully
ℹ️ [Security] New CSP nonce generated (05:01:37) { noncePrefix: [32m'ea5kc5n6'[39m, timestamp: [32m'1757793697806'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:37)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:37)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit basic event successfully
❌ [Security] [SECURITY] RateLimiter initialized (05:01:37) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:37) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:37) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:37) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stderr | src/lib/events/__tests__/unit/ModuleRegistry.test.ts
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:37) { reason: [32m'No valid existing ID found'[39m, newId: [32m'2a7ff2ea...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate content hash for identical payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:37) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'8d1cfa18...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate content hash for identical payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:37) { reason: [32m'No valid existing ID found'[39m, newId: [32m'8d1cfa18...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate content hash for identical payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:37)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit basic event successfully
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:37) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate content hash for identical payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:37) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'a3aa8245...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate content hash for identical payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:37) { reason: [32m'No valid existing ID found'[39m, newId: [32m'a3aa8245...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate content hash for identical payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:37)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit basic event successfully
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit basic event successfully
[EventBus] Processing event test.basic.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit basic event successfully
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully
[ModuleRegistry] Module 'test-inventory' activated directly

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate different content hashes for different payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:37) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'12abb914...'[39m }

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit basic event successfully
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:37)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:37)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:37)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:37)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:37) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:37)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate different content hashes for different payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:37) { reason: [32m'No valid existing ID found'[39m, newId: [32m'12abb914...'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit basic event successfully
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate different content hashes for different payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:37)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate different content hashes for different payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:37) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'360a93be...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate different content hashes for different payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:37) { reason: [32m'No valid existing ID found'[39m, newId: [32m'360a93be...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate different content hashes for different payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:37)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit event with options
ℹ️ [Security] New CSP nonce generated (05:01:37) { noncePrefix: [32m'ec0afkhw'[39m, timestamp: [32m'1757793697816'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:37)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:37)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration
[ModuleRegistry] Activating module 'test-inventory'...

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit event with options
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:37) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:37) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:37) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:37) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:37) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration
[ModuleRegistry] Module 'test-inventory' activated directly

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle payload normalization
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:37) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'd508843d...'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit event with options
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:37) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle payload normalization
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:37) { reason: [32m'No valid existing ID found'[39m, newId: [32m'd508843d...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle payload normalization
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:37)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle payload normalization
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:37) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'07611fff...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle payload normalization
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:37) { reason: [32m'No valid existing ID found'[39m, newId: [32m'07611fff...'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit event with options
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle payload normalization
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:37)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit event with options
[EventBus] Processing event test.options.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate operation ID from event metadata
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:37) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'17cde2fc...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate operation ID from event metadata
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:37) { reason: [32m'No valid existing ID found'[39m, newId: [32m'17cde2fc...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Activating module 'test-inventory'...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate operation ID from event metadata
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:37)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit event with options
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate operation ID from event metadata
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:37) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'de9bd8f8...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate operation ID from event metadata
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:37) { reason: [32m'No valid existing ID found'[39m, newId: [32m'de9bd8f8...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit event with options
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:37)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:37)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:37)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:37)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:37) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:37)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate operation ID from event metadata
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:37)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit event with options
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-customers' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate semantic key for business events
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:37) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'751a5f2f...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate semantic key for business events
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:37) { reason: [32m'No valid existing ID found'[39m, newId: [32m'751a5f2f...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle complex payload objects
ℹ️ [Security] New CSP nonce generated (05:01:37) { noncePrefix: [32m'tq3349x6'[39m, timestamp: [32m'1757793697822'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:37)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:37)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate semantic key for business events
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:37)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle complex payload objects
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:37) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:37) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:37) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:37) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:37) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate semantic key for business events
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:37) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'989566a5...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-sales' activated directly

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate semantic key for business events
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:37) { reason: [32m'No valid existing ID found'[39m, newId: [32m'989566a5...'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle complex payload objects
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:37) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Deactivating dependent module 'test-sales' before deactivating 'test-inventory'

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate semantic key for business events
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:37)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle complex payload objects
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-sales' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle complex payload objects
[EventBus] Processing event test.complex.payload: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle complex payload objects
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle events without specific business context
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:37) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'a16a470e...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle events without specific business context
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:37) { reason: [32m'No valid existing ID found'[39m, newId: [32m'a16a470e...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[TestCustomersModule] Deactivating...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle events without specific business context
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:37)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle complex payload objects
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:37)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:37)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:37)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:37)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:37) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:37)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-customers' deactivated successfully

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle events without specific business context
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:37) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'93d4f73b...'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle complex payload objects
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-sales' is already inactive

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle events without specific business context
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:37) { reason: [32m'No valid existing ID found'[39m, newId: [32m'93d4f73b...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle events without specific business context
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:37)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle null and undefined values in payload
ℹ️ [Security] New CSP nonce generated (05:01:37) { noncePrefix: [32m'xc1tg08d'[39m, timestamp: [32m'1757793697826'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:37)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:37)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[ModuleRegistry] Module 'test-inventory' is already active

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle null and undefined values in payload
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:37) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:37) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:37) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:37) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:37) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[TestInventoryModule] Deactivating...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect content-based duplicates
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:37) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'4ff16b75...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect content-based duplicates
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:37) { reason: [32m'No valid existing ID found'[39m, newId: [32m'4ff16b75...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Activating module 'test-inventory'...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect content-based duplicates
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:37)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle null and undefined values in payload
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:37) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect content-based duplicates
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:37) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'08fa806e...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect content-based duplicates
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:37) { reason: [32m'No valid existing ID found'[39m, newId: [32m'08fa806e...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect content-based duplicates
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:37)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle null and undefined values in payload
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle null and undefined values in payload
[EventBus] Processing event test.null.values: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle null and undefined values in payload
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-customers' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect content-based duplicates
[DeduplicationManager] isDuplicate called for pattern: test.content.duplicate, windowMs: 300000

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle null and undefined values in payload
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect content-based duplicates
[DeduplicationManager] Content TTL Check: timeDiff=1ms, windowMs=300000ms, withinWindow=true

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle null and undefined values in payload
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:37)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:37)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:37)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:37)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:37) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:37)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-sales' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Deactivating dependent module 'test-sales' before deactivating 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-sales' deactivated successfully

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect operation-based duplicates
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:37) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'61f3c6e2...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[TestInventoryModule] Deactivating...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect operation-based duplicates
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:37) { reason: [32m'No valid existing ID found'[39m, newId: [32m'61f3c6e2...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect operation-based duplicates
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:37)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect operation-based duplicates
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:37) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'651034f1...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[TestCustomersModule] Deactivating...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect operation-based duplicates
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:37) { reason: [32m'No valid existing ID found'[39m, newId: [32m'651034f1...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-customers' deactivated successfully

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect operation-based duplicates
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:37)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-sales' is already inactive

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
ℹ️ [Security] New CSP nonce generated (05:01:37) { noncePrefix: [32m'he788ac5'[39m, timestamp: [32m'1757793697831'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:37)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:37)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[ModuleRegistry] Directly activating module 'test-inventory'...

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:37) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:37) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:37) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:37) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:37) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect operation-based duplicates
[DeduplicationManager] isDuplicate called for pattern: test.operation.duplicate, windowMs: 300000

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect operation-based duplicates
[DeduplicationManager] Operation TTL Check: timeDiff=0ms, windowMs=300000ms, withinWindow=true
[DeduplicationManager] Duplicate found by operation_id: unique-client-operation-123_user-123

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:37) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect semantic duplicates within time window
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:37) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'4d69d880...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[TestInventoryModule] Deactivating...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect semantic duplicates within time window
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:37) { reason: [32m'No valid existing ID found'[39m, newId: [32m'4d69d880...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect semantic duplicates within time window
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:37)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
[EventBus] Adding subscription to weak subscription manager for pattern: test.subscription.basic
[EventBus] Subscription added: test.subscription.basic (sub_1757793697833_keraitrxt) [moduleId: anonymous]

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:37) {
  subscriptionId: [32m'sub_1757793697833_keraitrxt'[39m,
  pattern: [32m'test.subscription.basic'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Activating module 'test-inventory'...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect semantic duplicates within time window
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:37) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'39d2fbd2...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect semantic duplicates within time window
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:37) { reason: [32m'No valid existing ID found'[39m, newId: [32m'39d2fbd2...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect semantic duplicates within time window
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:37)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-kitchen-failing'[39m ]
[ModuleRegistry] Module 'test-kitchen-failing' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Activating module 'test-kitchen-failing'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Directly activating module 'test-kitchen-failing'...
[TestKitchenModule] Attempting activation...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
[EventBus] Processing event test.subscription.basic: Found 1 matching subscriptions

stderr | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Failed to activate module 'test-kitchen-failing' directly: Error: Kitchen equipment not responding
    at Object.onActivate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\helpers\test-modules.ts:264:13[90m)[39m
    at ModuleRegistry.activateModuleDirectly [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:518:33[90m)[39m
    at ModuleRegistry.activateModule [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:153:18[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at ModuleRegistry.registerModule [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:119:7[90m)[39m
    at [90mI:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\unit\ModuleRegistry.test.ts:174:9
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stderr | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Failed to activate module 'test-kitchen-failing': Error: Kitchen equipment not responding
    at Object.onActivate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\helpers\test-modules.ts:264:13[90m)[39m
    at ModuleRegistry.activateModuleDirectly [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:518:33[90m)[39m
    at ModuleRegistry.activateModule [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:153:18[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at ModuleRegistry.registerModule [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:119:7[90m)[39m
    at [90mI:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\unit\ModuleRegistry.test.ts:174:9
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-customers' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-sales' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Deactivating dependent module 'test-sales' before deactivating 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect semantic duplicates within time window
[DeduplicationManager] isDuplicate called for pattern: sales.order.created, windowMs: 300000

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-sales' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect semantic duplicates within time window
[DeduplicationManager] Semantic duplicates found: 1, windowMs: 300000

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
[EventBus] Subscription removed: test.subscription.basic (sub_1757793697833_keraitrxt)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-customers' deactivated successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:37)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:37)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:37)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:37)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:37) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:37)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should not detect semantic duplicates outside time window
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:37) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'b334f0dc...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should not detect semantic duplicates outside time window
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:37) { reason: [32m'No valid existing ID found'[39m, newId: [32m'b334f0dc...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should not detect semantic duplicates outside time window
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:37)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully
[ModuleRegistry] Activating module 'test-inventory'...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should not detect semantic duplicates outside time window
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:37) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'b631623d...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should not detect semantic duplicates outside time window
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:37) { reason: [32m'No valid existing ID found'[39m, newId: [32m'b631623d...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should not detect semantic duplicates outside time window
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:37)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
ℹ️ [Security] New CSP nonce generated (05:01:37) { noncePrefix: [32m't7jwudfv'[39m, timestamp: [32m'1757793697850'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:37)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:37)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:37) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:37) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:37) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:37) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:37) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stderr | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully
[ModuleRegistry] Failed to deactivate module 'test-inventory': Error: Deactivation failed
    at [90mI:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\unit\ModuleRegistry.test.ts:252:64
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)
    at runWithTimeout [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:37) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
[EventBus] Adding subscription to weak subscription manager for pattern: test.multiple.subscribers
[EventBus] Subscription added: test.multiple.subscribers (sub_1757793697851_nhljve1vd) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: test.multiple.subscribers
[EventBus] Subscription added: test.multiple.subscribers (sub_1757793697852_ym8q3symf) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: test.multiple.subscribers
[EventBus] Subscription added: test.multiple.subscribers (sub_1757793697852_cusl137tl) [moduleId: anonymous]

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Activating module 'test-inventory'...

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:37) {
  subscriptionId: [32m'sub_1757793697851_nhljve1vd'[39m,
  pattern: [32m'test.multiple.subscribers'[39m,
  moduleId: [32m'anonymous'[39m
}
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:37) {
  subscriptionId: [32m'sub_1757793697852_ym8q3symf'[39m,
  pattern: [32m'test.multiple.subscribers'[39m,
  moduleId: [32m'anonymous'[39m
}
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:37) {
  subscriptionId: [32m'sub_1757793697852_cusl137tl'[39m,
  pattern: [32m'test.multiple.subscribers'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
[EventBus] Processing event test.multiple.subscribers: Found 3 matching subscriptions

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Module 'test-customers' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Module 'test-customers' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Module 'test-customers' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-kitchen-failing'[39m ]
[ModuleRegistry] Module 'test-kitchen-failing' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Activating module 'test-kitchen-failing'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Directly activating module 'test-kitchen-failing'...
[TestKitchenModule] Attempting activation...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Registering 1 subscriptions for module 'test-kitchen-failing'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Module 'test-kitchen-failing' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Module 'test-kitchen-failing' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Module 'test-kitchen-failing' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Deactivating dependent module 'test-kitchen-failing' before deactivating 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Deactivating module 'test-kitchen-failing'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-kitchen-failing'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[TestKitchenModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Module 'test-kitchen-failing' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Module 'test-kitchen-failing' is already inactive

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-customers' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-sales' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Deactivating dependent module 'test-sales' before deactivating 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-sales' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-customers' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-sales' is already inactive

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-customers' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-sales' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Deactivating dependent module 'test-sales' before deactivating 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-sales' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-customers' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-sales' is already inactive

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-customers' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-sales' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Deactivating dependent module 'test-sales' before deactivating 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-sales' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-customers' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-sales' is already inactive

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Module 'test-customers' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Module 'test-customers' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-module-b'[39m ]
[ModuleRegistry] Module 'test-module-b' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Activating module 'test-module-b'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Directly activating module 'test-module-b'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Registering 1 subscriptions for module 'test-module-b'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-module-b' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-module-b' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-module-b'[39m, [32m'test-module-c'[39m ]
[ModuleRegistry] Module 'test-module-c' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Activating module 'test-module-c'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Directly activating module 'test-module-c'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Registering 2 subscriptions for module 'test-module-c'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-module-c' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-module-c' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-module-c' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Deactivating dependent module 'test-module-b' before deactivating 'test-inventory'
[ModuleRegistry] Deactivating dependent module 'test-module-c' before deactivating 'test-module-b'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Deactivating module 'test-module-c'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-module-c'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-module-c' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Deactivating module 'test-module-b'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-module-b'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-module-b' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-module-b' is already inactive

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-module-c' is already inactive

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Activation order calculated: [ [32m'test-a'[39m ]
[ModuleRegistry] Module 'test-a' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Activating module 'test-a'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Directly activating module 'test-a'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Registering 2 subscriptions for module 'test-a'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-a' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-a' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Activation order calculated: [ [32m'test-a'[39m, [32m'test-b'[39m ]
[ModuleRegistry] Module 'test-b' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Activating module 'test-b'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Directly activating module 'test-b'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Registering 1 subscriptions for module 'test-b'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-b' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-b' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Activation order calculated: [ [32m'test-a'[39m, [32m'test-b'[39m, [32m'test-c'[39m ]
[ModuleRegistry] Module 'test-c' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Activating module 'test-c'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Directly activating module 'test-c'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Registering 2 subscriptions for module 'test-c'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-c' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-c' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Activation order calculated: [ [32m'test-a'[39m, [32m'test-b'[39m, [32m'test-c'[39m, [32m'test-d'[39m ]
[ModuleRegistry] Module 'test-d' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Activating module 'test-d'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Directly activating module 'test-d'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Registering 2 subscriptions for module 'test-d'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-d' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-d' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-d' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Deactivating dependent module 'test-c' before deactivating 'test-a'
[ModuleRegistry] Deactivating dependent module 'test-d' before deactivating 'test-c'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Deactivating module 'test-d'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-d'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-d' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Deactivating module 'test-c'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-c'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-c' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Deactivating dependent module 'test-b' before deactivating 'test-a'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Deactivating module 'test-b'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-b'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-b' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Deactivating module 'test-a'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-a'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-a' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-b' is already inactive

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-c' is already inactive

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-d' is already inactive

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-customers' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
[EventBus] Subscription removed: test.multiple.subscribers (sub_1757793697851_nhljve1vd)
[EventBus] Subscription removed: test.multiple.subscribers (sub_1757793697852_ym8q3symf)
[EventBus] Subscription removed: test.multiple.subscribers (sub_1757793697852_cusl137tl)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-sales' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-sales' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-customers' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:37)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:37)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:37)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:37)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:37) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:37)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
ℹ️ [Security] New CSP nonce generated (05:01:37) { noncePrefix: [32m'e6zeiuzb'[39m, timestamp: [32m'1757793697878'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:37)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:37)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:37) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:37) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:37) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:37) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:37) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:37) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
[EventBus] Adding subscription to weak subscription manager for pattern: test.unsubscribe
[EventBus] Subscription added: test.unsubscribe (sub_1757793697880_etw1aglyn) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:37) {
  subscriptionId: [32m'sub_1757793697880_etw1aglyn'[39m,
  pattern: [32m'test.unsubscribe'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
[EventBus] Processing event test.unsubscribe: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
[EventBus] Subscription removed: test.unsubscribe (sub_1757793697880_etw1aglyn)

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit basic event successfully 10ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit event with options 6ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle complex payload objects 4ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle null and undefined values in payload 4ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on() 19ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern 28ms
stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
[EventBus] Processing event test.unsubscribe: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate content hash for identical payloads 6ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate different content hashes for different payloads 4ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle payload normalization 3ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate operation ID from event metadata 2ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate semantic key for business events 2ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle events without specific business context 2ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect content-based duplicates 3ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect operation-based duplicates 3ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect semantic duplicates within time window 15ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully 7ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration 3ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should validate module descriptor 0ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies 3ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should validate dependency existence during registration 0ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies 2ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order 5ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle circular dependencies 1ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook 2ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures 10ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module 1ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module 1ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook 1ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first 2ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation of non-existent module 0ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully 2ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules 1ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules 2ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks 2ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics 1ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health 2ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information 3ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should return null for non-existent module 0ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules 3ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules 2ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain 3ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph 4ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should detect missing dependencies 0ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully 3ms
stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:37)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:37)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:37)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:37)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:37) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:37)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
ℹ️ [Security] New CSP nonce generated (05:01:37) { noncePrefix: [32m'sdjb45dp'[39m, timestamp: [32m'1757793697926'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:37)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:37)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:37) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:37) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:37) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:37) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:37) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:37) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Adding subscription to weak subscription manager for pattern: test.once.subscription
[EventBus] Subscription added: test.once.subscription (sub_1757793697928_h8st5evh1) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:37) {
  subscriptionId: [32m'sub_1757793697928_h8st5evh1'[39m,
  pattern: [32m'test.once.subscription'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Processing event test.once.subscription: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Subscription removed: test.once.subscription (sub_1757793697928_h8st5evh1)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Processing event test.once.subscription: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Processing event test.once.subscription: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Subscription removed: test.once.subscription (sub_1757793697928_h8st5evh1)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:37)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:37)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:37)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:37)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:37) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:37)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
ℹ️ [Security] New CSP nonce generated (05:01:37) { noncePrefix: [32m'bm684e0n'[39m, timestamp: [32m'1757793697973'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:37)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:37)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:37) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:37) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:37) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:37) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:37) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:37) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
[EventBus] Adding subscription to weak subscription manager for pattern: test.subscription.options

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:37) {
  subscriptionId: [32m'sub_1757793697975_brd0edtz8'[39m,
  pattern: [32m'test.subscription.options'[39m,
  moduleId: [32m'test-module'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
[EventBus] Processing event test.subscription.options: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
[EventBus] Subscription removed: test.subscription.options (sub_1757793697975_brd0edtz8)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:37)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:37)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:37)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:37)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:37)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:37) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:37)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
ℹ️ [Security] New CSP nonce generated (05:01:37) { noncePrefix: [32m'i8kqn6ej'[39m, timestamp: [32m'1757793697993'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:37)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:37)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:37) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:37) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:37) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:37) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:37) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:37) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
[EventBus] Adding subscription to weak subscription manager for pattern: test.wildcard.*
[EventBus] Subscription added: test.wildcard.* (sub_1757793697994_9tvwgp93e) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:37) {
  subscriptionId: [32m'sub_1757793697994_9tvwgp93e'[39m,
  pattern: [32m'test.wildcard.*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
[EventBus] Processing event test.wildcard.one: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
[EventBus] Processing event test.wildcard.two: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
[EventBus] Processing event test.different.pattern: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should prioritize stronger deduplication strategies
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'200648ee...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should prioritize stronger deduplication strategies
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'200648ee...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should prioritize stronger deduplication strategies
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should prioritize stronger deduplication strategies
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'ba969026...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should prioritize stronger deduplication strategies
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'ba969026...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should prioritize stronger deduplication strategies
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should prioritize stronger deduplication strategies
[DeduplicationManager] isDuplicate called for pattern: test.priority.dedup, windowMs: 300000

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should prioritize stronger deduplication strategies
[DeduplicationManager] Operation TTL Check: timeDiff=1ms, windowMs=300000ms, withinWindow=true
[DeduplicationManager] Duplicate found by operation_id: priority-op-123

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should store and retrieve metadata
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'6f84b234...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should store and retrieve metadata
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'6f84b234...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should store and retrieve metadata
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should store and retrieve metadata
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'919236d5...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should store and retrieve metadata
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'919236d5...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should store and retrieve metadata
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should store and retrieve metadata
[DeduplicationManager] isDuplicate called for pattern: test.metadata.storage, windowMs: 300000

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should store and retrieve metadata
[DeduplicationManager] Operation TTL Check: timeDiff=0ms, windowMs=300000ms, withinWindow=true
[DeduplicationManager] Duplicate found by operation_id: 1757793698023_292ffead

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'5ee1e6b1...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'5ee1e6b1...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'02efae86...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'02efae86...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
[DeduplicationManager] isDuplicate called for pattern: test.metadata.ttl, windowMs: 50

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
[DeduplicationManager] Operation TTL Check: timeDiff=0ms, windowMs=50ms, withinWindow=true
[DeduplicationManager] Duplicate found by operation_id: 1757793698025_53476016

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off() 48ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions 48ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options 19ms
stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
[EventBus] Subscription removed: test.wildcard.* (sub_1757793697994_9tvwgp93e)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:38)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:38)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:38)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:38) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:38)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
ℹ️ [Security] New CSP nonce generated (05:01:38) { noncePrefix: [32m'36owdiz6'[39m, timestamp: [32m'1757793698042'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:38)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:38)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:38) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:38) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:38) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:38) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:38) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:38) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Adding subscription to weak subscription manager for pattern: test.filtered.events
[EventBus] Subscription added: test.filtered.events (sub_1757793698044_5mt101151) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:38) {
  subscriptionId: [32m'sub_1757793698044_5mt101151'[39m,
  pattern: [32m'test.filtered.events'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Processing event test.filtered.events: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Processing event test.filtered.events: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Processing event test.filtered.events: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Processing event test.filtered.events: Found 1 matching subscriptions

 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should not detect semantic duplicates outside time window 159ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should prioritize stronger deduplication strategies 3ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should store and retrieve metadata 2ms
stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Subscription removed: test.filtered.events (sub_1757793698044_5mt101151)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:38)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:38)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:38)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:38) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:38)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
ℹ️ [Security] New CSP nonce generated (05:01:38) { noncePrefix: [32m'qepanha6'[39m, timestamp: [32m'1757793698110'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:38)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:38)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:38) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:38) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:38) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:38) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:38) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:38) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
[EventBus] Adding subscription to weak subscription manager for pattern: test.wait.specific
[EventBus] Subscription added: test.wait.specific (sub_1757793698112_495q94efw) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:38) {
  subscriptionId: [32m'sub_1757793698112_495q94efw'[39m,
  pattern: [32m'test.wait.specific'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
[DeduplicationManager] isDuplicate called for pattern: test.metadata.ttl, windowMs: 50

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
[DeduplicationManager] Operation TTL Check: timeDiff=110ms, windowMs=50ms, withinWindow=false
[DeduplicationManager] Operation found but outside window: timeDiff=110ms > windowMs=50ms

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
[DeduplicationManager] Content TTL Check: timeDiff=110ms, windowMs=50ms, withinWindow=false
[DeduplicationManager] Content found but outside window: timeDiff=110ms > windowMs=50ms

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle storage cleanup
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'2f6105ec...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle storage cleanup
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'2f6105ec...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle storage cleanup
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle storage cleanup
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'71d926b3...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle storage cleanup
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'71d926b3...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle storage cleanup
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle order creation deduplication
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'abed8220...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle order creation deduplication
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'abed8220...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle order creation deduplication
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle order creation deduplication
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'd0802586...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle order creation deduplication
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'd0802586...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle order creation deduplication
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle order creation deduplication
[DeduplicationManager] isDuplicate called for pattern: sales.order.created, windowMs: 300000

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle order creation deduplication
[DeduplicationManager] Operation TTL Check: timeDiff=0ms, windowMs=300000ms, withinWindow=true
[DeduplicationManager] Duplicate found by operation_id: order-create-op-123

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle payment processing deduplication
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'510a3260...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle payment processing deduplication
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'510a3260...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle payment processing deduplication
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle payment processing deduplication
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'b29f629c...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle payment processing deduplication
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'b29f629c...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle payment processing deduplication
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle payment processing deduplication
[DeduplicationManager] isDuplicate called for pattern: payments.payment.processed, windowMs: 300000

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle payment processing deduplication
[DeduplicationManager] Operation TTL Check: timeDiff=0ms, windowMs=300000ms, withinWindow=true
[DeduplicationManager] Duplicate found by operation_id: payment-process-456

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle stock update deduplication
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'0632e27c...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle stock update deduplication
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'0632e27c...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle stock update deduplication
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle stock update deduplication
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'3e715313...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle stock update deduplication
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'3e715313...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle stock update deduplication
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle stock update deduplication
[DeduplicationManager] isDuplicate called for pattern: inventory.stock.updated, windowMs: 300000

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle stock update deduplication
[DeduplicationManager] Content TTL Check: timeDiff=1ms, windowMs=300000ms, withinWindow=true

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should allow legitimate duplicate events outside time window
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'17e8d8a4...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should allow legitimate duplicate events outside time window
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'17e8d8a4...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should allow legitimate duplicate events outside time window
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should allow legitimate duplicate events outside time window
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'df132f2a...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should allow legitimate duplicate events outside time window
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'df132f2a...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should allow legitimate duplicate events outside time window
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should allow legitimate duplicate events outside time window
[DeduplicationManager] isDuplicate called for pattern: staff.clock.in, windowMs: 300000

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should allow legitimate duplicate events outside time window
[DeduplicationManager] Content TTL Check: timeDiff=28800000ms, windowMs=300000ms, withinWindow=false
[DeduplicationManager] Content found but outside window: timeDiff=28800000ms > windowMs=300000ms

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle null and undefined values in payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'4c713327...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle null and undefined values in payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'4c713327...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle null and undefined values in payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle null and undefined values in payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'9f2fb38a...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle null and undefined values in payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'9f2fb38a...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle null and undefined values in payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle very large payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'73cfd061...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle very large payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'73cfd061...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle very large payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle very large payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'702b3ea1...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle very large payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'702b3ea1...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle very large payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle circular references in payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'e5293628...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle circular references in payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'e5293628...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle circular references in payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle circular references in payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'4fb6131b...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle circular references in payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'4fb6131b...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle circular references in payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle events with missing metadata fields
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'7807a53f...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle events with missing metadata fields
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'7807a53f...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle events with missing metadata fields
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle events with missing metadata fields
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'ec10e0c5...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle events with missing metadata fields
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'ec10e0c5...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle events with missing metadata fields
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should respect deduplication window configuration
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'f681bfd4...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should respect deduplication window configuration
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'f681bfd4...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should respect deduplication window configuration
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should respect deduplication window configuration
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'ffe91af1...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should respect deduplication window configuration
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'ffe91af1...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should respect deduplication window configuration
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should disable deduplication when configured
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'c560d3ce...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should disable deduplication when configured
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'c560d3ce...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should disable deduplication when configured
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should disable deduplication when configured
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:38) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'95a1333e...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should disable deduplication when configured
❌ [Security] [SECURITY] ANOMALY: New client ID generated (05:01:38) { reason: [32m'No valid existing ID found'[39m, newId: [32m'95a1333e...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should disable deduplication when configured
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (05:01:38)

 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL 112ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle storage cleanup 3ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle order creation deduplication 2ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle payment processing deduplication 2ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle stock update deduplication 2ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should allow legitimate duplicate events outside time window 2ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle null and undefined values in payloads 1ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle very large payloads 2ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle circular references in payloads 1ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle events with missing metadata fields 1ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should respect deduplication window configuration 2ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should disable deduplication when configured 2ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns 49ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions 68ms
stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
[EventBus] Processing event test.wait.specific: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
[EventBus] Subscription removed: test.wait.specific (sub_1757793698112_495q94efw)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:38)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:38)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:38)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:38) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:38)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
ℹ️ [Security] New CSP nonce generated (05:01:38) { noncePrefix: [32m'w8ivto3u'[39m, timestamp: [32m'1757793698166'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:38)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:38)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:38) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:38) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:38) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:38) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:38) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:38) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
[EventBus] Adding subscription to weak subscription manager for pattern: test.wait.timeout
[EventBus] Subscription added: test.wait.timeout (sub_1757793698167_qx0iqnhdu) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:38) {
  subscriptionId: [32m'sub_1757793698167_qx0iqnhdu'[39m,
  pattern: [32m'test.wait.timeout'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event 56ms
stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
[EventBus] Subscription removed: test.wait.timeout (sub_1757793698167_qx0iqnhdu)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:38)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:38)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:38)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:38) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:38)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
ℹ️ [Security] New CSP nonce generated (05:01:38) { noncePrefix: [32m'hsmaepp8'[39m, timestamp: [32m'1757793698276'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:38)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:38)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:38) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:38) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:38) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:38) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:38) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:38) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
[EventBus] Adding subscription to weak subscription manager for pattern: test.wait.filtered
[EventBus] Subscription added: test.wait.filtered (sub_1757793698277_j336scys6) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:38) {
  subscriptionId: [32m'sub_1757793698277_j336scys6'[39m,
  pattern: [32m'test.wait.filtered'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
[EventBus] Processing event test.wait.filtered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
[EventBus] Processing event test.wait.filtered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
[EventBus] Subscription removed: test.wait.filtered (sub_1757793698277_j336scys6)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:38)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:38)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:38)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:38) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:38)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
ℹ️ [Security] New CSP nonce generated (05:01:38) { noncePrefix: [32m'laxwv5ob'[39m, timestamp: [32m'1757793698342'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:38)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:38)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:38) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:38) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:38) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:38) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:38) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:38) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
[EventBus] Adding subscription to weak subscription manager for pattern: test.error.handling
[EventBus] Subscription added: test.error.handling (sub_1757793698343_eekbm28e1) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: test.error.handling
[EventBus] Subscription added: test.error.handling (sub_1757793698344_gzpvey9qm) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: global.eventbus.handler-error
[EventBus] Subscription added: global.eventbus.handler-error (sub_1757793698344_29vmos8pn) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:38) {
  subscriptionId: [32m'sub_1757793698343_eekbm28e1'[39m,
  pattern: [32m'test.error.handling'[39m,
  moduleId: [32m'anonymous'[39m
}
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:38) {
  subscriptionId: [32m'sub_1757793698344_gzpvey9qm'[39m,
  pattern: [32m'test.error.handling'[39m,
  moduleId: [32m'anonymous'[39m
}
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:38) {
  subscriptionId: [32m'sub_1757793698344_29vmos8pn'[39m,
  pattern: [32m'global.eventbus.handler-error'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
[EventBus] Processing event test.error.handling: Found 2 matching subscriptions

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
❌ [Security] [SECURITY] THREAT: Handler error in subscription sub_1757793698343_eekbm28e1 (05:01:38) {
  subscriptionId: [32m'sub_1757793698343_eekbm28e1'[39m,
  pattern: [32m'test.error.handling'[39m,
  moduleId: [32m'anonymous'[39m,
  error: [32m'Handler error'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
[EventBus] Processing event global.eventbus.handler-error: Found 1 matching subscriptions

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received 110ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor 66ms
stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
[EventBus] Subscription removed: test.error.handling (sub_1757793698343_eekbm28e1)
[EventBus] Subscription removed: test.error.handling (sub_1757793698344_gzpvey9qm)
[EventBus] Subscription removed: global.eventbus.handler-error (sub_1757793698344_29vmos8pn)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:38)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:38)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:38)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:38) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:38)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should validate event patterns
ℹ️ [Security] New CSP nonce generated (05:01:38) { noncePrefix: [32m'oyh0r11w'[39m, timestamp: [32m'1757793698392'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:38)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:38)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should validate event patterns
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:38) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:38) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:38) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:38) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:38) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should validate event patterns
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:38) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should validate event patterns
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should validate event patterns
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should validate event patterns
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:38)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:38)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:38)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:38) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:38)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads
ℹ️ [Security] New CSP nonce generated (05:01:38) { noncePrefix: [32m'yul6zui3'[39m, timestamp: [32m'1757793698395'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:38)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:38)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:38) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:38) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:38) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:38) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:38) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:38) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads
[EventBus] Processing event test.large.payload: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:38)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:38)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:38)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:38) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:38)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
ℹ️ [Security] New CSP nonce generated (05:01:38) { noncePrefix: [32m'3uutlovb'[39m, timestamp: [32m'1757793698403'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:38)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:38)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:38) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:38) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:38) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:38) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:38) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:38) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:38) {
  subscriptionId: [32m'sub_1757793698406_t2c2gtj8y'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:38) {
  subscriptionId: [32m'sub_1757793698406_tbyrcibzy'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
ℹ️ [EventBus] Module registered (05:01:38) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:38) {
  subscriptionId: [32m'sub_1757793698412_yzf63pdzl'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
ℹ️ [EventBus] Module registered (05:01:38) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:38) {
  subscriptionId: [32m'sub_1757793698414_s7547rdim'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:38) {
  subscriptionId: [32m'sub_1757793698414_2zz60g9q3'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
ℹ️ [EventBus] Module registered (05:01:38) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Error unsubscribing sub_1757793698414_s7547rdim: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1170:11[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793698414_2zz60g9q3: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1170:11[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Error unsubscribing sub_1757793698412_yzf63pdzl: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1170:11[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Error unsubscribing sub_1757793698406_t2c2gtj8y: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1170:11[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793698406_tbyrcibzy: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1170:11[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:38)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:38)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:38)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:38) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:38)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
ℹ️ [Security] New CSP nonce generated (05:01:38) { noncePrefix: [32m'p1ka4uwm'[39m, timestamp: [32m'1757793698434'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:38)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:38)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:38) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:38) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:38) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:38) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:38) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:38) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:38) {
  subscriptionId: [32m'sub_1757793698436_euo1r2c7x'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:38) {
  subscriptionId: [32m'sub_1757793698437_5okjw1fg2'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
ℹ️ [EventBus] Module registered (05:01:38) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:38) {
  subscriptionId: [32m'sub_1757793698438_3a19sovpq'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
ℹ️ [EventBus] Module registered (05:01:38) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:38) {
  subscriptionId: [32m'sub_1757793698439_p5ys3kgpk'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:38) {
  subscriptionId: [32m'sub_1757793698439_nma7g9000'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
ℹ️ [EventBus] Module registered (05:01:38) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Error unsubscribing sub_1757793698439_p5ys3kgpk: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1170:11[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793698439_nma7g9000: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1170:11[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Error unsubscribing sub_1757793698438_3a19sovpq: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1170:11[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Error unsubscribing sub_1757793698436_euo1r2c7x: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1170:11[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793698437_5okjw1fg2: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1170:11[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:38)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:38)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:38)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:38) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:38)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
ℹ️ [Security] New CSP nonce generated (05:01:38) { noncePrefix: [32m'9csqq8gg'[39m, timestamp: [32m'1757793698454'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:38)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:38)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:38) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:38) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:38) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:38) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:38) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:38) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:38) {
  subscriptionId: [32m'sub_1757793698455_u2anogewj'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:38) {
  subscriptionId: [32m'sub_1757793698455_77kcki45q'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
ℹ️ [EventBus] Module registered (05:01:38) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[ModuleRegistry] Error unsubscribing sub_1757793698455_u2anogewj: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1170:11[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793698455_77kcki45q: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1170:11[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[EventBus] Processing event global.eventbus.module-deactivated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:38)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:38)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:38)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:38) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:38)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
ℹ️ [Security] New CSP nonce generated (05:01:38) { noncePrefix: [32m'581cya6u'[39m, timestamp: [32m'1757793698462'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:38)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:38)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:38) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:38) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:38) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:38) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:38) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:38) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
[EventBus] Processing event test.metrics.1: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
[EventBus] Processing event test.metrics.2: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
[EventBus] Processing event test.metrics.3: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:38)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:38)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:38)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:38) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:38)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
ℹ️ [Security] New CSP nonce generated (05:01:38) { noncePrefix: [32m'vhaiei6y'[39m, timestamp: [32m'1757793698475'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:38)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:38)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:38) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:38) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:38) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:38) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:38) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:38) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
[EventBus] Processing event test.pattern.tracking.1: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
[EventBus] Processing event test.pattern.tracking.1: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
[EventBus] Processing event test.pattern.tracking.2: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:38)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:38)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:38)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:38) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:38)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
ℹ️ [Security] New CSP nonce generated (05:01:38) { noncePrefix: [32m'7sul14dk'[39m, timestamp: [32m'1757793698478'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:38)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:38)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:38) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:38) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:38) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:38) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:38) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:38) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
❌ [Security] [SECURITY] RateLimiter initialized (05:01:38) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:38) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:38) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:38) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
ℹ️ [Security] New CSP nonce generated (05:01:38) { noncePrefix: [32m'8gtsgdaj'[39m, timestamp: [32m'1757793698480'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:38)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:38)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:38) { isInitialized: [32m'true'[39m }
[EventBus] Adding subscription to weak subscription manager for pattern: test.config.timeout
[EventBus] Subscription added: test.config.timeout (sub_1757793698480_cofokjw6x) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:38) {
  subscriptionId: [32m'sub_1757793698480_cofokjw6x'[39m,
  pattern: [32m'test.config.timeout'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully 50ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should validate event patterns 2ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads 9ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully 31ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies 19ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly 9ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics 13ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns 3ms
stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
[EventBus] Subscription removed: test.config.timeout (sub_1757793698480_cofokjw6x)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:38)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:38)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:38)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:38) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:38)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:38)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:38)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:38)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:38) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:38)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle sales order events
ℹ️ [Security] New CSP nonce generated (05:01:38) { noncePrefix: [32m'sthu1l9m'[39m, timestamp: [32m'1757793698692'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:38)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:38)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle sales order events
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:38) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:38) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:38) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:38) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:38) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle sales order events
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:38) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle sales order events
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle sales order events
[EventBus] Processing event sales.order.created: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle sales order events
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle sales order events
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle sales order events
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:38)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:38)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:38)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:38) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:38)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle inventory events
ℹ️ [Security] New CSP nonce generated (05:01:38) { noncePrefix: [32m'x2j5r812'[39m, timestamp: [32m'1757793698695'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:38)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:38)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle inventory events
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:38) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:38) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:38) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:38) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:38) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle inventory events
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:38) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle inventory events
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle inventory events
[EventBus] Processing event inventory.stock.low: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle inventory events
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle inventory events
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle inventory events
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:38)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:38)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:38)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:38) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:38)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle staff events
ℹ️ [Security] New CSP nonce generated (05:01:38) { noncePrefix: [32m'ixu7hoaw'[39m, timestamp: [32m'1757793698697'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:38)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:38)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle staff events
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:38) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:38) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:38) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:38) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:38) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle staff events
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:38) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle staff events
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle staff events
[EventBus] Processing event staff.clock.in: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle staff events
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle staff events
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle staff events
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:38)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:38)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:38)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:38) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:38)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
ℹ️ [Security] New CSP nonce generated (05:01:38) { noncePrefix: [32m'2d4zyjub'[39m, timestamp: [32m'1757793698699'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:38)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:38)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:38) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:38) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:38) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:38) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:38) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:38) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
[EventBus] Adding subscription to weak subscription manager for pattern: test.shutdown
[EventBus] Subscription added: test.shutdown (sub_1757793698700_6451nps7x) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:38) {
  subscriptionId: [32m'sub_1757793698700_6451nps7x'[39m,
  pattern: [32m'test.shutdown'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
[EventBus] Processing event test.shutdown: Found 1 matching subscriptions

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings 214ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle sales order events 2ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle inventory events 2ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle staff events 2ms
stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:38)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:38)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:38)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:38) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:38)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:38)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:38)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:38)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:38)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:38) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:38)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
ℹ️ [Security] New CSP nonce generated (05:01:38) { noncePrefix: [32m'bifl3oue'[39m, timestamp: [32m'1757793698811'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (05:01:38)
ℹ️ [Security] Encryption disabled - skipping initialization (05:01:38)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:38) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (05:01:38) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:38) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:38) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:38) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (05:01:38) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
[EventBus] Adding subscription to weak subscription manager for pattern: test.shutdown.timeout
[EventBus] Subscription added: test.shutdown.timeout (sub_1757793698812_hyfeud64u) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:38) {
  subscriptionId: [32m'sub_1757793698812_hyfeud64u'[39m,
  pattern: [32m'test.shutdown.timeout'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
[EventBus] Processing event test.shutdown.timeout: Found 1 matching subscriptions

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully 111ms
stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Graceful shutdown completed

 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long 2006ms
stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
❌ [Security] [SECURITY] ANOMALY: Slow handler execution detected (05:01:40) {
  handlerId: [32m'sub_1757793698812_hyfeud64u'[39m,
  pattern: [32m'test.shutdown.timeout'[39m,
  executionTimeMs: [32m'2000.179'[39m,
  threshold: [32m'1000'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:40)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:40)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:40)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:40)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:40)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:40) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:40)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
❌ [Security] [SECURITY] EncryptedEventStore destroyed (05:01:40)
❌ [Security] [SECURITY] RateLimiter destroyed (05:01:40)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:40)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:40)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:40)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:40) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:40)

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long 2004ms

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 1 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Event Pattern Validation > should reject invalid event patterns
AssertionError: expected true to be false // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- false[39m
[31m+ true[39m

 ❯ src/lib/events/__tests__/unit/Types.test.ts:163:50
    161|       // Invalid format
    162|       expect(isValidEventPattern('sales')).toBe(false);
    163|       expect(isValidEventPattern('sales.order')).toBe(false);
       |                                                  ^
    164|       expect(isValidEventPattern('sales.order.created.extra')).toBe(fa…
    165|       expect(isValidEventPattern('')).toBe(false);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/1]⎯


 Test Files  1 failed | 5 passed (6)
      Tests  1 failed | 157 passed | 1 skipped (159)
   Start at  17:01:34
   Duration  6.60s (transform 936ms, setup 2.19s, collect 2.29s, tests 5.63s, environment 12.17s, prepare 1.64s)

