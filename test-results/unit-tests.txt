
 RUN  v3.2.4 I:/Programacion/Proyectos/g-mini

 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should create valid EventId 2ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should reject invalid EventId format 1ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should create valid SubscriptionId 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should reject invalid SubscriptionId format 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should create valid TraceId 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should reject invalid TraceId format 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should create valid SpanId 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should reject invalid SpanId format 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should create valid ModuleId 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should reject invalid ModuleId format 1ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should create valid InstanceId 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should reject invalid InstanceId format 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Type Guards > should correctly identify EventId 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Type Guards > should correctly identify SubscriptionId 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Type Guards > should correctly identify TraceId 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Type Guards > should correctly identify SpanId 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Event Pattern Validation > should validate correct event patterns 1ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Event Pattern Validation > should validate wildcard patterns 0ms
 × src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Event Pattern Validation > should reject invalid event patterns 11ms
   → expected true to be false // Object.is equality
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Template Literal Type Extraction > should extract module names correctly 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Template Literal Type Extraction > should extract entity names correctly 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Template Literal Type Extraction > should extract action names correctly 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Payload Type Safety > should enforce correct payload types for sales events 1ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Payload Type Safety > should enforce correct payload types for inventory events 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Payload Type Safety > should allow wildcard payload types 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Types Isolation > should prevent mixing different branded types 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Types Isolation > should maintain type safety in function parameters 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Advanced Type Patterns > should support complex event pattern matching 1ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Advanced Type Patterns > should provide type-safe event handlers 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Storage > should append events successfully 4ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Storage > should append multiple events 1ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Storage > should handle large payloads 1ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Storage > should reject invalid events 2ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Storage > should handle duplicate event IDs 1ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Retrieval > should retrieve all events 1ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Retrieval > should filter events by pattern 1ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Retrieval > should filter events by exact pattern 1ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Retrieval > should filter events by timestamp range 1ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Retrieval > should combine pattern and timestamp filters 1ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Retrieval > should return empty array for non-matching patterns 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Retrieval > should return empty array for out-of-range timestamps 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Replay > should replay all events in order 19ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Replay > should replay events from specific timestamp 1ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Replay > should replay specific pattern events 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Replay > should replay events in timestamp order regardless of insertion order 1ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Status Management > should mark events as processed 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Status Management > should mark events as synced 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Status Management > should handle marking non-existent events 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Cleanup > should cleanup old events 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Cleanup > should not cleanup recent events 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Cleanup > should return correct count of cleaned events 0ms
 ↓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Storage Limits > should respect maximum event history size
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Storage Limits > should handle storage quota exceeded 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Concurrent Access > should handle concurrent writes 1ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Concurrent Access > should handle concurrent reads 1ms
stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should calculate correct percentiles for event publishing
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (06:13:57) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should calculate correct percentiles for event publishing
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (06:13:57)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should calculate percentiles for subscription handling
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (06:13:57) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should calculate percentiles for subscription handling
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (06:13:57)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should handle edge cases in percentile calculations
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (06:13:57) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should handle edge cases in percentile calculations
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (06:13:57) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should handle edge cases in percentile calculations
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (06:13:57)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should calculate percentiles with large datasets
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (06:13:57) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should calculate percentiles with large datasets
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (06:13:57)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should identify hot paths based on frequency threshold
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (06:13:57) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should identify hot paths based on frequency threshold
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (06:13:57)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should calculate average latency for hot paths
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (06:13:57) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should calculate average latency for hot paths
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (06:13:57)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should sort hot paths by execution count
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (06:13:57) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should sort hot paths by execution count
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (06:13:57)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should identify hot paths based on threshold configuration
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (06:13:57) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should identify hot paths based on threshold configuration
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (06:13:57) {
  maxDataPoints: [32m'10000'[39m,
  retentionMs: [32m'3600000'[39m,
  hotPathAnalysis: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (06:13:57)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should identify hot paths based on threshold configuration
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (06:13:57)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should track real-time metrics when enabled
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (06:13:57) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should track real-time metrics when enabled
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (06:13:57)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should not track when profiler is disabled
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (06:13:57) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should not track when profiler is disabled
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler toggled (06:13:57) { enabled: [32m'false'[39m }

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should not track when profiler is disabled
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (06:13:57)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should calculate throughput metrics
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (06:13:57) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should calculate throughput metrics
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (06:13:58)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should track error rates
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (06:13:57) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should track error rates
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (06:13:57)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should respect max data points limit
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (06:13:57) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should respect max data points limit
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (06:13:57) { maxDataPoints: [32m'5'[39m, retentionMs: [32m'300000'[39m, hotPathAnalysis: [32m'true'[39m }

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should respect max data points limit
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (06:13:57)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should clean up old data based on retention period
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (06:13:57) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should clean up old data based on retention period
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (06:13:57) { maxDataPoints: [32m'1000'[39m, retentionMs: [32m'1000'[39m, hotPathAnalysis: [32m'true'[39m }

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should clean up old data based on retention period
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (06:15:09)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (06:15:09)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should handle cleanup gracefully during active profiling
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (06:13:57) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should handle cleanup gracefully during active profiling
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (06:13:58)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should generate comprehensive performance report
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (06:13:57) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should generate comprehensive performance report
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (06:13:57)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should export performance data for external analysis
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (06:13:57) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should export performance data for external analysis
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (06:13:57)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should clear performance data when requested
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (06:13:57) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should clear performance data when requested
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (06:13:57)

 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should calculate correct percentiles for event publishing 39ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should calculate percentiles for subscription handling 2ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should handle edge cases in percentile calculations 2ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should calculate percentiles with large datasets 32ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should identify hot paths based on frequency threshold 3ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should calculate average latency for hot paths 2ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should sort hot paths by execution count 2ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should identify hot paths based on threshold configuration 3ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should track real-time metrics when enabled 1ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should not track when profiler is disabled 1ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should calculate throughput metrics 2ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should track error rates 1ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should respect max data points limit 1ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should clean up old data based on retention period 1ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should handle cleanup gracefully during active profiling 2ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should generate comprehensive performance report 1ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should export performance data for external analysis 1ms
stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should clear performance data when requested
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (06:13:57)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Configuration Validation > should work with different threshold configurations
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (06:13:57) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Configuration Validation > should work with different threshold configurations
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (06:13:57) {
  maxDataPoints: [32m'10000'[39m,
  retentionMs: [32m'3600000'[39m,
  hotPathAnalysis: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (06:13:57)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Configuration Validation > should work with different threshold configurations
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (06:13:57)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Configuration Validation > should handle profiler enable/disable
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (06:13:57) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Configuration Validation > should handle profiler enable/disable
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler toggled (06:13:57) { enabled: [32m'false'[39m }
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler toggled (06:13:57) { enabled: [32m'true'[39m }

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Configuration Validation > should handle profiler enable/disable
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (06:13:57)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Memory Management > should clean up resources on destroy
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (06:13:57) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Memory Management > should clean up resources on destroy
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (06:13:57)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Memory Management > should clean up resources on destroy
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (06:13:57)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Memory Management > should handle concurrent access safely
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (06:13:57) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Memory Management > should handle concurrent access safely
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (06:13:57)

 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should clear performance data when requested 2ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Configuration Validation > should work with different threshold configurations 1ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Configuration Validation > should handle profiler enable/disable 4ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Memory Management > should clean up resources on destroy 1ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Memory Management > should handle concurrent access safely 1ms
stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts
ℹ️ [Security] New CSP nonce generated (06:13:57) { noncePrefix: [32m'kxu3wzjt'[39m, timestamp: [32m'1757798037579'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:57)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts
ℹ️ [Security] New CSP nonce generated (06:13:57) { noncePrefix: [32m'7xv1g2e8'[39m, timestamp: [32m'1757798037580'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:57)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/__tests__/unit/ModuleRegistry.test.ts
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:13:57) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:57) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts
ℹ️ [Security] New CSP nonce generated (06:13:57) { noncePrefix: [32m'zcbepfy4'[39m, timestamp: [32m'1757798037580'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:57)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:13:57) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:57) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/EventBus.test.ts
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:13:57) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:57) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/EventBus.test.ts
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'9be37c0c...'[39m }

stderr | src/lib/events/__tests__/unit/EventBus.test.ts
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'9be37c0c...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'4c5f4aac...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'4c5f4aac...'[39m }

stderr | src/lib/events/__tests__/unit/ModuleRegistry.test.ts
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'c785ae12...'[39m }

stderr | src/lib/events/__tests__/unit/ModuleRegistry.test.ts
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'c785ae12...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate content hash for identical payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'0be4e83b...'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit basic event successfully
ℹ️ [Security] New CSP nonce generated (06:13:57) { noncePrefix: [32m'np9ixcms'[39m, timestamp: [32m'1757798037604'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:57)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:57)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit basic event successfully
❌ [Security] [SECURITY] RateLimiter initialized (06:13:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate content hash for identical payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'0be4e83b...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate content hash for identical payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate content hash for identical payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'53a89f73...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate content hash for identical payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'53a89f73...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration
[ModuleRegistry] Module 'test-inventory' activated directly

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate content hash for identical payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit basic event successfully
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:57) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate different content hashes for different payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'11856dce...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate different content hashes for different payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'11856dce...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate different content hashes for different payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate different content hashes for different payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'2e4397e8...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate different content hashes for different payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'2e4397e8...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate different content hashes for different payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit basic event successfully
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit basic event successfully
[EventBus] Processing event test.basic.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit basic event successfully
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle payload normalization
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'a0d57fbe...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle payload normalization
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'a0d57fbe...'[39m }

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit basic event successfully
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:57)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:57)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:57)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:57)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:57) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:57)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Activating module 'test-inventory'...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle payload normalization
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit basic event successfully
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle payload normalization
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'008951cd...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle payload normalization
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'008951cd...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle payload normalization
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-customers' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-sales' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Deactivating dependent module 'test-sales' before deactivating 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[TestSalesModule] Deactivating...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate operation ID from event metadata
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'ca3bba3e...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-sales' deactivated successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit event with options
ℹ️ [Security] New CSP nonce generated (06:13:57) { noncePrefix: [32m'0rumps4h'[39m, timestamp: [32m'1757798037618'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:57)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:57)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate operation ID from event metadata
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'ca3bba3e...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit event with options
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate operation ID from event metadata
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[TestInventoryModule] Deactivating...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate operation ID from event metadata
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'd92f2849...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate operation ID from event metadata
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'd92f2849...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate operation ID from event metadata
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit event with options
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:57) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-customers' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-sales' is already inactive

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate semantic key for business events
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'8fddecc2...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit event with options
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate semantic key for business events
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'8fddecc2...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate semantic key for business events
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit event with options
[EventBus] Processing event test.options.event: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate semantic key for business events
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'70dfd867...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[ModuleRegistry] Module 'test-inventory' is already active

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate semantic key for business events
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'70dfd867...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate semantic key for business events
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle events without specific business context
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'2f8966f1...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Activating module 'test-customers'...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle events without specific business context
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'2f8966f1...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle events without specific business context
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle events without specific business context
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'7c953a5b...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit event with options
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle events without specific business context
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'7c953a5b...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-customers' activated directly

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle events without specific business context
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit event with options
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit event with options
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:57)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:57)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:57)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:57)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:57) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:57)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-sales' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Deactivating dependent module 'test-sales' before deactivating 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect content-based duplicates
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'96a9595f...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[TestSalesModule] Deactivating...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect content-based duplicates
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'96a9595f...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-sales' deactivated successfully

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect content-based duplicates
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect content-based duplicates
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'68cd0137...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[TestInventoryModule] Deactivating...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect content-based duplicates
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'68cd0137...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect content-based duplicates
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle complex payload objects
ℹ️ [Security] New CSP nonce generated (06:13:57) { noncePrefix: [32m'qfn8z2au'[39m, timestamp: [32m'1757798037625'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:57)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:57)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle complex payload objects
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-customers' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-sales' is already inactive

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect content-based duplicates
[DeduplicationManager] isDuplicate called for pattern: test.content.duplicate, windowMs: 300000

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect content-based duplicates
[DeduplicationManager] Content TTL Check: timeDiff=1ms, windowMs=300000ms, withinWindow=true

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle complex payload objects
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:57) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[ModuleRegistry] Directly activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect operation-based duplicates
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'8759abf8...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle complex payload objects
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect operation-based duplicates
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'8759abf8...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle complex payload objects
[EventBus] Processing event test.complex.payload: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect operation-based duplicates
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle complex payload objects
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect operation-based duplicates
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'dfa8b202...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect operation-based duplicates
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'dfa8b202...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[TestInventoryModule] Deactivating...

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle complex payload objects
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:57)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:57)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:57)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:57)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:57) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:57)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect operation-based duplicates
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle complex payload objects
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect operation-based duplicates
[DeduplicationManager] isDuplicate called for pattern: test.operation.duplicate, windowMs: 300000

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect operation-based duplicates
[DeduplicationManager] Operation TTL Check: timeDiff=1ms, windowMs=300000ms, withinWindow=true
[DeduplicationManager] Duplicate found by operation_id: unique-client-operation-123_user-123

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect semantic duplicates within time window
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'b5cb4cb4...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect semantic duplicates within time window
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'b5cb4cb4...'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle null and undefined values in payload
ℹ️ [Security] New CSP nonce generated (06:13:57) { noncePrefix: [32m's4ktss2l'[39m, timestamp: [32m'1757798037631'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:57)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:57)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect semantic duplicates within time window
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle null and undefined values in payload
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Module 'test-inventory' activated directly

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect semantic duplicates within time window
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'7c230ec4...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-kitchen-failing'[39m ]
[ModuleRegistry] Module 'test-kitchen-failing' registered successfully

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect semantic duplicates within time window
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'7c230ec4...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Activating module 'test-kitchen-failing'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle null and undefined values in payload
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:57) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect semantic duplicates within time window
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Directly activating module 'test-kitchen-failing'...
[TestKitchenModule] Attempting activation...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Registering 1 subscriptions for module 'test-kitchen-failing'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Module 'test-kitchen-failing' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Module 'test-kitchen-failing' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Module 'test-kitchen-failing' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Deactivating dependent module 'test-kitchen-failing' before deactivating 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Deactivating module 'test-kitchen-failing'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-kitchen-failing'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[TestKitchenModule] Deactivating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle null and undefined values in payload
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Module 'test-kitchen-failing' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle null and undefined values in payload
[EventBus] Processing event test.null.values: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Module 'test-kitchen-failing' is already inactive

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle null and undefined values in payload
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Module 'test-inventory' is already active

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle null and undefined values in payload
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:57)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:57)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:57)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:57)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:57) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:57)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle null and undefined values in payload
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
ℹ️ [Security] New CSP nonce generated (06:13:57) { noncePrefix: [32m'vb5t6l79'[39m, timestamp: [32m'1757798037636'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:57)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:57)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Activating module 'test-inventory'...

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:57) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-customers' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
[EventBus] Adding subscription to weak subscription manager for pattern: test.subscription.basic
[EventBus] Subscription added: test.subscription.basic (sub_1757798037638_zq89j1seo) [moduleId: anonymous]

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-sales' activated directly

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:57) {
  subscriptionId: [32m'sub_1757798037638_zq89j1seo'[39m,
  pattern: [32m'test.subscription.basic'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Deactivating dependent module 'test-sales' before deactivating 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-sales' deactivated successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-customers' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
[EventBus] Processing event test.subscription.basic: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect semantic duplicates within time window
[DeduplicationManager] isDuplicate called for pattern: sales.order.created, windowMs: 300000

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect semantic duplicates within time window
[DeduplicationManager] Semantic duplicates found: 1, windowMs: 300000

stderr | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully
[ModuleRegistry] Failed to deactivate module 'test-inventory': Error: Deactivation failed
    at [90mI:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\unit\ModuleRegistry.test.ts:252:64
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)
    at runWithTimeout [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should not detect semantic duplicates outside time window
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'769ea215...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[ModuleRegistry] Activating module 'test-inventory'...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should not detect semantic duplicates outside time window
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'769ea215...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should not detect semantic duplicates outside time window
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should not detect semantic duplicates outside time window
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'f014dfdf...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should not detect semantic duplicates outside time window
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'f014dfdf...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[ModuleRegistry] Module 'test-inventory' activated directly

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should not detect semantic duplicates outside time window
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Module 'test-customers' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Module 'test-customers' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Module 'test-customers' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-kitchen-failing'[39m ]
[ModuleRegistry] Module 'test-kitchen-failing' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Activating module 'test-kitchen-failing'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Directly activating module 'test-kitchen-failing'...
[TestKitchenModule] Attempting activation...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Registering 1 subscriptions for module 'test-kitchen-failing'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Module 'test-kitchen-failing' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Module 'test-kitchen-failing' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Module 'test-kitchen-failing' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Module 'test-kitchen-failing' health changed: active -> error

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Deactivating dependent module 'test-kitchen-failing' before deactivating 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Deactivating module 'test-kitchen-failing'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-kitchen-failing'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[TestKitchenModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Module 'test-kitchen-failing' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Module 'test-kitchen-failing' is already inactive

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-customers' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-sales' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Deactivating dependent module 'test-sales' before deactivating 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-sales' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-customers' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-sales' is already inactive

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-customers' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-sales' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Deactivating dependent module 'test-sales' before deactivating 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-sales' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-customers' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-sales' is already inactive

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-customers' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-sales' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Deactivating dependent module 'test-sales' before deactivating 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-sales' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-customers' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-sales' is already inactive

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Module 'test-customers' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Module 'test-customers' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-module-b'[39m ]
[ModuleRegistry] Module 'test-module-b' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Activating module 'test-module-b'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Directly activating module 'test-module-b'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Registering 1 subscriptions for module 'test-module-b'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-module-b' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-module-b' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-module-b'[39m, [32m'test-module-c'[39m ]
[ModuleRegistry] Module 'test-module-c' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Activating module 'test-module-c'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Directly activating module 'test-module-c'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Registering 2 subscriptions for module 'test-module-c'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-module-c' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-module-c' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-module-c' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Deactivating dependent module 'test-module-b' before deactivating 'test-inventory'
[ModuleRegistry] Deactivating dependent module 'test-module-c' before deactivating 'test-module-b'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
[EventBus] Subscription removed: test.subscription.basic (sub_1757798037638_zq89j1seo)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Deactivating module 'test-module-c'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-module-c'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-module-c' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Deactivating module 'test-module-b'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-module-b'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[TestCustomersModule] Deactivating...

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:57)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:57)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:57)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:57)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:57) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:57)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-module-b' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-module-b' is already inactive

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-module-c' is already inactive

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
ℹ️ [Security] New CSP nonce generated (06:13:57) { noncePrefix: [32m'ezug4zw0'[39m, timestamp: [32m'1757798037664'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:57)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:57)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Activation order calculated: [ [32m'test-a'[39m ]
[ModuleRegistry] Module 'test-a' registered successfully

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Activating module 'test-a'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Directly activating module 'test-a'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:57) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Registering 2 subscriptions for module 'test-a'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-a' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-a' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Activation order calculated: [ [32m'test-a'[39m, [32m'test-b'[39m ]
[ModuleRegistry] Module 'test-b' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Activating module 'test-b'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Directly activating module 'test-b'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Registering 1 subscriptions for module 'test-b'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
[EventBus] Adding subscription to weak subscription manager for pattern: test.multiple.subscribers
[EventBus] Subscription added: test.multiple.subscribers (sub_1757798037666_ufnie9ykk) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: test.multiple.subscribers
[EventBus] Subscription added: test.multiple.subscribers (sub_1757798037666_aldkj26mg) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: test.multiple.subscribers
[EventBus] Subscription added: test.multiple.subscribers (sub_1757798037666_wmq6jmj99) [moduleId: anonymous]

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-b' health changed: inactive -> active

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:57) {
  subscriptionId: [32m'sub_1757798037666_ufnie9ykk'[39m,
  pattern: [32m'test.multiple.subscribers'[39m,
  moduleId: [32m'anonymous'[39m
}
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:57) {
  subscriptionId: [32m'sub_1757798037666_aldkj26mg'[39m,
  pattern: [32m'test.multiple.subscribers'[39m,
  moduleId: [32m'anonymous'[39m
}
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:57) {
  subscriptionId: [32m'sub_1757798037666_wmq6jmj99'[39m,
  pattern: [32m'test.multiple.subscribers'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-b' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Activation order calculated: [ [32m'test-a'[39m, [32m'test-b'[39m, [32m'test-c'[39m ]
[ModuleRegistry] Module 'test-c' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Activating module 'test-c'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Directly activating module 'test-c'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Registering 2 subscriptions for module 'test-c'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
[EventBus] Processing event test.multiple.subscribers: Found 3 matching subscriptions

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-c' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-c' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Activation order calculated: [ [32m'test-a'[39m, [32m'test-b'[39m, [32m'test-c'[39m, [32m'test-d'[39m ]
[ModuleRegistry] Module 'test-d' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Activating module 'test-d'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Directly activating module 'test-d'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Registering 2 subscriptions for module 'test-d'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-d' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-d' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-d' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Deactivating dependent module 'test-c' before deactivating 'test-a'
[ModuleRegistry] Deactivating dependent module 'test-d' before deactivating 'test-c'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Deactivating module 'test-d'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-d'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-d' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Deactivating module 'test-c'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-c'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-c' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Deactivating dependent module 'test-b' before deactivating 'test-a'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Deactivating module 'test-b'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-b'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-b' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Deactivating module 'test-a'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-a'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-a' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-b' is already inactive

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-c' is already inactive

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-d' is already inactive

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-customers' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-sales' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-sales' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-customers' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
[EventBus] Subscription removed: test.multiple.subscribers (sub_1757798037666_ufnie9ykk)
[EventBus] Subscription removed: test.multiple.subscribers (sub_1757798037666_aldkj26mg)
[EventBus] Subscription removed: test.multiple.subscribers (sub_1757798037666_wmq6jmj99)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:57)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:57)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:57)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:57)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:57) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:57)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
ℹ️ [Security] New CSP nonce generated (06:13:57) { noncePrefix: [32m'e5sntq20'[39m, timestamp: [32m'1757798037700'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:57)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:57)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:57) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
[EventBus] Adding subscription to weak subscription manager for pattern: test.unsubscribe
[EventBus] Subscription added: test.unsubscribe (sub_1757798037701_3p1r2vo8c) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:57) {
  subscriptionId: [32m'sub_1757798037701_3p1r2vo8c'[39m,
  pattern: [32m'test.unsubscribe'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
[EventBus] Processing event test.unsubscribe: Found 1 matching subscriptions

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit basic event successfully 14ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit event with options 8ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle complex payload objects 5ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle null and undefined values in payload 5ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on() 28ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern 36ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate content hash for identical payloads 7ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate different content hashes for different payloads 5ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle payload normalization 3ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate operation ID from event metadata 3ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate semantic key for business events 2ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle events without specific business context 2ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect content-based duplicates 3ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect operation-based duplicates 3ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect semantic duplicates within time window 14ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully 9ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration 8ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should validate module descriptor 1ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies 4ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should validate dependency existence during registration 0ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies 2ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order 4ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle circular dependencies 1ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook 2ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures 2ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module 2ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module 1ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook 1ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first 3ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation of non-existent module 0ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully 6ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules 1ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules 2ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks 2ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics 1ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health 2ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information 3ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should return null for non-existent module 0ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules 3ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules 2ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain 4ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph 6ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should detect missing dependencies 0ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully 3ms
stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
[EventBus] Subscription removed: test.unsubscribe (sub_1757798037701_3p1r2vo8c)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
[EventBus] Processing event test.unsubscribe: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:57)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:57)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:57)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:57)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:57) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:57)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
ℹ️ [Security] New CSP nonce generated (06:13:57) { noncePrefix: [32m'q0omnse2'[39m, timestamp: [32m'1757798037747'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:57)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:57)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:57) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Adding subscription to weak subscription manager for pattern: test.once.subscription
[EventBus] Subscription added: test.once.subscription (sub_1757798037748_sb39j5yuq) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:57) {
  subscriptionId: [32m'sub_1757798037748_sb39j5yuq'[39m,
  pattern: [32m'test.once.subscription'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Processing event test.once.subscription: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Subscription removed: test.once.subscription (sub_1757798037748_sb39j5yuq)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Processing event test.once.subscription: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Processing event test.once.subscription: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Subscription removed: test.once.subscription (sub_1757798037748_sb39j5yuq)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:57)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:57)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:57)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:57)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:57) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:57)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
ℹ️ [Security] New CSP nonce generated (06:13:57) { noncePrefix: [32m'mhxswhqz'[39m, timestamp: [32m'1757798037789'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:57)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:57)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:57) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
[EventBus] Adding subscription to weak subscription manager for pattern: test.subscription.options

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:57) {
  subscriptionId: [32m'sub_1757798037790_5hi7rbt49'[39m,
  pattern: [32m'test.subscription.options'[39m,
  moduleId: [32m'test-module'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
[EventBus] Processing event test.subscription.options: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
[EventBus] Subscription removed: test.subscription.options (sub_1757798037790_5hi7rbt49)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:57)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:57)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:57)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:57)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:57) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:57)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should prioritize stronger deduplication strategies
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'5f0e9434...'[39m }

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off() 47ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions 43ms
stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should prioritize stronger deduplication strategies
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'5f0e9434...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should prioritize stronger deduplication strategies
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should prioritize stronger deduplication strategies
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'1f192ccc...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should prioritize stronger deduplication strategies
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'1f192ccc...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should prioritize stronger deduplication strategies
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
ℹ️ [Security] New CSP nonce generated (06:13:57) { noncePrefix: [32m'm6ugeqi1'[39m, timestamp: [32m'1757798037805'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:57)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:57)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should prioritize stronger deduplication strategies
[DeduplicationManager] isDuplicate called for pattern: test.priority.dedup, windowMs: 300000

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should prioritize stronger deduplication strategies
[DeduplicationManager] Operation TTL Check: timeDiff=0ms, windowMs=300000ms, withinWindow=true
[DeduplicationManager] Duplicate found by operation_id: priority-op-123

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:57) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should store and retrieve metadata
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'c953dd3f...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should store and retrieve metadata
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'c953dd3f...'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
[EventBus] Adding subscription to weak subscription manager for pattern: test.wildcard.*
[EventBus] Subscription added: test.wildcard.* (sub_1757798037806_c2dqxe8vn) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should store and retrieve metadata
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:57) {
  subscriptionId: [32m'sub_1757798037806_c2dqxe8vn'[39m,
  pattern: [32m'test.wildcard.*'[39m,
  moduleId: [32m'anonymous'[39m
}

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should store and retrieve metadata
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'c53680db...'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should store and retrieve metadata
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'c53680db...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should store and retrieve metadata
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
[EventBus] Processing event test.wildcard.one: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should store and retrieve metadata
[DeduplicationManager] isDuplicate called for pattern: test.metadata.storage, windowMs: 300000

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should store and retrieve metadata
[DeduplicationManager] Operation TTL Check: timeDiff=0ms, windowMs=300000ms, withinWindow=true
[DeduplicationManager] Duplicate found by operation_id: 1757798037807_f11fbe3e

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
[EventBus] Processing event test.wildcard.two: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
[EventBus] Processing event test.different.pattern: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'5bedd3bf...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'5bedd3bf...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'968cf2d4...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'968cf2d4...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
[DeduplicationManager] isDuplicate called for pattern: test.metadata.ttl, windowMs: 50

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
[DeduplicationManager] Operation TTL Check: timeDiff=0ms, windowMs=50ms, withinWindow=true
[DeduplicationManager] Duplicate found by operation_id: 1757798037809_3ac5e8a0

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
[EventBus] Subscription removed: test.wildcard.* (sub_1757798037806_c2dqxe8vn)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:57)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:57)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:57)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:57)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:57) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:57)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
ℹ️ [Security] New CSP nonce generated (06:13:57) { noncePrefix: [32m'0is0tohc'[39m, timestamp: [32m'1757798037845'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:57)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:57)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:57) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Adding subscription to weak subscription manager for pattern: test.filtered.events
[EventBus] Subscription added: test.filtered.events (sub_1757798037847_gxzju506n) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:57) {
  subscriptionId: [32m'sub_1757798037847_gxzju506n'[39m,
  pattern: [32m'test.filtered.events'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Processing event test.filtered.events: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Processing event test.filtered.events: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Processing event test.filtered.events: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Processing event test.filtered.events: Found 1 matching subscriptions

 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should not detect semantic duplicates outside time window 159ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should prioritize stronger deduplication strategies 2ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should store and retrieve metadata 2ms
stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Subscription removed: test.filtered.events (sub_1757798037847_gxzju506n)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:57)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:57)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:57)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:57)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:57) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:57)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
ℹ️ [Security] New CSP nonce generated (06:13:57) { noncePrefix: [32m'0yr6o7ty'[39m, timestamp: [32m'1757798037905'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:57)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:57)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:57) { isInitialized: [32m'true'[39m }

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options 15ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns 41ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions 59ms
stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
[EventBus] Adding subscription to weak subscription manager for pattern: test.wait.specific
[EventBus] Subscription added: test.wait.specific (sub_1757798037906_gmwzk69jm) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:57) {
  subscriptionId: [32m'sub_1757798037906_gmwzk69jm'[39m,
  pattern: [32m'test.wait.specific'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
[DeduplicationManager] isDuplicate called for pattern: test.metadata.ttl, windowMs: 50

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
[DeduplicationManager] Operation TTL Check: timeDiff=101ms, windowMs=50ms, withinWindow=false
[DeduplicationManager] Operation found but outside window: timeDiff=101ms > windowMs=50ms

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
[DeduplicationManager] Content TTL Check: timeDiff=101ms, windowMs=50ms, withinWindow=false
[DeduplicationManager] Content found but outside window: timeDiff=101ms > windowMs=50ms

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle storage cleanup
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'4094e149...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle storage cleanup
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'4094e149...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle storage cleanup
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle storage cleanup
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'8f7cff64...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle storage cleanup
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'8f7cff64...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle storage cleanup
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle order creation deduplication
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'7bed3ecc...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle order creation deduplication
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'7bed3ecc...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle order creation deduplication
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle order creation deduplication
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'4282b526...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle order creation deduplication
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'4282b526...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle order creation deduplication
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle order creation deduplication
[DeduplicationManager] isDuplicate called for pattern: sales.order.created, windowMs: 300000

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle order creation deduplication
[DeduplicationManager] Operation TTL Check: timeDiff=0ms, windowMs=300000ms, withinWindow=true
[DeduplicationManager] Duplicate found by operation_id: order-create-op-123

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle payment processing deduplication
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'f5459034...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle payment processing deduplication
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'f5459034...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle payment processing deduplication
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle payment processing deduplication
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'0ffc113c...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle payment processing deduplication
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'0ffc113c...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle payment processing deduplication
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle payment processing deduplication
[DeduplicationManager] isDuplicate called for pattern: payments.payment.processed, windowMs: 300000

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle payment processing deduplication
[DeduplicationManager] Operation TTL Check: timeDiff=1ms, windowMs=300000ms, withinWindow=true
[DeduplicationManager] Duplicate found by operation_id: payment-process-456

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle stock update deduplication
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'6e64e468...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle stock update deduplication
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'6e64e468...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle stock update deduplication
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle stock update deduplication
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'f3def6c3...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle stock update deduplication
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'f3def6c3...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle stock update deduplication
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle stock update deduplication
[DeduplicationManager] isDuplicate called for pattern: inventory.stock.updated, windowMs: 300000

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle stock update deduplication
[DeduplicationManager] Content TTL Check: timeDiff=0ms, windowMs=300000ms, withinWindow=true

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should allow legitimate duplicate events outside time window
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'd75e1fda...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should allow legitimate duplicate events outside time window
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'd75e1fda...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should allow legitimate duplicate events outside time window
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should allow legitimate duplicate events outside time window
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'93b55c59...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should allow legitimate duplicate events outside time window
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'93b55c59...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should allow legitimate duplicate events outside time window
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should allow legitimate duplicate events outside time window
[DeduplicationManager] isDuplicate called for pattern: staff.clock.in, windowMs: 300000

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should allow legitimate duplicate events outside time window
[DeduplicationManager] Content TTL Check: timeDiff=28800000ms, windowMs=300000ms, withinWindow=false
[DeduplicationManager] Content found but outside window: timeDiff=28800000ms > windowMs=300000ms

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle null and undefined values in payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'7b5b0fab...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle null and undefined values in payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'7b5b0fab...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle null and undefined values in payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle null and undefined values in payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'a2720fc8...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle null and undefined values in payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'a2720fc8...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle null and undefined values in payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle very large payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'121f63d6...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle very large payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'121f63d6...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle very large payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle very large payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'a6fcb284...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle very large payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'a6fcb284...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle very large payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle circular references in payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'2d897491...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle circular references in payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'2d897491...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle circular references in payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle circular references in payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'ee438e94...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle circular references in payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'ee438e94...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle circular references in payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle events with missing metadata fields
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'57728967...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle events with missing metadata fields
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'57728967...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle events with missing metadata fields
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle events with missing metadata fields
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'6265fd53...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle events with missing metadata fields
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'6265fd53...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle events with missing metadata fields
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should respect deduplication window configuration
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'29d48b8f...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should respect deduplication window configuration
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'29d48b8f...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should respect deduplication window configuration
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should respect deduplication window configuration
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'1eb70964...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should respect deduplication window configuration
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'1eb70964...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should respect deduplication window configuration
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should disable deduplication when configured
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'bb6036d5...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should disable deduplication when configured
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'bb6036d5...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should disable deduplication when configured
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should disable deduplication when configured
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (06:13:57) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'1201a757...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should disable deduplication when configured
❌ [Security] [SECURITY] ANOMALY: New client ID generated (06:13:57) { reason: [32m'No valid existing ID found'[39m, newId: [32m'1201a757...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should disable deduplication when configured
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (06:13:57)

 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL 103ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle storage cleanup 2ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle order creation deduplication 2ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle payment processing deduplication 2ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle stock update deduplication 2ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should allow legitimate duplicate events outside time window 2ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle null and undefined values in payloads 1ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle very large payloads 2ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle circular references in payloads 1ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle events with missing metadata fields 1ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should respect deduplication window configuration 1ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should disable deduplication when configured 1ms
stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
[EventBus] Processing event test.wait.specific: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
[EventBus] Subscription removed: test.wait.specific (sub_1757798037906_gmwzk69jm)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:57)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:57)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:57)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:57)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:57)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:57) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:57)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
ℹ️ [Security] New CSP nonce generated (06:13:57) { noncePrefix: [32m'80ld37wk'[39m, timestamp: [32m'1757798037963'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:57)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:57)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:57) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
[EventBus] Adding subscription to weak subscription manager for pattern: test.wait.timeout
[EventBus] Subscription added: test.wait.timeout (sub_1757798037964_v4dh0tp1p) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:57) {
  subscriptionId: [32m'sub_1757798037964_v4dh0tp1p'[39m,
  pattern: [32m'test.wait.timeout'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event 58ms
stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
[EventBus] Subscription removed: test.wait.timeout (sub_1757798037964_v4dh0tp1p)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'qym56alo'[39m, timestamp: [32m'1757798038074'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
[EventBus] Adding subscription to weak subscription manager for pattern: test.wait.filtered
[EventBus] Subscription added: test.wait.filtered (sub_1757798038075_ibo2ohoa8) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:58) {
  subscriptionId: [32m'sub_1757798038075_ibo2ohoa8'[39m,
  pattern: [32m'test.wait.filtered'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
[EventBus] Processing event test.wait.filtered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
[EventBus] Processing event test.wait.filtered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
[EventBus] Subscription removed: test.wait.filtered (sub_1757798038075_ibo2ohoa8)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'6yf55mz8'[39m, timestamp: [32m'1757798038132'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
[EventBus] Adding subscription to weak subscription manager for pattern: test.error.handling
[EventBus] Subscription added: test.error.handling (sub_1757798038133_5e8otmf47) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: test.error.handling
[EventBus] Subscription added: test.error.handling (sub_1757798038133_g8i56qsy4) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: global.eventbus.handler-error
[EventBus] Subscription added: global.eventbus.handler-error (sub_1757798038133_ga6hwmn8w) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:58) {
  subscriptionId: [32m'sub_1757798038133_5e8otmf47'[39m,
  pattern: [32m'test.error.handling'[39m,
  moduleId: [32m'anonymous'[39m
}
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:58) {
  subscriptionId: [32m'sub_1757798038133_g8i56qsy4'[39m,
  pattern: [32m'test.error.handling'[39m,
  moduleId: [32m'anonymous'[39m
}
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:58) {
  subscriptionId: [32m'sub_1757798038133_ga6hwmn8w'[39m,
  pattern: [32m'global.eventbus.handler-error'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
[EventBus] Processing event test.error.handling: Found 2 matching subscriptions

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
❌ [Security] [SECURITY] THREAT: Handler error in subscription sub_1757798038133_5e8otmf47 (06:13:58) {
  subscriptionId: [32m'sub_1757798038133_5e8otmf47'[39m,
  pattern: [32m'test.error.handling'[39m,
  moduleId: [32m'anonymous'[39m,
  error: [32m'Handler error'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
[EventBus] Processing event global.eventbus.handler-error: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
[EventBus] Subscription removed: test.error.handling (sub_1757798038133_5e8otmf47)
[EventBus] Subscription removed: test.error.handling (sub_1757798038133_g8i56qsy4)
[EventBus] Subscription removed: global.eventbus.handler-error (sub_1757798038133_ga6hwmn8w)

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received 112ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor 57ms
stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: ""
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'xib33rli'[39m, timestamp: [32m'1757798038178'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: ""
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: ""
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: ""
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: ""
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: ""
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: " "
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'h12ug5x9'[39m, timestamp: [32m'1757798038180'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: " "
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: " "
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: " "
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: " "
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: " "
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "invalid pattern with spaces"
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'at8m00d8'[39m, timestamp: [32m'1757798038182'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "invalid pattern with spaces"
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "invalid pattern with spaces"
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "invalid pattern with spaces"
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "invalid pattern with spaces"
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "invalid pattern with spaces"
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "invalid..pattern"
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'14yof5fi'[39m, timestamp: [32m'1757798038184'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "invalid..pattern"
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "invalid..pattern"
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "invalid..pattern"
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "invalid..pattern"
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "invalid..pattern"
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: ".invalid.pattern"
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'9ojjs5n5'[39m, timestamp: [32m'1757798038186'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: ".invalid.pattern"
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: ".invalid.pattern"
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: ".invalid.pattern"
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: ".invalid.pattern"
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: ".invalid.pattern"
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "invalid.pattern."
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'kys318un'[39m, timestamp: [32m'1757798038187'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "invalid.pattern."
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "invalid.pattern."
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "invalid.pattern."
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "invalid.pattern."
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "invalid.pattern."
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "users.*"
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'of1woc5y'[39m, timestamp: [32m'1757798038189'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "users.*"
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "users.*"
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "users.*"
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "users.*"
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "users.*"
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "a"
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'j0wn3uhb'[39m, timestamp: [32m'1757798038191'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "a"
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "a"
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "a"
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "a"
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "a"
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "a_very_long_namespace_segment_that_is_definitely_over_the_sixty_four_character_limit.action"
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'0e60f8wv'[39m, timestamp: [32m'1757798038193'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "a_very_long_namespace_segment_that_is_definitely_over_the_sixty_four_character_limit.action"
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "a_very_long_namespace_segment_that_is_definitely_over_the_sixty_four_character_limit.action"
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "a_very_long_namespace_segment_that_is_definitely_over_the_sixty_four_character_limit.action"
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "a_very_long_namespace_segment_that_is_definitely_over_the_sixty_four_character_limit.action"
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "a_very_long_namespace_segment_that_is_definitely_over_the_sixty_four_character_limit.action"
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "namespace.a_very_long_action_segment_that_is_definitely_over_the_sixty_four_character_limit"
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m's5anc7ia'[39m, timestamp: [32m'1757798038194'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "namespace.a_very_long_action_segment_that_is_definitely_over_the_sixty_four_character_limit"
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "namespace.a_very_long_action_segment_that_is_definitely_over_the_sixty_four_character_limit"
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "namespace.a_very_long_action_segment_that_is_definitely_over_the_sixty_four_character_limit"
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "namespace.a_very_long_action_segment_that_is_definitely_over_the_sixty_four_character_limit"
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "namespace.a_very_long_action_segment_that_is_definitely_over_the_sixty_four_character_limit"
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "namespace.action_with_UPPERCASE"
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'4zll0ny1'[39m, timestamp: [32m'1757798038196'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "namespace.action_with_UPPERCASE"
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "namespace.action_with_UPPERCASE"
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "namespace.action_with_UPPERCASE"
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "namespace.action_with_UPPERCASE"
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "namespace.action_with_UPPERCASE"
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "global.a_very_long_action_segment_that_is_definitely_over_the_sixty_four_character_limit_and_another_one_for_good_measure_and_then_some_more_to_make_sure_we_exceed_the_total_length_limit_of_256_characters_in_the_event_bus_pattern_validation_logic_so_that_we_can_test_it_properly"
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'geuso8vm'[39m, timestamp: [32m'1757798038198'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "global.a_very_long_action_segment_that_is_definitely_over_the_sixty_four_character_limit_and_another_one_for_good_measure_and_then_some_more_to_make_sure_we_exceed_the_total_length_limit_of_256_characters_in_the_event_bus_pattern_validation_logic_so_that_we_can_test_it_properly"
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "global.a_very_long_action_segment_that_is_definitely_over_the_sixty_four_character_limit_and_another_one_for_good_measure_and_then_some_more_to_make_sure_we_exceed_the_total_length_limit_of_256_characters_in_the_event_bus_pattern_validation_logic_so_that_we_can_test_it_properly"
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "global.a_very_long_action_segment_that_is_definitely_over_the_sixty_four_character_limit_and_another_one_for_good_measure_and_then_some_more_to_make_sure_we_exceed_the_total_length_limit_of_256_characters_in_the_event_bus_pattern_validation_logic_so_that_we_can_test_it_properly"
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "global.a_very_long_action_segment_that_is_definitely_over_the_sixty_four_character_limit_and_another_one_for_good_measure_and_then_some_more_to_make_sure_we_exceed_the_total_length_limit_of_256_characters_in_the_event_bus_pattern_validation_logic_so_that_we_can_test_it_properly"
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "global.a_very_long_action_segment_that_is_definitely_over_the_sixty_four_character_limit_and_another_one_for_good_measure_and_then_some_more_to_make_sure_we_exceed_the_total_length_limit_of_256_characters_in_the_event_bus_pattern_validation_logic_so_that_we_can_test_it_properly"
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "test.basic"
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'bbtcruch'[39m, timestamp: [32m'1757798038200'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "test.basic"
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "test.basic"
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "test.basic"
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "test.basic"
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "test.basic"
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "test.basic"
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "test.basic"
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "test.basic"
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "test.basic"
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "test.basic"
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "test.basic"
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "test.basic"
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "test.basic"
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "test.basic"
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "test.basic"
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "test.basic"
[EventBus] Processing event test.basic: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "test.basic"
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "test.basic"
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "test.basic"
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "inventory.item_updated"
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'b7t2zhc8'[39m, timestamp: [32m'1757798038204'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "inventory.item_updated"
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "inventory.item_updated"
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "inventory.item_updated"
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "inventory.item_updated"
[EventBus] Processing event inventory.item_updated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "inventory.item_updated"
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "inventory.item_updated"
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "inventory.item_updated"
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "global.system_shutdown"
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'thg8apbf'[39m, timestamp: [32m'1757798038207'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "global.system_shutdown"
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "global.system_shutdown"
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "global.system_shutdown"
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "global.system_shutdown"
[EventBus] Processing event global.system_shutdown: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "global.system_shutdown"
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "global.system_shutdown"
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "global.system_shutdown"
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "global.eventbus.handler-error"
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'0wk19bey'[39m, timestamp: [32m'1757798038213'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "global.eventbus.handler-error"
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "global.eventbus.handler-error"
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "global.eventbus.handler-error"
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "global.eventbus.handler-error"
[EventBus] Processing event global.eventbus.handler-error: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "global.eventbus.handler-error"
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "global.eventbus.handler-error"
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "global.eventbus.handler-error"
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "module.action.sub_action"
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'6ob9n1vp'[39m, timestamp: [32m'1757798038215'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "module.action.sub_action"
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "module.action.sub_action"
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "module.action.sub_action"
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "module.action.sub_action"
[EventBus] Processing event module.action.sub_action: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "module.action.sub_action"
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "module.action.sub_action"
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "module.action.sub_action"
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "module.action.with_numbers123"
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'rqg1hzwz'[39m, timestamp: [32m'1757798038217'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "module.action.with_numbers123"
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "module.action.with_numbers123"
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "module.action.with_numbers123"
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "module.action.with_numbers123"
[EventBus] Processing event module.action.with_numbers123: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "module.action.with_numbers123"
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "module.action.with_numbers123"
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "module.action.with_numbers123"
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "module.action_with_underscores"
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'1z1lzj16'[39m, timestamp: [32m'1757798038219'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "module.action_with_underscores"
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "module.action_with_underscores"
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "module.action_with_underscores"
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "module.action_with_underscores"
[EventBus] Processing event module.action_with_underscores: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "module.action_with_underscores"
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "module.action_with_underscores"
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "module.action_with_underscores"
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "namespace.action-with-hyphens"
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'5mvz7wrs'[39m, timestamp: [32m'1757798038221'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "namespace.action-with-hyphens"
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "namespace.action-with-hyphens"
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "namespace.action-with-hyphens"
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "namespace.action-with-hyphens"
[EventBus] Processing event namespace.action-with-hyphens: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "namespace.action-with-hyphens"
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "namespace.action-with-hyphens"
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "namespace.action-with-hyphens"
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "a.b"
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'nmxyd1r0'[39m, timestamp: [32m'1757798038223'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "a.b"
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "a.b"
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "a.b"
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "a.b"
[EventBus] Processing event a.b: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "a.b"
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "a.b"
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "a.b"
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "namespace.action_with_wildcard.*"
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'h0m6pu7h'[39m, timestamp: [32m'1757798038225'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "namespace.action_with_wildcard.*"
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "namespace.action_with_wildcard.*"
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "namespace.action_with_wildcard.*"
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "namespace.action_with_wildcard.*"
[EventBus] Processing event namespace.action_with_wildcard.*: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "namespace.action_with_wildcard.*"
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "namespace.action_with_wildcard.*"
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "namespace.action_with_wildcard.*"
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'5gmgvi62'[39m, timestamp: [32m'1757798038227'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads
[EventBus] Processing event test.large.payload: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'edeyknds'[39m, timestamp: [32m'1757798038233'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:58) {
  subscriptionId: [32m'sub_1757798038236_vl9m096w7'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:58) {
  subscriptionId: [32m'sub_1757798038236_ti22qy8qd'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
ℹ️ [EventBus] Module registered (06:13:58) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:58) {
  subscriptionId: [32m'sub_1757798038238_7hp0sgfeu'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
ℹ️ [EventBus] Module registered (06:13:58) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:58) {
  subscriptionId: [32m'sub_1757798038239_9orovb0cs'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:58) {
  subscriptionId: [32m'sub_1757798038239_sud8701o4'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
ℹ️ [EventBus] Module registered (06:13:58) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Error unsubscribing sub_1757798038239_9orovb0cs: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798038239_sud8701o4: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Error unsubscribing sub_1757798038238_7hp0sgfeu: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Error unsubscribing sub_1757798038236_vl9m096w7: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798038236_ti22qy8qd: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'plag7ykk'[39m, timestamp: [32m'1757798038259'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:58) {
  subscriptionId: [32m'sub_1757798038260_authsk6om'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:58) {
  subscriptionId: [32m'sub_1757798038261_9jegrmc5m'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
ℹ️ [EventBus] Module registered (06:13:58) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:58) {
  subscriptionId: [32m'sub_1757798038262_211nqgsba'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
ℹ️ [EventBus] Module registered (06:13:58) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:58) {
  subscriptionId: [32m'sub_1757798038264_x7z32nuo7'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:58) {
  subscriptionId: [32m'sub_1757798038264_q102kkfxz'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
ℹ️ [EventBus] Module registered (06:13:58) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Error unsubscribing sub_1757798038264_x7z32nuo7: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798038264_q102kkfxz: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Error unsubscribing sub_1757798038262_211nqgsba: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Error unsubscribing sub_1757798038260_authsk6om: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798038261_9jegrmc5m: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'25ebwscr'[39m, timestamp: [32m'1757798038277'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully 46ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "" 2ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: " " 2ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "invalid pattern with spaces" 2ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "invalid..pattern" 2ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: ".invalid.pattern" 2ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "invalid.pattern." 2ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "users.*" 2ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "a" 2ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "a_very_long_namespace_segment_that_is_definitely_over_the_sixty_four_character_limit.action" 2ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "namespace.a_very_long_action_segment_that_is_definitely_over_the_sixty_four_character_limit" 2ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "namespace.action_with_UPPERCASE" 2ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should reject invalid pattern: "global.a_very_long_action_segment_that_is_definitely_over_the_sixty_four_character_limit_and_another_one_for_good_measure_and_then_some_more_to_make_sure_we_exceed_the_total_length_limit_of_256_characters_in_the_event_bus_pattern_validation_logic_so_that_we_can_test_it_properly" 2ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "test.basic" 4ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "inventory.item_updated" 3ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "global.system_shutdown" 6ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "global.eventbus.handler-error" 2ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "module.action.sub_action" 2ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "module.action.with_numbers123" 2ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "module.action_with_underscores" 2ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "namespace.action-with-hyphens" 2ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "a.b" 2ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > Pattern Validation > should accept valid pattern: "namespace.action_with_wildcard.*" 2ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads 6ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully 26ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies 18ms
stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:58) {
  subscriptionId: [32m'sub_1757798038279_ifdncmifq'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:58) {
  subscriptionId: [32m'sub_1757798038279_whjl552zj'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
ℹ️ [EventBus] Module registered (06:13:58) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[ModuleRegistry] Error unsubscribing sub_1757798038279_ifdncmifq: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798038279_whjl552zj: RangeError: Maximum call stack size exceeded
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[EventBus] Processing event global.eventbus.module-deactivated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'7h0mde22'[39m, timestamp: [32m'1757798038286'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
[EventBus] Processing event test.metrics.1: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
[EventBus] Processing event test.metrics.2: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
[EventBus] Processing event test.metrics.3: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'm6d5p4ar'[39m, timestamp: [32m'1757798038300'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
[EventBus] Processing event test.pattern.tracking.1: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
[EventBus] Processing event test.pattern.tracking.1: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
[EventBus] Processing event test.pattern.tracking.2: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'wzsbirzi'[39m, timestamp: [32m'1757798038303'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'6jv5gwv7'[39m, timestamp: [32m'1757798038304'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }
[EventBus] Adding subscription to weak subscription manager for pattern: test.config.timeout
[EventBus] Subscription added: test.config.timeout (sub_1757798038304_g3ps4zrjc) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:58) {
  subscriptionId: [32m'sub_1757798038304_g3ps4zrjc'[39m,
  pattern: [32m'test.config.timeout'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly 9ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics 14ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns 3ms
stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
[EventBus] Subscription removed: test.config.timeout (sub_1757798038304_g3ps4zrjc)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle sales order events
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'dedwra5m'[39m, timestamp: [32m'1757798038514'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle sales order events
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle sales order events
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle sales order events
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle sales order events
[EventBus] Processing event sales.order.created: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle sales order events
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle sales order events
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle sales order events
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle inventory events
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'an5yfcsp'[39m, timestamp: [32m'1757798038516'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle inventory events
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle inventory events
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle inventory events
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle inventory events
[EventBus] Processing event inventory.stock.low: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle inventory events
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle inventory events
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle inventory events
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle staff events
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'iji43jel'[39m, timestamp: [32m'1757798038518'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle staff events
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle staff events
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle staff events
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle staff events
[EventBus] Processing event staff.clock.in: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle staff events
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle staff events
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle staff events
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'82qdrym1'[39m, timestamp: [32m'1757798038520'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
[EventBus] Adding subscription to weak subscription manager for pattern: test.shutdown
[EventBus] Subscription added: test.shutdown (sub_1757798038521_y9c6rjvhm) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:58) {
  subscriptionId: [32m'sub_1757798038521_y9c6rjvhm'[39m,
  pattern: [32m'test.shutdown'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
[EventBus] Processing event test.shutdown: Found 1 matching subscriptions

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings 211ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle sales order events 2ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle inventory events 2ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle staff events 2ms
stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:13:58)
❌ [Security] [SECURITY] RateLimiter destroyed (06:13:58)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:13:58)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:13:58)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:13:58) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:13:58)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
ℹ️ [Security] New CSP nonce generated (06:13:58) { noncePrefix: [32m'iskvot96'[39m, timestamp: [32m'1757798038630'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (06:13:58)
ℹ️ [Security] Encryption disabled - skipping initialization (06:13:58)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (06:13:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (06:13:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (06:13:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:13:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:13:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (06:13:58) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
[EventBus] Adding subscription to weak subscription manager for pattern: test.shutdown.timeout
[EventBus] Subscription added: test.shutdown.timeout (sub_1757798038631_hpvs2p9em) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (06:13:58) {
  subscriptionId: [32m'sub_1757798038631_hpvs2p9em'[39m,
  pattern: [32m'test.shutdown.timeout'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
[EventBus] Processing event test.shutdown.timeout: Found 1 matching subscriptions

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully 109ms
stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Graceful shutdown completed

 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long 2005ms
stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
❌ [Security] [SECURITY] ANOMALY: Slow handler execution detected (06:14:00) {
  handlerId: [32m'sub_1757798038631_hpvs2p9em'[39m,
  pattern: [32m'test.shutdown.timeout'[39m,
  executionTimeMs: [32m'2013.5793000000003'[39m,
  threshold: [32m'1000'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:00)
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:00)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:00)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:00)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:00)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:00) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:00)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
❌ [Security] [SECURITY] EncryptedEventStore destroyed (06:14:00)
❌ [Security] [SECURITY] RateLimiter destroyed (06:14:00)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:00)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:00)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:00)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:00) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:00)

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long 2017ms

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 1 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Event Pattern Validation > should reject invalid event patterns
AssertionError: expected true to be false // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- false[39m
[31m+ true[39m

 ❯ src/lib/events/__tests__/unit/Types.test.ts:163:50
    161|       // Invalid format
    162|       expect(isValidEventPattern('sales')).toBe(false);
    163|       expect(isValidEventPattern('sales.order')).toBe(false);
       |                                                  ^
    164|       expect(isValidEventPattern('sales.order.created.extra')).toBe(fa…
    165|       expect(isValidEventPattern('')).toBe(false);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/1]⎯


 Test Files  1 failed | 5 passed (6)
      Tests  1 failed | 178 passed | 1 skipped (180)
   Start at  18:13:54
   Duration  6.66s (transform 978ms, setup 2.32s, collect 2.18s, tests 5.63s, environment 12.36s, prepare 1.50s)

