
 RUN  v3.2.4 I:/Programacion/Proyectos/g-mini

 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should create valid EventId 2ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should reject invalid EventId format 2ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should create valid SubscriptionId 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should reject invalid SubscriptionId format 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should create valid TraceId 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should reject invalid TraceId format 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should create valid SpanId 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should reject invalid SpanId format 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should create valid ModuleId 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should reject invalid ModuleId format 1ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should create valid InstanceId 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Type Constructors > should reject invalid InstanceId format 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Type Guards > should correctly identify EventId 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Type Guards > should correctly identify SubscriptionId 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Type Guards > should correctly identify TraceId 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Type Guards > should correctly identify SpanId 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Event Pattern Validation > should validate correct event patterns 1ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Event Pattern Validation > should validate wildcard patterns 0ms
 × src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Event Pattern Validation > should reject invalid event patterns 10ms
   → expected true to be false // Object.is equality
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Template Literal Type Extraction > should extract module names correctly 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Template Literal Type Extraction > should extract entity names correctly 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Template Literal Type Extraction > should extract action names correctly 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Payload Type Safety > should enforce correct payload types for sales events 1ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Payload Type Safety > should enforce correct payload types for inventory events 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Payload Type Safety > should allow wildcard payload types 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Types Isolation > should prevent mixing different branded types 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Branded Types Isolation > should maintain type safety in function parameters 0ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Advanced Type Patterns > should support complex event pattern matching 1ms
 ✓ src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Advanced Type Patterns > should provide type-safe event handlers 0ms
stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should calculate correct percentiles for event publishing
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (03:48:49) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Storage > should append events successfully 4ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Storage > should append multiple events 1ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Storage > should handle large payloads 1ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Storage > should reject invalid events 2ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Storage > should handle duplicate event IDs 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Retrieval > should retrieve all events 1ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Retrieval > should filter events by pattern 1ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Retrieval > should filter events by exact pattern 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Retrieval > should filter events by timestamp range 1ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Retrieval > should combine pattern and timestamp filters 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Retrieval > should return empty array for non-matching patterns 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Retrieval > should return empty array for out-of-range timestamps 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Replay > should replay all events in order 14ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Replay > should replay events from specific timestamp 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Replay > should replay specific pattern events 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Replay > should replay events in timestamp order regardless of insertion order 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Status Management > should mark events as processed 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Status Management > should mark events as synced 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Status Management > should handle marking non-existent events 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Cleanup > should cleanup old events 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Cleanup > should not cleanup recent events 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Event Cleanup > should return correct count of cleaned events 0ms
 ↓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Storage Limits > should respect maximum event history size
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Storage Limits > should handle storage quota exceeded 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Concurrent Access > should handle concurrent writes 0ms
 ✓ src/lib/events/__tests__/unit/EventStore.test.ts > EventStore > Concurrent Access > should handle concurrent reads 1ms
stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should calculate correct percentiles for event publishing
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (03:48:49)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should calculate percentiles for subscription handling
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (03:48:49) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should calculate percentiles for subscription handling
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (03:48:49)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should handle edge cases in percentile calculations
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (03:48:49) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should handle edge cases in percentile calculations
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (03:48:49) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should handle edge cases in percentile calculations
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (03:48:49)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should calculate percentiles with large datasets
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (03:48:49) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should calculate percentiles with large datasets
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (03:48:49)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should identify hot paths based on frequency threshold
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (03:48:49) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should identify hot paths based on frequency threshold
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (03:48:49)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should calculate average latency for hot paths
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (03:48:49) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should calculate average latency for hot paths
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (03:48:49)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should sort hot paths by execution count
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (03:48:49) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should sort hot paths by execution count
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (03:48:49)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should identify hot paths based on threshold configuration
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (03:48:49) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should identify hot paths based on threshold configuration
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (03:48:49) {
  maxDataPoints: [32m'10000'[39m,
  retentionMs: [32m'3600000'[39m,
  hotPathAnalysis: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (03:48:49)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should identify hot paths based on threshold configuration
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (03:48:49)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should track real-time metrics when enabled
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (03:48:49) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should track real-time metrics when enabled
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (03:48:49)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should not track when profiler is disabled
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (03:48:49) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should not track when profiler is disabled
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler toggled (03:48:49) { enabled: [32m'false'[39m }

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should not track when profiler is disabled
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (03:48:49)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should calculate throughput metrics
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (03:48:49) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should calculate throughput metrics
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (03:48:50)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (03:48:50)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should track error rates
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (03:48:49) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should track error rates
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (03:48:49)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should respect max data points limit
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (03:48:49) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should respect max data points limit
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (03:48:49) { maxDataPoints: [32m'5'[39m, retentionMs: [32m'300000'[39m, hotPathAnalysis: [32m'true'[39m }

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should respect max data points limit
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (03:48:49)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should clean up old data based on retention period
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (03:48:49) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should clean up old data based on retention period
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (03:48:49) { maxDataPoints: [32m'1000'[39m, retentionMs: [32m'1000'[39m, hotPathAnalysis: [32m'true'[39m }

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should clean up old data based on retention period
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (03:50:01)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (03:50:01)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should handle cleanup gracefully during active profiling
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (03:48:49) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should handle cleanup gracefully during active profiling
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (03:48:50)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (03:48:50)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should generate comprehensive performance report
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (03:48:49) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should generate comprehensive performance report
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (03:48:49)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should export performance data for external analysis
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (03:48:49) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should export performance data for external analysis
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (03:48:49)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should clear performance data when requested
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (03:48:49) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should clear performance data when requested
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (03:48:49)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should clear performance data when requested
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (03:48:49)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Configuration Validation > should work with different threshold configurations
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (03:48:49) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Configuration Validation > should work with different threshold configurations
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (03:48:49) {
  maxDataPoints: [32m'10000'[39m,
  retentionMs: [32m'3600000'[39m,
  hotPathAnalysis: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (03:48:49)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Configuration Validation > should work with different threshold configurations
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (03:48:49)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Configuration Validation > should handle profiler enable/disable
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (03:48:49) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Configuration Validation > should handle profiler enable/disable
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler toggled (03:48:49) { enabled: [32m'false'[39m }
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler toggled (03:48:49) { enabled: [32m'true'[39m }

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Configuration Validation > should handle profiler enable/disable
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (03:48:49)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Memory Management > should clean up resources on destroy
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (03:48:49) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Memory Management > should clean up resources on destroy
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (03:48:49)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Memory Management > should clean up resources on destroy
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (03:48:49)

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Memory Management > should handle concurrent access safely
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler initialized (03:48:49) {
  maxDataPoints: [32m'1000'[39m,
  retentionMs: [32m'300000'[39m,
  hotPathAnalysis: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Memory Management > should handle concurrent access safely
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler metrics cleared (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PerformanceProfiler destroyed (03:48:49)

 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should calculate correct percentiles for event publishing 35ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should calculate percentiles for subscription handling 2ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should handle edge cases in percentile calculations 2ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Latency Percentile Calculations > should calculate percentiles with large datasets 32ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should identify hot paths based on frequency threshold 3ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should calculate average latency for hot paths 2ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should sort hot paths by execution count 2ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Hot Path Analysis > should identify hot paths based on threshold configuration 2ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should track real-time metrics when enabled 1ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should not track when profiler is disabled 1ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should calculate throughput metrics 1ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Real-time Monitoring > should track error rates 1ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should respect max data points limit 1ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should clean up old data based on retention period 1ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Data Retention and Cleanup > should handle cleanup gracefully during active profiling 2ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should generate comprehensive performance report 1ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should export performance data for external analysis 1ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Performance Report Generation > should clear performance data when requested 2ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Configuration Validation > should work with different threshold configurations 2ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Configuration Validation > should handle profiler enable/disable 1ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Memory Management > should clean up resources on destroy 1ms
 ✓ src/lib/events/__tests__/unit/PerformanceProfiler.test.ts > PerformanceProfiler > Memory Management > should handle concurrent access safely 1ms
stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts
ℹ️ [Security] New CSP nonce generated (03:48:49) { noncePrefix: [32m'u384w91o'[39m, timestamp: [32m'1757789329466'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:49)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:49) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:49) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:49) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:49) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:49) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:49) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts
ℹ️ [Security] New CSP nonce generated (03:48:49) { noncePrefix: [32m'z4wbmq8a'[39m, timestamp: [32m'1757789329463'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:49)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'6ccd6ff8...'[39m }

stderr | src/lib/events/__tests__/unit/EventBus.test.ts
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:49) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:49) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:49) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:49) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:49) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:49) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'6ccd6ff8...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts
ℹ️ [Security] New CSP nonce generated (03:48:49) { noncePrefix: [32m'w40tjocy'[39m, timestamp: [32m'1757789329469'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:49)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/__tests__/unit/ModuleRegistry.test.ts
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:49) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:48:49) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:49) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:49) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:49) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:49) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/unit/EventBus.test.ts
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'ca46c1c0...'[39m }

stderr | src/lib/events/__tests__/unit/EventBus.test.ts
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'ca46c1c0...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate content hash for identical payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'61002a2b...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate content hash for identical payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'61002a2b...'[39m }

stderr | src/lib/events/__tests__/unit/ModuleRegistry.test.ts
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'28a3b841...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate content hash for identical payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate content hash for identical payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'7bc6a301...'[39m }

stderr | src/lib/events/__tests__/unit/ModuleRegistry.test.ts
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'28a3b841...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate content hash for identical payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'7bc6a301...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate content hash for identical payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate different content hashes for different payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'8d80e07b...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate different content hashes for different payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'8d80e07b...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate different content hashes for different payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate different content hashes for different payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'adcdd860...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate different content hashes for different payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'adcdd860...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate different content hashes for different payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit basic event successfully
ℹ️ [Security] New CSP nonce generated (03:48:49) { noncePrefix: [32m'r3rnu6cm'[39m, timestamp: [32m'1757789329484'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:49)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:49)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit basic event successfully
❌ [Security] [SECURITY] RateLimiter initialized (03:48:49) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:49) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:49) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:49) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully
[ModuleRegistry] Module 'test-inventory' activated directly

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle payload normalization
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'5bb1f027...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle payload normalization
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'5bb1f027...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle payload normalization
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle payload normalization
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'7c4a206f...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle payload normalization
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'7c4a206f...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle payload normalization
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit basic event successfully
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:49) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate operation ID from event metadata
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'f30829ed...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration
[ModuleRegistry] Module 'test-inventory' activated directly

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate operation ID from event metadata
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'f30829ed...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate operation ID from event metadata
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit basic event successfully
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate operation ID from event metadata
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'982a634d...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate operation ID from event metadata
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'982a634d...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate operation ID from event metadata
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit basic event successfully
[EventBus] Processing event test.basic.event: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit basic event successfully
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit basic event successfully
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:49)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:49)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:49)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:49)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:49) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:49)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit basic event successfully
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate semantic key for business events
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'1c476c9d...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate semantic key for business events
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'1c476c9d...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate semantic key for business events
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate semantic key for business events
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'a77799e9...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate semantic key for business events
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'a77799e9...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate semantic key for business events
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit event with options
ℹ️ [Security] New CSP nonce generated (03:48:49) { noncePrefix: [32m'h3ie24t8'[39m, timestamp: [32m'1757789329493'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:49)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:49)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Activating module 'test-customers'...

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit event with options
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:49) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:49) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:49) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:49) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:49) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-customers' activated directly

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit event with options
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:49) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-sales' activated directly

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle events without specific business context
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'eaebabc8...'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit event with options
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle events without specific business context
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'eaebabc8...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Deactivating dependent module 'test-sales' before deactivating 'test-inventory'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit event with options
[EventBus] Processing event test.options.event: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle events without specific business context
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-sales' deactivated successfully

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle events without specific business context
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'576c7c05...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle events without specific business context
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'576c7c05...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[TestInventoryModule] Deactivating...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle events without specific business context
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-customers' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies
[ModuleRegistry] Module 'test-sales' is already inactive

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit event with options
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit event with options
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:49)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:49)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:49)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:49)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:49) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:49)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit event with options
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect content-based duplicates
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'9da5fb3b...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect content-based duplicates
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'9da5fb3b...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect content-based duplicates
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle complex payload objects
ℹ️ [Security] New CSP nonce generated (03:48:49) { noncePrefix: [32m'8s7lkwa6'[39m, timestamp: [32m'1757789329499'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:49)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:49)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[ModuleRegistry] Module 'test-inventory' is already active

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle complex payload objects
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:49) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:49) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:49) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:49) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:49) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect content-based duplicates
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'bb62906e...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect content-based duplicates
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'bb62906e...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect content-based duplicates
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle complex payload objects
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:49) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle complex payload objects
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle complex payload objects
[EventBus] Processing event test.complex.payload: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect content-based duplicates
[DeduplicationManager] isDuplicate called for pattern: test.content.duplicate, windowMs: 300000

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect content-based duplicates
[DeduplicationManager] Content TTL Check: timeDiff=1ms, windowMs=300000ms, withinWindow=true

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle complex payload objects
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle complex payload objects
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:49)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:49)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:49)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:49)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:49) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:49)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle complex payload objects
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-customers' activated directly

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect operation-based duplicates
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'ecdd6aca...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Activating module 'test-sales'...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect operation-based duplicates
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'ecdd6aca...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect operation-based duplicates
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle null and undefined values in payload
ℹ️ [Security] New CSP nonce generated (03:48:49) { noncePrefix: [32m'niqtj20t'[39m, timestamp: [32m'1757789329502'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:49)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:49)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-sales' activated directly

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect operation-based duplicates
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'a1d51819...'[39m }

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle null and undefined values in payload
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:49) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:49) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:49) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:49) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:49) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-sales' is already active

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect operation-based duplicates
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'a1d51819...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect operation-based duplicates
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle null and undefined values in payload
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:49) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Deactivating dependent module 'test-sales' before deactivating 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-sales' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect operation-based duplicates
[DeduplicationManager] isDuplicate called for pattern: test.operation.duplicate, windowMs: 300000

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect operation-based duplicates
[DeduplicationManager] Operation TTL Check: timeDiff=0ms, windowMs=300000ms, withinWindow=true
[DeduplicationManager] Duplicate found by operation_id: unique-client-operation-123_user-123

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle null and undefined values in payload
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle null and undefined values in payload
[EventBus] Processing event test.null.values: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle null and undefined values in payload
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-customers' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order
[ModuleRegistry] Module 'test-sales' is already inactive

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect semantic duplicates within time window
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'7553528b...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect semantic duplicates within time window
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'7553528b...'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle null and undefined values in payload
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect semantic duplicates within time window
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle null and undefined values in payload
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:49)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:49)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:49)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:49)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:49) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:49)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect semantic duplicates within time window
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'59d41f59...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect semantic duplicates within time window
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'59d41f59...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect semantic duplicates within time window
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[ModuleRegistry] Directly activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
ℹ️ [Security] New CSP nonce generated (03:48:49) { noncePrefix: [32m'ma8pukfc'[39m, timestamp: [32m'1757789329508'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:49)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:49)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:49) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:49) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:49) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:49) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:49) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-kitchen-failing'[39m ]
[ModuleRegistry] Module 'test-kitchen-failing' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Activating module 'test-kitchen-failing'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Directly activating module 'test-kitchen-failing'...
[TestKitchenModule] Attempting activation...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:49) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
[EventBus] Adding subscription to weak subscription manager for pattern: test.subscription.basic
[EventBus] Subscription added: test.subscription.basic (sub_1757789329510_7w840gwl5) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:49) {
  subscriptionId: [32m'sub_1757789329510_7w840gwl5'[39m,
  pattern: [32m'test.subscription.basic'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
[EventBus] Processing event test.subscription.basic: Found 1 matching subscriptions

stderr | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Failed to activate module 'test-kitchen-failing' directly: Error: Kitchen equipment not responding
    at Object.onActivate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\helpers\test-modules.ts:264:13[90m)[39m
    at ModuleRegistry.activateModuleDirectly [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:518:33[90m)[39m
    at ModuleRegistry.activateModule [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:153:18[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at ModuleRegistry.registerModule [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:119:7[90m)[39m
    at [90mI:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\unit\ModuleRegistry.test.ts:174:9
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stderr | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Failed to activate module 'test-kitchen-failing': Error: Kitchen equipment not responding
    at Object.onActivate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\helpers\test-modules.ts:264:13[90m)[39m
    at ModuleRegistry.activateModuleDirectly [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:518:33[90m)[39m
    at ModuleRegistry.activateModule [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:153:18[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at ModuleRegistry.registerModule [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:119:7[90m)[39m
    at [90mI:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\unit\ModuleRegistry.test.ts:174:9
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect semantic duplicates within time window
[DeduplicationManager] isDuplicate called for pattern: sales.order.created, windowMs: 300000

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect semantic duplicates within time window
[DeduplicationManager] Semantic duplicates found: 1, windowMs: 300000

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-customers' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should not detect semantic duplicates outside time window
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'99b10adb...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Activating module 'test-sales'...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should not detect semantic duplicates outside time window
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'99b10adb...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should not detect semantic duplicates outside time window
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should not detect semantic duplicates outside time window
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'40b47ecf...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should not detect semantic duplicates outside time window
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'40b47ecf...'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-sales' activated directly

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should not detect semantic duplicates outside time window
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Deactivating dependent module 'test-sales' before deactivating 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-sales' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first
[ModuleRegistry] Module 'test-customers' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully
[ModuleRegistry] Failed to deactivate module 'test-inventory': Error: Deactivation failed
    at [90mI:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\unit\ModuleRegistry.test.ts:252:64
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)
    at runWithTimeout [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Module 'test-customers' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Module 'test-customers' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules
[ModuleRegistry] Module 'test-customers' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-kitchen-failing'[39m ]
[ModuleRegistry] Module 'test-kitchen-failing' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Activating module 'test-kitchen-failing'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Directly activating module 'test-kitchen-failing'...
[TestKitchenModule] Attempting activation...

stderr | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Failed to activate module 'test-kitchen-failing' directly: Error: Kitchen equipment not responding
    at Object.onActivate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\helpers\test-modules.ts:264:13[90m)[39m
    at ModuleRegistry.activateModuleDirectly [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:518:33[90m)[39m
    at ModuleRegistry.activateModule [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:153:18[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at ModuleRegistry.registerModule [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:119:7[90m)[39m
    at [90mI:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\unit\ModuleRegistry.test.ts:312:9
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stderr | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Failed to activate module 'test-kitchen-failing': Error: Kitchen equipment not responding
    at Object.onActivate [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\helpers\test-modules.ts:264:13[90m)[39m
    at ModuleRegistry.activateModuleDirectly [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:518:33[90m)[39m
    at ModuleRegistry.activateModule [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:153:18[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at ModuleRegistry.registerModule [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:119:7[90m)[39m
    at [90mI:\Programacion\Proyectos\g-mini\[39msrc\lib\events\__tests__\unit\ModuleRegistry.test.ts:312:9
    at [90mfile:///I:/Programacion/Proyectos/g-mini/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[TEST] Module correctly rejected during auto-activation: Failed to activate module 'test-kitchen-failing': Kitchen equipment not responding

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-customers' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-sales' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Deactivating dependent module 'test-sales' before deactivating 'test-inventory'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
[EventBus] Subscription removed: test.subscription.basic (sub_1757789329510_7w840gwl5)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-sales' deactivated successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-customers' deactivated successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health
[ModuleRegistry] Module 'test-sales' is already inactive

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on()
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:49)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:49)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:49)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:49)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:49) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:49)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-customers' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
ℹ️ [Security] New CSP nonce generated (03:48:49) { noncePrefix: [32m'8s3v59yq'[39m, timestamp: [32m'1757789329539'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:49)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:49)

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:49) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:49) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:49) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:49) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:49) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-sales' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Deactivating dependent module 'test-sales' before deactivating 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-sales' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:49) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-customers' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information
[ModuleRegistry] Module 'test-sales' is already inactive

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
[EventBus] Adding subscription to weak subscription manager for pattern: test.multiple.subscribers
[EventBus] Subscription added: test.multiple.subscribers (sub_1757789329540_d19lr7lwr) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: test.multiple.subscribers
[EventBus] Subscription added: test.multiple.subscribers (sub_1757789329541_6k66yexic) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: test.multiple.subscribers
[EventBus] Subscription added: test.multiple.subscribers (sub_1757789329541_cm1fdkyrh) [moduleId: anonymous]

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:49) {
  subscriptionId: [32m'sub_1757789329540_d19lr7lwr'[39m,
  pattern: [32m'test.multiple.subscribers'[39m,
  moduleId: [32m'anonymous'[39m
}
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:49) {
  subscriptionId: [32m'sub_1757789329541_6k66yexic'[39m,
  pattern: [32m'test.multiple.subscribers'[39m,
  moduleId: [32m'anonymous'[39m
}
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:49) {
  subscriptionId: [32m'sub_1757789329541_cm1fdkyrh'[39m,
  pattern: [32m'test.multiple.subscribers'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-customers' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-sales' activated directly

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
[EventBus] Processing event test.multiple.subscribers: Found 3 matching subscriptions

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Deactivating dependent module 'test-sales' before deactivating 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-sales' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-customers' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules
[ModuleRegistry] Module 'test-sales' is already inactive

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Module 'test-customers' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules
[ModuleRegistry] Module 'test-customers' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-module-b'[39m ]
[ModuleRegistry] Module 'test-module-b' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Activating module 'test-module-b'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Directly activating module 'test-module-b'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Registering 1 subscriptions for module 'test-module-b'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-module-b' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-module-b' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-module-b'[39m, [32m'test-module-c'[39m ]
[ModuleRegistry] Module 'test-module-c' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Activating module 'test-module-c'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Directly activating module 'test-module-c'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Registering 2 subscriptions for module 'test-module-c'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-module-c' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-module-c' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-module-c' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Deactivating dependent module 'test-module-b' before deactivating 'test-inventory'
[ModuleRegistry] Deactivating dependent module 'test-module-c' before deactivating 'test-module-b'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Deactivating module 'test-module-c'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-module-c'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-module-c' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Deactivating module 'test-module-b'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-module-b'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-module-b' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-module-b' is already inactive

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain
[ModuleRegistry] Module 'test-module-c' is already inactive

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Activation order calculated: [ [32m'test-a'[39m ]
[ModuleRegistry] Module 'test-a' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Activating module 'test-a'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Directly activating module 'test-a'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Registering 2 subscriptions for module 'test-a'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-a' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-a' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Activation order calculated: [ [32m'test-a'[39m, [32m'test-b'[39m ]
[ModuleRegistry] Module 'test-b' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Activating module 'test-b'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Directly activating module 'test-b'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Registering 1 subscriptions for module 'test-b'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-b' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-b' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Activation order calculated: [ [32m'test-a'[39m, [32m'test-b'[39m, [32m'test-c'[39m ]
[ModuleRegistry] Module 'test-c' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Activating module 'test-c'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Directly activating module 'test-c'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Registering 2 subscriptions for module 'test-c'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-c' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-c' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Activation order calculated: [ [32m'test-a'[39m, [32m'test-b'[39m, [32m'test-c'[39m, [32m'test-d'[39m ]
[ModuleRegistry] Module 'test-d' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Activating module 'test-d'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Directly activating module 'test-d'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Registering 2 subscriptions for module 'test-d'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-d' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-d' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-d' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Deactivating dependent module 'test-c' before deactivating 'test-a'
[ModuleRegistry] Deactivating dependent module 'test-d' before deactivating 'test-c'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Deactivating module 'test-d'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-d'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-d' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Deactivating module 'test-c'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-c'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-c' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Deactivating dependent module 'test-b' before deactivating 'test-a'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Deactivating module 'test-b'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-b'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-b' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Deactivating module 'test-a'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-a'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-a' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-b' is already inactive

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-c' is already inactive

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph
[ModuleRegistry] Module 'test-d' is already inactive

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-customers' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-sales' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-sales' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-sales' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-customers' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Module 'test-inventory' activated directly

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Module 'test-inventory' is already active

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
[EventBus] Subscription removed: test.multiple.subscribers (sub_1757789329540_d19lr7lwr)
[EventBus] Subscription removed: test.multiple.subscribers (sub_1757789329541_6k66yexic)
[EventBus] Subscription removed: test.multiple.subscribers (sub_1757789329541_cm1fdkyrh)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:49)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:49)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:49)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:49)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:49) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:49)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
ℹ️ [Security] New CSP nonce generated (03:48:49) { noncePrefix: [32m'klr9tbpr'[39m, timestamp: [32m'1757789329575'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:49)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:49)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:49) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:49) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:49) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:49) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:49) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:49) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
[EventBus] Adding subscription to weak subscription manager for pattern: test.unsubscribe
[EventBus] Subscription added: test.unsubscribe (sub_1757789329576_t73kkc6bq) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:49) {
  subscriptionId: [32m'sub_1757789329576_t73kkc6bq'[39m,
  pattern: [32m'test.unsubscribe'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
[EventBus] Processing event test.unsubscribe: Found 1 matching subscriptions

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit basic event successfully 9ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should emit event with options 6ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle complex payload objects 4ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Emission > should handle null and undefined values in payload 5ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should subscribe to events with on() 31ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support multiple subscribers for same pattern 37ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate content hash for identical payloads 5ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate different content hashes for different payloads 3ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle payload normalization 2ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate operation ID from event metadata 3ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should generate semantic key for business events 3ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Generation > should handle events without specific business context 3ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect content-based duplicates 4ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect operation-based duplicates 3ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should detect semantic duplicates within time window 16ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register a basic module successfully 5ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should prevent duplicate module registration 4ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should validate module descriptor 1ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should register module with dependencies 5ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Registration > should validate dependency existence during registration 1ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module without dependencies 2ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should activate module with dependencies in correct order 6ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle circular dependencies 1ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should call onActivate lifecycle hook 2ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should handle activation failures 8ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Activation > should not activate already active module 1ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate active module 1ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should call onDeactivate lifecycle hook 1ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should deactivate dependent modules first 3ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation of non-existent module 0ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Deactivation > should handle deactivation failures gracefully 2ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should perform health checks on active modules 1ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should get health for all active modules 3ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should handle failing health checks 3ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should track health check metrics 1ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Health Monitoring > should check dependency health 3ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should provide module information 3ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should return null for non-existent module 0ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list all registered modules 3ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Module Information > should list only active modules 1ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should resolve simple dependency chain 2ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should handle complex dependency graph 5ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Dependency Resolution > should detect missing dependencies 0ms
 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should shutdown all modules gracefully 3ms
stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
[EventBus] Subscription removed: test.unsubscribe (sub_1757789329576_t73kkc6bq)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
[EventBus] Processing event test.unsubscribe: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off()
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:49)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:49)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:49)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:49)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:49) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:49)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
ℹ️ [Security] New CSP nonce generated (03:48:49) { noncePrefix: [32m'onsrtjqz'[39m, timestamp: [32m'1757789329604'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:49)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:49)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:49) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:49) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:49) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:49) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:49) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:49) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Adding subscription to weak subscription manager for pattern: test.once.subscription
[EventBus] Subscription added: test.once.subscription (sub_1757789329606_0c7vismx7) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:49) {
  subscriptionId: [32m'sub_1757789329606_0c7vismx7'[39m,
  pattern: [32m'test.once.subscription'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Processing event test.once.subscription: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Subscription removed: test.once.subscription (sub_1757789329606_0c7vismx7)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Processing event test.once.subscription: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Processing event test.once.subscription: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Subscription removed: test.once.subscription (sub_1757789329606_0c7vismx7)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:49)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:49)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:49)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:49)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:49) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:49)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
ℹ️ [Security] New CSP nonce generated (03:48:49) { noncePrefix: [32m'0514zlx6'[39m, timestamp: [32m'1757789329640'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:49)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:49)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:49) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:49) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:49) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:49) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:49) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:49) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
[EventBus] Adding subscription to weak subscription manager for pattern: test.subscription.options

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:49) {
  subscriptionId: [32m'sub_1757789329641_ask9yn8fe'[39m,
  pattern: [32m'test.subscription.options'[39m,
  moduleId: [32m'test-module'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
[EventBus] Processing event test.subscription.options: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
[EventBus] Subscription removed: test.subscription.options (sub_1757789329641_ask9yn8fe)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:49)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:49)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:49)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:49)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:49) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:49)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
ℹ️ [Security] New CSP nonce generated (03:48:49) { noncePrefix: [32m'qz4tueet'[39m, timestamp: [32m'1757789329655'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:49)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:49)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:49) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:49) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:49) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:49) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:49) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:49) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
[EventBus] Adding subscription to weak subscription manager for pattern: test.wildcard.*
[EventBus] Subscription added: test.wildcard.* (sub_1757789329656_05u31sm4e) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:49) {
  subscriptionId: [32m'sub_1757789329656_05u31sm4e'[39m,
  pattern: [32m'test.wildcard.*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
[EventBus] Processing event test.wildcard.one: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
[EventBus] Processing event test.wildcard.two: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
[EventBus] Processing event test.different.pattern: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should prioritize stronger deduplication strategies
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'768b1891...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should prioritize stronger deduplication strategies
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'768b1891...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should prioritize stronger deduplication strategies
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should prioritize stronger deduplication strategies
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'14d728bc...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should prioritize stronger deduplication strategies
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'14d728bc...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should prioritize stronger deduplication strategies
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should prioritize stronger deduplication strategies
[DeduplicationManager] isDuplicate called for pattern: test.priority.dedup, windowMs: 300000

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should prioritize stronger deduplication strategies
[DeduplicationManager] Operation TTL Check: timeDiff=1ms, windowMs=300000ms, withinWindow=true
[DeduplicationManager] Duplicate found by operation_id: priority-op-123

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should store and retrieve metadata
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'58a75b82...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should store and retrieve metadata
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'58a75b82...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should store and retrieve metadata
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should store and retrieve metadata
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'326bf8b2...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should store and retrieve metadata
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'326bf8b2...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should store and retrieve metadata
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should not detect semantic duplicates outside time window 165ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Duplicate Detection > should prioritize stronger deduplication strategies 2ms
stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should store and retrieve metadata
[DeduplicationManager] isDuplicate called for pattern: test.metadata.storage, windowMs: 300000

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should store and retrieve metadata
[DeduplicationManager] Operation TTL Check: timeDiff=1ms, windowMs=300000ms, withinWindow=true
[DeduplicationManager] Duplicate found by operation_id: 1757789329696_d40f0130

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'cca4b21c...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'cca4b21c...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'7ad9b0e0...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'7ad9b0e0...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
[DeduplicationManager] isDuplicate called for pattern: test.metadata.ttl, windowMs: 50

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
[DeduplicationManager] Operation TTL Check: timeDiff=1ms, windowMs=50ms, withinWindow=true
[DeduplicationManager] Duplicate found by operation_id: 1757789329697_49ddd21b

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
[EventBus] Subscription removed: test.wildcard.* (sub_1757789329656_05u31sm4e)

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should unsubscribe properly with off() 29ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support once() for single-use subscriptions 35ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Subscription > should support subscription options 15ms
stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:49)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:49)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:49)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:49)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:49) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:49)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
ℹ️ [Security] New CSP nonce generated (03:48:49) { noncePrefix: [32m'32jxgalt'[39m, timestamp: [32m'1757789329703'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:49)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:49)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:49) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:49) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:49) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:49) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:49) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:49) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Adding subscription to weak subscription manager for pattern: test.filtered.events
[EventBus] Subscription added: test.filtered.events (sub_1757789329705_nlyuu3kfc) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:49) {
  subscriptionId: [32m'sub_1757789329705_nlyuu3kfc'[39m,
  pattern: [32m'test.filtered.events'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Processing event test.filtered.events: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Processing event test.filtered.events: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Processing event test.filtered.events: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Processing event test.filtered.events: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Subscription removed: test.filtered.events (sub_1757789329705_nlyuu3kfc)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:49)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:49)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:49)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:49)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:49) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:49)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
ℹ️ [Security] New CSP nonce generated (03:48:49) { noncePrefix: [32m'dqb4n4zp'[39m, timestamp: [32m'1757789329771'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:49)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:49)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:49) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:49) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:49) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:49) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:49) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:49) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
[EventBus] Adding subscription to weak subscription manager for pattern: test.wait.specific
[EventBus] Subscription added: test.wait.specific (sub_1757789329773_2zhud4bpg) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:49) {
  subscriptionId: [32m'sub_1757789329773_2zhud4bpg'[39m,
  pattern: [32m'test.wait.specific'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should store and retrieve metadata 2ms
stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
[DeduplicationManager] isDuplicate called for pattern: test.metadata.ttl, windowMs: 50

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
[DeduplicationManager] Operation TTL Check: timeDiff=110ms, windowMs=50ms, withinWindow=false
[DeduplicationManager] Operation found but outside window: timeDiff=110ms > windowMs=50ms

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL
[DeduplicationManager] Content TTL Check: timeDiff=110ms, windowMs=50ms, withinWindow=false
[DeduplicationManager] Content found but outside window: timeDiff=110ms > windowMs=50ms

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle storage cleanup
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'506b7ef1...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle storage cleanup
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'506b7ef1...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle storage cleanup
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle storage cleanup
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'22fa8af0...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle storage cleanup
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'22fa8af0...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle storage cleanup
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle order creation deduplication
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'9c974dd0...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle order creation deduplication
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'9c974dd0...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle order creation deduplication
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle order creation deduplication
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'b6d2a8e5...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle order creation deduplication
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'b6d2a8e5...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle order creation deduplication
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle order creation deduplication
[DeduplicationManager] isDuplicate called for pattern: sales.order.created, windowMs: 300000

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle order creation deduplication
[DeduplicationManager] Operation TTL Check: timeDiff=1ms, windowMs=300000ms, withinWindow=true
[DeduplicationManager] Duplicate found by operation_id: order-create-op-123

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle payment processing deduplication
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'f5c92bd9...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle payment processing deduplication
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'f5c92bd9...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle payment processing deduplication
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle payment processing deduplication
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'95240893...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle payment processing deduplication
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'95240893...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle payment processing deduplication
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle payment processing deduplication
[DeduplicationManager] isDuplicate called for pattern: payments.payment.processed, windowMs: 300000

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle payment processing deduplication
[DeduplicationManager] Operation TTL Check: timeDiff=1ms, windowMs=300000ms, withinWindow=true
[DeduplicationManager] Duplicate found by operation_id: payment-process-456

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle stock update deduplication
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'5d7eff7c...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle stock update deduplication
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'5d7eff7c...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle stock update deduplication
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle stock update deduplication
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'32510053...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle stock update deduplication
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'32510053...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle stock update deduplication
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle stock update deduplication
[DeduplicationManager] isDuplicate called for pattern: inventory.stock.updated, windowMs: 300000

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle stock update deduplication
[DeduplicationManager] Content TTL Check: timeDiff=0ms, windowMs=300000ms, withinWindow=true

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should allow legitimate duplicate events outside time window
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'dbdb86f8...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should allow legitimate duplicate events outside time window
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'dbdb86f8...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should allow legitimate duplicate events outside time window
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should allow legitimate duplicate events outside time window
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'ac7aee30...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should allow legitimate duplicate events outside time window
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'ac7aee30...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should allow legitimate duplicate events outside time window
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should allow legitimate duplicate events outside time window
[DeduplicationManager] isDuplicate called for pattern: staff.clock.in, windowMs: 300000

stdout | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should allow legitimate duplicate events outside time window
[DeduplicationManager] Content TTL Check: timeDiff=28800000ms, windowMs=300000ms, withinWindow=false
[DeduplicationManager] Content found but outside window: timeDiff=28800000ms > windowMs=300000ms

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle null and undefined values in payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'fa41e9c8...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle null and undefined values in payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'fa41e9c8...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle null and undefined values in payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle null and undefined values in payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'dc7f18d6...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle null and undefined values in payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'dc7f18d6...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle null and undefined values in payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle very large payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'ca924985...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle very large payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'ca924985...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle very large payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle very large payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'c2dd8412...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle very large payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'c2dd8412...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle very large payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle circular references in payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'63bdc281...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle circular references in payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'63bdc281...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle circular references in payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle circular references in payloads
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'45f54507...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle circular references in payloads
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'45f54507...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle circular references in payloads
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle events with missing metadata fields
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'5094d3d8...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle events with missing metadata fields
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'5094d3d8...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle events with missing metadata fields
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle events with missing metadata fields
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'88085247...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle events with missing metadata fields
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'88085247...'[39m }

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support wildcard patterns 48ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Event Filtering > should support event filters in subscriptions 68ms
stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle events with missing metadata fields
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should respect deduplication window configuration
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'fb29050a...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should respect deduplication window configuration
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'fb29050a...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should respect deduplication window configuration
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should respect deduplication window configuration
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'b4a90b0c...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should respect deduplication window configuration
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'b4a90b0c...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should respect deduplication window configuration
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should disable deduplication when configured
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'05898a79...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should disable deduplication when configured
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'05898a79...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should disable deduplication when configured
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should disable deduplication when configured
❌ [Security] [SECURITY] ANOMALY: Client ID stored securely (03:48:49) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'b8b98229...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should disable deduplication when configured
❌ [Security] [SECURITY] ANOMALY: New client ID generated (03:48:49) { reason: [32m'No valid existing ID found'[39m, newId: [32m'b8b98229...'[39m }

stderr | src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should disable deduplication when configured
❌ [Security] [SECURITY] ANOMALY: DeduplicationManager initialized with secure client ID (03:48:49)

 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle metadata with TTL 112ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Metadata Storage > should handle storage cleanup 2ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle order creation deduplication 2ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle payment processing deduplication 2ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should handle stock update deduplication 2ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Business Scenarios > should allow legitimate duplicate events outside time window 2ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle null and undefined values in payloads 1ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle very large payloads 2ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle circular references in payloads 1ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Edge Cases > should handle events with missing metadata fields 2ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should respect deduplication window configuration 2ms
 ✓ src/lib/events/__tests__/unit/DeduplicationManager.test.ts > DeduplicationManager > Configuration > should disable deduplication when configured 1ms
stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
[EventBus] Processing event test.wait.specific: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
[EventBus] Subscription removed: test.wait.specific (sub_1757789329773_2zhud4bpg)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:49)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:49)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:49)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:49)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:49) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:49)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
ℹ️ [Security] New CSP nonce generated (03:48:49) { noncePrefix: [32m's78b5duv'[39m, timestamp: [32m'1757789329836'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:49)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:49)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:49) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:49) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:49) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:49) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:49) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:49) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
[EventBus] Adding subscription to weak subscription manager for pattern: test.wait.timeout
[EventBus] Subscription added: test.wait.timeout (sub_1757789329837_o0ykit4cd) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:49) {
  subscriptionId: [32m'sub_1757789329837_o0ykit4cd'[39m,
  pattern: [32m'test.wait.timeout'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should wait for specific event 64ms
stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
[EventBus] Subscription removed: test.wait.timeout (sub_1757789329837_o0ykit4cd)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:49)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:49)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:49)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:49)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:49)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:49) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:49)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
ℹ️ [Security] New CSP nonce generated (03:48:49) { noncePrefix: [32m'8t3m0o48'[39m, timestamp: [32m'1757789329950'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:49)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:49)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:49) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:49) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:49) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:49) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:49) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:49) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
[EventBus] Adding subscription to weak subscription manager for pattern: test.wait.filtered
[EventBus] Subscription added: test.wait.filtered (sub_1757789329952_y5ygm9kam) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:49) {
  subscriptionId: [32m'sub_1757789329952_y5ygm9kam'[39m,
  pattern: [32m'test.wait.filtered'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
[EventBus] Processing event test.wait.filtered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
[EventBus] Processing event test.wait.filtered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
[EventBus] Subscription removed: test.wait.filtered (sub_1757789329952_y5ygm9kam)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:50)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:50)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:50)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:50) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:50)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
ℹ️ [Security] New CSP nonce generated (03:48:50) { noncePrefix: [32m'qrm31nz7'[39m, timestamp: [32m'1757789330008'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:50)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:50)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:50) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:50) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:50) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:50) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:50) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:50) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
[EventBus] Adding subscription to weak subscription manager for pattern: test.error.handling
[EventBus] Subscription added: test.error.handling (sub_1757789330009_v2isewq69) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: test.error.handling
[EventBus] Subscription added: test.error.handling (sub_1757789330009_u0ltct0ov) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: global.eventbus.handler-error
[EventBus] Subscription added: global.eventbus.handler-error (sub_1757789330009_zgens52p8) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:50) {
  subscriptionId: [32m'sub_1757789330009_v2isewq69'[39m,
  pattern: [32m'test.error.handling'[39m,
  moduleId: [32m'anonymous'[39m
}
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:50) {
  subscriptionId: [32m'sub_1757789330009_u0ltct0ov'[39m,
  pattern: [32m'test.error.handling'[39m,
  moduleId: [32m'anonymous'[39m
}
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:50) {
  subscriptionId: [32m'sub_1757789330009_zgens52p8'[39m,
  pattern: [32m'global.eventbus.handler-error'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
[EventBus] Processing event test.error.handling: Found 2 matching subscriptions

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
❌ [Security] [SECURITY] THREAT: Handler error in subscription sub_1757789330009_v2isewq69 (03:48:50) {
  subscriptionId: [32m'sub_1757789330009_v2isewq69'[39m,
  pattern: [32m'test.error.handling'[39m,
  moduleId: [32m'anonymous'[39m,
  error: [32m'Handler error'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
[EventBus] Processing event global.eventbus.handler-error: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
[EventBus] Subscription removed: test.error.handling (sub_1757789330009_v2isewq69)
[EventBus] Subscription removed: test.error.handling (sub_1757789330009_u0ltct0ov)
[EventBus] Subscription removed: global.eventbus.handler-error (sub_1757789330009_zgens52p8)

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should timeout when event is not received 114ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > waitFor functionality > should support filters in waitFor 58ms
stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:50)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:50)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:50)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:50) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:50)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should validate event patterns
ℹ️ [Security] New CSP nonce generated (03:48:50) { noncePrefix: [32m'din14uh6'[39m, timestamp: [32m'1757789330049'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:50)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:50)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should validate event patterns
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:50) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:50) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:50) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:50) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:50) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should validate event patterns
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:50) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should validate event patterns
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should validate event patterns
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should validate event patterns
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:50)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:50)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:50)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:50) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:50)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads
ℹ️ [Security] New CSP nonce generated (03:48:50) { noncePrefix: [32m'a88io09d'[39m, timestamp: [32m'1757789330052'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:50)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:50)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:50) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:50) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:50) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:50) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:50) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:50) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads
[EventBus] Processing event test.large.payload: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:50)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:50)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:50)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:50) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:50)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
ℹ️ [Security] New CSP nonce generated (03:48:50) { noncePrefix: [32m'lyakcpoi'[39m, timestamp: [32m'1757789330063'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:50)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:50)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:50) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:50) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:50) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:50) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:50) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:50) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:50) {
  subscriptionId: [32m'sub_1757789330067_6l596jhtx'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:50) {
  subscriptionId: [32m'sub_1757789330067_dhmuc1sku'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
ℹ️ [EventBus] Module registered (03:48:50) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:50) {
  subscriptionId: [32m'sub_1757789330073_y5sabrlq4'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
ℹ️ [EventBus] Module registered (03:48:50) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:50) {
  subscriptionId: [32m'sub_1757789330075_s2fqlw21h'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:50) {
  subscriptionId: [32m'sub_1757789330075_xl0i244zl'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
ℹ️ [EventBus] Module registered (03:48:50) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Error unsubscribing sub_1757789330075_s2fqlw21h: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789330075_xl0i244zl: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Error unsubscribing sub_1757789330073_y5sabrlq4: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Error unsubscribing sub_1757789330067_6l596jhtx: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789330067_dhmuc1sku: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:50)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:50)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:50)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:50) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:50)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
ℹ️ [Security] New CSP nonce generated (03:48:50) { noncePrefix: [32m'mlsgvk5z'[39m, timestamp: [32m'1757789330100'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:50)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:50)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:50) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:50) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:50) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:50) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:50) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:50) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:50) {
  subscriptionId: [32m'sub_1757789330102_aefxd40cq'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:50) {
  subscriptionId: [32m'sub_1757789330102_ijvkrdcbm'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
ℹ️ [EventBus] Module registered (03:48:50) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:50) {
  subscriptionId: [32m'sub_1757789330105_9m9bm1ajy'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
ℹ️ [EventBus] Module registered (03:48:50) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:50) {
  subscriptionId: [32m'sub_1757789330106_a434z0lnu'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:50) {
  subscriptionId: [32m'sub_1757789330107_xiepb873m'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
ℹ️ [EventBus] Module registered (03:48:50) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Error unsubscribing sub_1757789330106_a434z0lnu: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789330107_xiepb873m: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Error unsubscribing sub_1757789330105_9m9bm1ajy: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Error unsubscribing sub_1757789330102_aefxd40cq: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789330102_ijvkrdcbm: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:50)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:50)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:50)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:50) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:50)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
ℹ️ [Security] New CSP nonce generated (03:48:50) { noncePrefix: [32m'r3lbaovw'[39m, timestamp: [32m'1757789330126'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:50)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:50)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:50) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:50) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:50) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:50) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:50) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:50) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:50) {
  subscriptionId: [32m'sub_1757789330128_8ysa4xy98'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:50) {
  subscriptionId: [32m'sub_1757789330128_tuqe9vxvu'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
ℹ️ [EventBus] Module registered (03:48:50) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[ModuleRegistry] Error unsubscribing sub_1757789330128_8ysa4xy98: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789330128_tuqe9vxvu: RangeError: Maximum call stack size exceeded
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:201:3[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[EventBus] Processing event global.eventbus.module-deactivated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:50)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:50)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:50)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:50) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:50)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
ℹ️ [Security] New CSP nonce generated (03:48:50) { noncePrefix: [32m'xajgu91s'[39m, timestamp: [32m'1757789330136'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:50)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:50)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:50) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:50) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:50) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:50) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:50) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:50) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
[EventBus] Processing event test.metrics.1: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
[EventBus] Processing event test.metrics.2: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
[EventBus] Processing event test.metrics.3: Found 0 matching subscriptions

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle errors in event handlers gracefully 41ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should validate event patterns 3ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Error Handling > should handle large payloads 11ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should register modules successfully 37ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should handle module dependencies 27ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Module Integration > should deactivate modules properly 10ms
stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:50)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:50)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:50)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:50) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:50)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
ℹ️ [Security] New CSP nonce generated (03:48:50) { noncePrefix: [32m'ayqtufmo'[39m, timestamp: [32m'1757789330153'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:50)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:50)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:50) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:50) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:50) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:50) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:50) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:50) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
[EventBus] Processing event test.pattern.tracking.1: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
[EventBus] Processing event test.pattern.tracking.1: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
[EventBus] Processing event test.pattern.tracking.2: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:50)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:50)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:50)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:50) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:50)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
ℹ️ [Security] New CSP nonce generated (03:48:50) { noncePrefix: [32m'2dzte7g9'[39m, timestamp: [32m'1757789330155'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:50)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:50)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:50) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:50) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:50) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:50) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:50) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:50) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
❌ [Security] [SECURITY] RateLimiter initialized (03:48:50) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:50) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:50) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:50) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
ℹ️ [Security] New CSP nonce generated (03:48:50) { noncePrefix: [32m'zmndwoa4'[39m, timestamp: [32m'1757789330157'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:50)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:50)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:50) { isInitialized: [32m'true'[39m }
[EventBus] Adding subscription to weak subscription manager for pattern: test.config.timeout
[EventBus] Subscription added: test.config.timeout (sub_1757789330157_vyta1w75x) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:50) {
  subscriptionId: [32m'sub_1757789330157_vyta1w75x'[39m,
  pattern: [32m'test.config.timeout'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should collect basic metrics 17ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Metrics and Monitoring > should track event patterns 3ms
stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
[EventBus] Subscription removed: test.config.timeout (sub_1757789330157_vyta1w75x)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:50)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:50)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:50)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:50) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:50)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:50)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:50)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:50)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:50) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:50)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle sales order events
ℹ️ [Security] New CSP nonce generated (03:48:50) { noncePrefix: [32m'8wmpte4q'[39m, timestamp: [32m'1757789330368'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:50)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:50)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle sales order events
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:50) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:50) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:50) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:50) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:50) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle sales order events
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:50) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle sales order events
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle sales order events
[EventBus] Processing event sales.order.created: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle sales order events
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle sales order events
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle sales order events
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:50)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:50)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:50)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:50) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:50)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle inventory events
ℹ️ [Security] New CSP nonce generated (03:48:50) { noncePrefix: [32m'ph61rvvj'[39m, timestamp: [32m'1757789330371'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:50)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:50)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle inventory events
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:50) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:50) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:50) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:50) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:50) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle inventory events
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:50) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle inventory events
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle inventory events
[EventBus] Processing event inventory.stock.low: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle inventory events
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle inventory events
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle inventory events
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:50)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:50)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:50)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:50) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:50)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle staff events
ℹ️ [Security] New CSP nonce generated (03:48:50) { noncePrefix: [32m'vg1p055k'[39m, timestamp: [32m'1757789330373'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:50)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:50)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle staff events
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:50) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:50) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:50) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:50) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:50) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle staff events
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:50) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle staff events
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle staff events
[EventBus] Processing event staff.clock.in: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle staff events
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle staff events
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle staff events
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:50)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:50)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:50)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:50) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:50)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
ℹ️ [Security] New CSP nonce generated (03:48:50) { noncePrefix: [32m'ka9ebbn8'[39m, timestamp: [32m'1757789330376'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:50)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:50)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:50) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:50) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:50) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:50) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:50) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:50) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
[EventBus] Adding subscription to weak subscription manager for pattern: test.shutdown
[EventBus] Subscription added: test.shutdown (sub_1757789330377_fq9x7o9u9) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:50) {
  subscriptionId: [32m'sub_1757789330377_fq9x7o9u9'[39m,
  pattern: [32m'test.shutdown'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
[EventBus] Processing event test.shutdown: Found 1 matching subscriptions

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Configuration > should respect configuration settings 213ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle sales order events 3ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle inventory events 3ms
 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Business Event Templates > should handle staff events 3ms
stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:50)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:50)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:50)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:50) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:50)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:50)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:50)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:50)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:50)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:50) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:50)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
ℹ️ [Security] New CSP nonce generated (03:48:50) { noncePrefix: [32m'qb24lfxe'[39m, timestamp: [32m'1757789330479'[39m }
ℹ️ [EventBus] Initializing enterprise event bus... (03:48:50)
ℹ️ [Security] Encryption disabled - skipping initialization (03:48:50)

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
❌ [Security] [SECURITY] ANOMALY: PatternCache initialized (03:48:50) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
❌ [Security] [SECURITY] RateLimiter initialized (03:48:50) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
❌ [Security] [SECURITY] ContentSecurityPolicy initialized (03:48:50) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:48:50) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
❌ [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:48:50) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
ℹ️ [EventBus] Enterprise event bus initialized successfully (03:48:50) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
[EventBus] Adding subscription to weak subscription manager for pattern: test.shutdown.timeout
[EventBus] Subscription added: test.shutdown.timeout (sub_1757789330480_o8wcsrro7) [moduleId: anonymous]

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
❌ [Security] [SECURITY] ANOMALY: Weak subscription added (03:48:50) {
  subscriptionId: [32m'sub_1757789330480_o8wcsrro7'[39m,
  pattern: [32m'test.shutdown.timeout'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
[EventBus] Processing event test.shutdown.timeout: Found 1 matching subscriptions

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should shutdown gracefully 103ms
stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Module 'test-inventory' deactivated successfully

stdout | src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long
[ModuleRegistry] Graceful shutdown completed

 ✓ src/lib/events/__tests__/unit/ModuleRegistry.test.ts > ModuleRegistry > Graceful Shutdown > should timeout graceful shutdown if modules take too long 2009ms
stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
❌ [Security] [SECURITY] ANOMALY: Slow handler execution detected (03:48:52) {
  handlerId: [32m'sub_1757789330480_o8wcsrro7'[39m,
  pattern: [32m'test.shutdown.timeout'[39m,
  executionTimeMs: [32m'2005.4342000000006'[39m,
  threshold: [32m'1000'[39m
}

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:52)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:52)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:52)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:52)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:52)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:52) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:52)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
❌ [Security] [SECURITY] EncryptedEventStore destroyed (03:48:52)
❌ [Security] [SECURITY] RateLimiter destroyed (03:48:52)
❌ [Security] [SECURITY] ContentSecurityPolicy destroyed (03:48:52)
❌ [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:48:52)
❌ [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:48:52)
❌ [Security] [SECURITY] ANOMALY: PatternCache cleared (03:48:52) { clearedEntries: [32m'0'[39m }
❌ [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:48:52)

stdout | src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long
[EventBus] Graceful shutdown completed

 ✓ src/lib/events/__tests__/unit/EventBus.test.ts > EventBus Core Functionality > Graceful Shutdown > should timeout graceful shutdown if handlers take too long 2009ms

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 1 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/lib/events/__tests__/unit/Types.test.ts > Modern TypeScript Types V3 > Event Pattern Validation > should reject invalid event patterns
AssertionError: expected true to be false // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- false[39m
[31m+ true[39m

 ❯ src/lib/events/__tests__/unit/Types.test.ts:163:50
    161|       // Invalid format
    162|       expect(isValidEventPattern('sales')).toBe(false);
    163|       expect(isValidEventPattern('sales.order')).toBe(false);
       |                                                  ^
    164|       expect(isValidEventPattern('sales.order.created.extra')).toBe(fa…
    165|       expect(isValidEventPattern('')).toBe(false);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/1]⎯


 Test Files  1 failed | 5 passed (6)
      Tests  1 failed | 157 passed | 1 skipped (159)
   Start at  15:48:45
   Duration  6.54s (transform 946ms, setup 2.33s, collect 2.20s, tests 5.59s, environment 11.75s, prepare 1.47s)

