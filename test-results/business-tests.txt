
 RUN  v3.2.4 I:/Programacion/Proyectos/g-mini

stdout | src/lib/events/__tests__/business/staff-management.test.ts
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:16) { noncePrefix: [32m'gafatfyq'[39m, timestamp: [32m'1757798056282'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:16)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/__tests__/business/staff-management.test.ts
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:16) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:16) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:16) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:16) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:16) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:16) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/business/staff-management.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:16) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'b816db86...'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (06:14:16) { reason: [32m'No valid existing ID found'[39m, newId: [32m'b816db86...'[39m }

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:16) { noncePrefix: [32m'k6u9uv0z'[39m, timestamp: [32m'1757798056309'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:16)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:16)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:16) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:16) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:16) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:16) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:16) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056316_dyrfopbnm'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056317_pgw18fbhq'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m, [32m'test-scheduling'[39m ]
[ModuleRegistry] Module 'test-scheduling' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Activating module 'test-scheduling'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Directly activating module 'test-scheduling'...
[TestSchedulingModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Registering 2 subscriptions for module 'test-scheduling'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Module health changed: test-scheduling -> active
[ModuleRegistry] Module 'test-scheduling' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Module 'test-scheduling' activated directly
[EventBus] Module activated: test-scheduling
[EventBus] Auto-registering handlers for module: test-scheduling
[EventBus] Auto-registered handler: test-scheduling.recordShiftAssignment for pattern: staff.shift.assigned
[EventBus] Auto-registered handler: test-scheduling.processShiftSwap for pattern: staff.shift.swapped
[EventBus] Auto-registered 2/2 handlers for module: test-scheduling

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Adding subscription to weak subscription manager for pattern: staff.shift.assigned
[EventBus] Adding subscription to weak subscription manager for pattern: staff.shift.swapped

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056320_i8qio3is8'[39m,
  pattern: [32m'staff.shift.assigned'[39m,
  moduleId: [32m'test-scheduling'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056321_6v2pj7lnt'[39m,
  pattern: [32m'staff.shift.swapped'[39m,
  moduleId: [32m'test-scheduling'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-scheduling'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Scheduling Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Adding subscription to weak subscription manager for pattern: **
[EventBus] Subscription added: ** (sub_1757798056322_lsz2gc9z6) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056322_lsz2gc9z6'[39m,
  pattern: [32m'**'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event staff.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event staff.documents.submitted: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event staff.training.assigned: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event staff.training.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:16) { noncePrefix: [32m'lnr0acco'[39m, timestamp: [32m'1757798056327'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:16)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stdout | src/lib/events/__tests__/business/payment-processing.test.ts
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:16) { noncePrefix: [32m'x61rucue'[39m, timestamp: [32m'1757798056326'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:16)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event staff.training.completed: Found 1 matching subscriptions

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:16) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:16) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:16) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:16) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:16) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:16) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/business/payment-processing.test.ts
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:16) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:16) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:16) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:16) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:16) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:16) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event staff.training.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:16) { noncePrefix: [32m'eo8cad4n'[39m, timestamp: [32m'1757798056326'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:16)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:16) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (06:14:16) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:16) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:16) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:16) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:16) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event staff.equipment.assigned: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event scheduling.staff.assigned: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event staff.onboarding.completed: Found 1 matching subscriptions

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:16) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'b4fc565a...'[39m }

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (06:14:16) { reason: [32m'No valid existing ID found'[39m, newId: [32m'b4fc565a...'[39m }

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:16) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'3122563a...'[39m }

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (06:14:16) { reason: [32m'No valid existing ID found'[39m, newId: [32m'3122563a...'[39m }

stderr | src/lib/events/__tests__/business/payment-processing.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (06:14:16) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'fdfaed83...'[39m }

stderr | src/lib/events/__tests__/business/payment-processing.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (06:14:16) { reason: [32m'No valid existing ID found'[39m, newId: [32m'fdfaed83...'[39m }

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:16) { noncePrefix: [32m'hhgl0pnn'[39m, timestamp: [32m'1757798056339'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:16)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:16)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:16) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:16) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:16) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:16) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:16) { noncePrefix: [32m'rnudeq1x'[39m, timestamp: [32m'1757798056341'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:16)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:16)

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:16) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:16) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:16) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:16) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:16) { noncePrefix: [32m'ppvhnwej'[39m, timestamp: [32m'1757798056341'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:16)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:16)

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:16) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:16) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:16) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:16) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:16) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:16) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:16) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056346_nf9oal810'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056347_mirt99g6w'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056348_1zbfqpdgj'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056348_ud8otc63i'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056348_atu3ux61v'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056348_yqvv7udg9'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Activating module 'test-customers'...

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056350_8dwko7ekk'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056350_kmnwuglgg'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056350_5bkmxhbah'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056351_kmieoebes'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757798056352_u9q2fwyef) [moduleId: anonymous]

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056352_u9q2fwyef'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Activating module 'test-sales'...

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056352_q0d4hud05'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056353_t0h7yrrzj'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056354_fptcf3vag'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Processing event payment.cash.received: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Placeholder: Module test-payment handler test-payment.processCashPayment called for payment.cash.received

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056354_ntbhgjgbm'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056354_hx58n0uvh'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Processing event payment.change.calculated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757798056355_sxp22z07o) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056355_sxp22z07o'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Processing event fiscal.receipt.generated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757798056355_cya0m80h0) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.check
[EventBus] Subscription added: inventory.stock.check (sub_1757798056355_423y4q76b) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.reserved
[EventBus] Subscription added: inventory.stock.reserved (sub_1757798056356_6li5q0to4) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: payments.payment.requested
[EventBus] Subscription added: payments.payment.requested (sub_1757798056356_cepkm4ahp) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: payments.payment.processed
[EventBus] Subscription added: payments.payment.processed (sub_1757798056356_15eyt2e80) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.order.received
[EventBus] Subscription added: kitchen.order.received (sub_1757798056356_4kb5cmboo) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.order.completed
[EventBus] Subscription added: kitchen.order.completed (sub_1757798056356_nz4f8tqg6) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.fulfilled
[EventBus] Subscription added: sales.order.fulfilled (sub_1757798056357_r5port6or) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: customers.notification.sent
[EventBus] Subscription added: customers.notification.sent (sub_1757798056357_i3nn2wgyp) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056355_cya0m80h0'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056355_423y4q76b'[39m,
  pattern: [32m'inventory.stock.check'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056356_6li5q0to4'[39m,
  pattern: [32m'inventory.stock.reserved'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056356_cepkm4ahp'[39m,
  pattern: [32m'payments.payment.requested'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056356_15eyt2e80'[39m,
  pattern: [32m'payments.payment.processed'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056356_4kb5cmboo'[39m,
  pattern: [32m'kitchen.order.received'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056356_nz4f8tqg6'[39m,
  pattern: [32m'kitchen.order.completed'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056357_r5port6or'[39m,
  pattern: [32m'sales.order.fulfilled'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056357_i3nn2wgyp'[39m,
  pattern: [32m'customers.notification.sent'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Processing event payment.cash_register.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757798056356_ie4o69nhr) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Subscription added: inventory.stock.low (sub_1757798056356_pofnp6jta) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.reorder.automatic
[EventBus] Subscription added: inventory.reorder.automatic (sub_1757798056356_r0ctkl66y) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056356_ie4o69nhr'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056356_pofnp6jta'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056356_r0ctkl66y'[39m,
  pattern: [32m'inventory.reorder.automatic'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Processing event inventory.stock.updated: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[TestCustomers] Updated activity for customer CUST-VIP-001

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event inventory.stock.check: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Processing event inventory.stock.low: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[TestSales] Handling low stock for Papas Gourmet

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event inventory.stock.reserved: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Processing event inventory.reorder.automatic: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event inventory.stock.check: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Processing event suppliers.order.placed: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event inventory.stock.reserved: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event payments.payment.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event payments.payment.processed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event kitchen.order.received: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:16) { noncePrefix: [32m'z4xy9hng'[39m, timestamp: [32m'1757798056440'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:16)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:16)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:16) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:16) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:16) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:16) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:16) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056442_4r029jvhc'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056443_a454un8fm'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757798056444_6hq2nzn8w) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056444_6hq2nzn8w'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[EventBus] Processing event staff.training.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[EventBus] Processing event staff.training.remedial.assigned: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[EventBus] Processing event staff.training.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event kitchen.order.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event sales.order.fulfilled: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event customers.notification.sent: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:16) { noncePrefix: [32m'qvngmhcv'[39m, timestamp: [32m'1757798056473'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:16)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:16)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:16) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:16) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:16) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:16) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:16) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056475_zil6azejo'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056476_fnxo5i9xa'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056478_t7aqnjs0r'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056478_045hhsl5t'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056478_65s84vcfa'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757798056479_880ocaib4) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056479_880ocaib4'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Processing event payment.card.info_captured: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Processing event payment.card.authorization_requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Processing event payment.card.authorized: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Placeholder: Module test-payment handler test-payment.processCardPayment called for payment.card.authorized

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Processing event payment.card.captured: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:16) { noncePrefix: [32m'ojaqh2zu'[39m, timestamp: [32m'1757798056500'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:16)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:16)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:16) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:16) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:16) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:16) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:16) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056503_7buh0jcjy'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056503_3zlfz1ztw'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757798056504_q7gcwkzgu) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056504_q7gcwkzgu'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[EventBus] Processing event staff.performance.review.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[EventBus] Processing event staff.performance.self_assessment.submitted: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[EventBus] Processing event staff.performance.manager_evaluation.submitted: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[EventBus] Processing event staff.performance.review.completed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process 132ms
 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation 60ms
 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow 134ms
stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:16) { noncePrefix: [32m'5cnjicxu'[39m, timestamp: [32m'1757798056595'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:16)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:16)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:16) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:16) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:16) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:16) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:16) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056597_jnttn4nva'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056598_rcbqlxag5'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056599_jafseen62'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056600_kqdx6728n'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056600_f8obs4s8k'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757798056601_jbg2slggz) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056601_jbg2slggz'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Processing event payment.nfc.device_detected: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Processing event payment.nfc.authenticated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Processing event payment.nfc.processed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:16) { noncePrefix: [32m'okiyri6d'[39m, timestamp: [32m'1757798056624'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:16)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:16)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:16) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:16) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:16) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:16) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:16) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056626_10qc8xqe3'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056627_gf1grf5dx'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757798056628_xi8xryv9z) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056628_xi8xryv9z'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Processing event staff.performance.concern.identified: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Processing event staff.pip.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Processing event staff.pip.checkin: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Processing event staff.pip.checkin: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Processing event staff.pip.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:16) { noncePrefix: [32m'pyi74gqr'[39m, timestamp: [32m'1757798056659'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:16)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:16)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:16) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:16) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:16) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:16) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:16) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056662_lx7bnia4l'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056662_pi0zhiya5'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056664_rq3xcyu0e'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056664_x806qomhl'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056664_yyvuhakew'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757798056665_0ffw3gpvj) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056665_0ffw3gpvj'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event payment.split.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event payment.cash.received: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Placeholder: Module test-payment handler test-payment.processCashPayment called for payment.cash.received

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event payment.card.authorized: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Placeholder: Module test-payment handler test-payment.processCardPayment called for payment.card.authorized

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event payment.split.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Error unsubscribing sub_1757798056354_ntbhgjgbm: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798056354_hx58n0uvh: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization 122ms
 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow 63ms
stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Error unsubscribing sub_1757798056352_q0d4hud05: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Error unsubscribing sub_1757798056348_atu3ux61v: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798056348_yqvv7udg9: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:16)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:16)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:16)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:16)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:16)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:16) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:16)

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:16) { noncePrefix: [32m'jw0aqghq'[39m, timestamp: [32m'1757798056712'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:16)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:16)

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:16) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:16) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:16) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:16) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:16) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:16) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056714_9u2jw6rcu'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056715_24pt7vwfx'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056717_kh1o84cft'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056718_508f0j9qw'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056718_rqcayy12o'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757798056719_s44jx22gy) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056719_s44jx22gy'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.reservation.requested
[EventBus] Subscription added: inventory.stock.reservation.requested (sub_1757798056720_473jyqdas) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.reserved
[EventBus] Subscription added: inventory.stock.reserved (sub_1757798056720_ojpfaecs2) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.reservation.failed
[EventBus] Subscription added: inventory.stock.reservation.failed (sub_1757798056720_6fqqi2yto) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056720_473jyqdas'[39m,
  pattern: [32m'inventory.stock.reservation.requested'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056720_ojpfaecs2'[39m,
  pattern: [32m'inventory.stock.reserved'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056720_6fqqi2yto'[39m,
  pattern: [32m'inventory.stock.reservation.failed'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Processing event inventory.stock.reservation.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Processing event inventory.stock.reserved: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Processing event inventory.stock.reservation.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Processing event inventory.stock.reservation.failed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process 123ms
stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:16) { noncePrefix: [32m'czptrhh0'[39m, timestamp: [32m'1757798056735'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:16)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:16)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:16) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:16) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:16) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:16) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:16) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056737_k8i15ijt1'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056737_v2qyac32q'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m, [32m'test-scheduling'[39m ]
[ModuleRegistry] Module 'test-scheduling' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Activating module 'test-scheduling'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Directly activating module 'test-scheduling'...
[TestSchedulingModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Registering 2 subscriptions for module 'test-scheduling'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Module health changed: test-scheduling -> active
[ModuleRegistry] Module 'test-scheduling' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Module 'test-scheduling' activated directly
[EventBus] Module activated: test-scheduling
[EventBus] Auto-registering handlers for module: test-scheduling
[EventBus] Auto-registered handler: test-scheduling.recordShiftAssignment for pattern: staff.shift.assigned
[EventBus] Auto-registered handler: test-scheduling.processShiftSwap for pattern: staff.shift.swapped
[EventBus] Auto-registered 2/2 handlers for module: test-scheduling

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Adding subscription to weak subscription manager for pattern: staff.shift.assigned
[EventBus] Adding subscription to weak subscription manager for pattern: staff.shift.swapped

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056739_fk95qs0pk'[39m,
  pattern: [32m'staff.shift.assigned'[39m,
  moduleId: [32m'test-scheduling'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056739_abxr0khkd'[39m,
  pattern: [32m'staff.shift.swapped'[39m,
  moduleId: [32m'test-scheduling'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-scheduling'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Scheduling Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757798056740_ij05l8qjn) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056740_ij05l8qjn'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Processing event scheduling.shift_swap.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Processing event scheduling.shift_swap.approved: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Processing event scheduling.shift_swap.accepted: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Processing event scheduling.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:16) { noncePrefix: [32m'6rx2z9vf'[39m, timestamp: [32m'1757798056769'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:16)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:16)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:16) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:16) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:16) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:16) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:16) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056771_imdldltqf'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056772_wfyzg60sv'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056773_rucrvq6gf'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056773_s8yvfod9f'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056773_cyfuht9rj'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757798056774_pwm8rot3b) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056774_pwm8rot3b'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.group_split.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.card.authorized: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Placeholder: Module test-payment handler test-payment.processCardPayment called for payment.card.authorized

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.card.authorized: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Placeholder: Module test-payment handler test-payment.processCardPayment called for payment.card.authorized

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.card.authorized: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Placeholder: Module test-payment handler test-payment.processCardPayment called for payment.card.authorized

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.group_split.completed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering 372ms
 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP) 112ms
stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:16) { noncePrefix: [32m'vtgqcgix'[39m, timestamp: [32m'1757798056847'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:16)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:16)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:16) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:16) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:16) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:16) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:16) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056849_c3y8spbmq'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056849_pp2c8mjkz'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m, [32m'test-scheduling'[39m ]
[ModuleRegistry] Module 'test-scheduling' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Activating module 'test-scheduling'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Directly activating module 'test-scheduling'...
[TestSchedulingModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-scheduling'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Module health changed: test-scheduling -> active
[ModuleRegistry] Module 'test-scheduling' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Module 'test-scheduling' activated directly
[EventBus] Module activated: test-scheduling
[EventBus] Auto-registering handlers for module: test-scheduling
[EventBus] Auto-registered handler: test-scheduling.recordShiftAssignment for pattern: staff.shift.assigned
[EventBus] Auto-registered handler: test-scheduling.processShiftSwap for pattern: staff.shift.swapped
[EventBus] Auto-registered 2/2 handlers for module: test-scheduling

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Adding subscription to weak subscription manager for pattern: staff.shift.assigned
[EventBus] Adding subscription to weak subscription manager for pattern: staff.shift.swapped

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056850_s9tojm4fa'[39m,
  pattern: [32m'staff.shift.assigned'[39m,
  moduleId: [32m'test-scheduling'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056850_0mnh22grg'[39m,
  pattern: [32m'staff.shift.swapped'[39m,
  moduleId: [32m'test-scheduling'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-scheduling'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Scheduling Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757798056851_2pz7j6idy) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056851_2pz7j6idy'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Processing event staff.timeoff.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Processing event scheduling.coverage.checked: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Processing event scheduling.coverage.arranged: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Processing event staff.timeoff.approved: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order 111ms
stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:16) { noncePrefix: [32m'8pvdnd92'[39m, timestamp: [32m'1757798056881'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:16)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:16)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:16) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:16) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:16) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:16) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:16) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056884_86j7gdk5d'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056884_7lynb80xp'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056885_bdxzo9lpk'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056886_pcf4r9ogs'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056886_q6aqhf63j'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757798056886_uhi80afvu) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056886_uhi80afvu'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Processing event payment.card.declined: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Processing event payment.retry.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Processing event payment.card.authorized: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Placeholder: Module test-payment handler test-payment.processCardPayment called for payment.card.authorized

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Error unsubscribing sub_1757798056718_508f0j9qw: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798056718_rqcayy12o: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Error unsubscribing sub_1757798056717_kh1o84cft: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Error unsubscribing sub_1757798056714_9u2jw6rcu: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798056715_24pt7vwfx: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:16)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:16)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:16)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:16)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:16)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:16) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:16)

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:16) { noncePrefix: [32m'b2alihct'[39m, timestamp: [32m'1757798056940'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:16)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:16)

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:16) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:16) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:16) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:16) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:16) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:16) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056942_p8ymps3qv'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056942_4blmlc4ev'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056944_36xg5tv53'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056945_ltsqu9b1n'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056946_ey6poimjz'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757798056946_dfyzx29cc) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056946_dfyzx29cc'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.reservation.requested
[EventBus] Subscription added: inventory.stock.reservation.requested (sub_1757798056947_akvkn45tj) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.reserved
[EventBus] Subscription added: inventory.stock.reserved (sub_1757798056947_tkurxw8us) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.reservation.expired
[EventBus] Subscription added: inventory.stock.reservation.expired (sub_1757798056947_kn2zz9952) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.released
[EventBus] Subscription added: inventory.stock.released (sub_1757798056947_b9vezi1dl) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056947_akvkn45tj'[39m,
  pattern: [32m'inventory.stock.reservation.requested'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056947_tkurxw8us'[39m,
  pattern: [32m'inventory.stock.reserved'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056947_kn2zz9952'[39m,
  pattern: [32m'inventory.stock.reservation.expired'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056947_b9vezi1dl'[39m,
  pattern: [32m'inventory.stock.released'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Processing event inventory.stock.reservation.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Processing event inventory.stock.reserved: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests 111ms
stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:16) { noncePrefix: [32m'1xitygzr'[39m, timestamp: [32m'1757798056957'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:16)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:16)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:16) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:16) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:16) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:16) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:16) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056961_d9l2tuuql'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056961_3rnh8axw1'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757798056962_lbgjznx0z) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056962_lbgjznx0z'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[EventBus] Processing event staff.skills.assessed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[EventBus] Processing event staff.development.plan_created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[EventBus] Processing event staff.training.enrolled: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[EventBus] Processing event staff.certification.renewed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting 111ms
stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:16) { noncePrefix: [32m'yge92orh'[39m, timestamp: [32m'1757798056992'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:16)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:16)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:16) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:16) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:16) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:16) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:16) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056994_pti7vr9bk'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056994_2yv1dddhl'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056996_b1n65m79h'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056996_jzbebg4gf'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056996_jbhcovh8x'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
‚ÑπÔ∏è [EventBus] Module registered (06:14:16) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757798056997_mkx0ew95z) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:16) {
  subscriptionId: [32m'sub_1757798056997_mkx0ew95z'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Processing event payment.timeout: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Processing event payment.queued_offline: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Processing event payment.processing_resumed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Processing event payment.card.authorized: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Placeholder: Module test-payment handler test-payment.processCardPayment called for payment.card.authorized

 ‚úì src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders 227ms
stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Processing event inventory.stock.reservation.expired: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Processing event inventory.stock.released: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow 111ms
stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:17) { noncePrefix: [32m'xt68lsj0'[39m, timestamp: [32m'1757798057075'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:17)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:17)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:17) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:17) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:17) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:17) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:17) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057077_265sblcuy'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057077_qcr4eecnw'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m, [32m'test-scheduling'[39m ]
[ModuleRegistry] Module 'test-scheduling' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Activating module 'test-scheduling'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Directly activating module 'test-scheduling'...
[TestSchedulingModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-scheduling'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Module health changed: test-scheduling -> active
[ModuleRegistry] Module 'test-scheduling' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Module 'test-scheduling' activated directly
[EventBus] Module activated: test-scheduling
[EventBus] Auto-registering handlers for module: test-scheduling
[EventBus] Auto-registered handler: test-scheduling.recordShiftAssignment for pattern: staff.shift.assigned
[EventBus] Auto-registered handler: test-scheduling.processShiftSwap for pattern: staff.shift.swapped
[EventBus] Auto-registered 2/2 handlers for module: test-scheduling

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Adding subscription to weak subscription manager for pattern: staff.shift.assigned
[EventBus] Adding subscription to weak subscription manager for pattern: staff.shift.swapped

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057078_8nqzptn1w'[39m,
  pattern: [32m'staff.shift.assigned'[39m,
  moduleId: [32m'test-scheduling'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057078_m0ht7hrnr'[39m,
  pattern: [32m'staff.shift.swapped'[39m,
  moduleId: [32m'test-scheduling'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-scheduling'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Scheduling Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757798057079_2q9r4p3b8) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057079_2q9r4p3b8'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Processing event staff.termination.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Processing event staff.equipment.returned: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Processing event staff.access.revoked: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Processing event scheduling.staff.removed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Processing event staff.termination.completed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries 111ms
stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:17) { noncePrefix: [32m'ubhv2m21'[39m, timestamp: [32m'1757798057112'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:17)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:17)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:17) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:17) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:17) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:17) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:17) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057114_az8ffgfo1'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057114_hzbvqsjwe'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057115_rq2iik3zp'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057115_cgebr6fmd'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057115_2qibtyh34'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m, [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057117_61gcnq94c'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057117_okmhworc9'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757798057118_8cr2bxtkv) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057118_8cr2bxtkv'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event refund.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event refund.approved: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event inventory.returned: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event inventory.returned: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event refund.payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event refund.payment.authorized: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event refund.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event fiscal.credit_note.generated: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking 117ms
stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:17) { noncePrefix: [32m'uta1mpf5'[39m, timestamp: [32m'1757798057189'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:17)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:17)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:17) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:17) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:17) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:17) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:17) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057191_wu4c80sla'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057191_pyokui7g5'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757798057192_uibk88otq) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057192_uibk88otq'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[EventBus] Processing event staff.incident.reported: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[EventBus] Processing event staff.incident.first_aid_provided: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[EventBus] Processing event staff.incident.investigated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[EventBus] Processing event staff.incident.action_plan_created: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing 120ms
stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:17) { noncePrefix: [32m'ee4a3jvz'[39m, timestamp: [32m'1757798057224'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:17)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:17)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:17) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:17) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:17) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:17) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:17) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057226_c8gc69a3b'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057226_v6iv7f5cn'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057228_s2gvd3kij'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057228_sjg55bdu2'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057228_rbbamvro3'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m, [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057229_hobajlkqe'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057229_kwd6fh8r2'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757798057230_3jkb8q9pq) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057230_3jkb8q9pq'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Processing event refund.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Processing event inventory.returned: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Processing event refund.payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Processing event refund.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Error unsubscribing sub_1757798056945_ltsqu9b1n: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798056946_ey6poimjz: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Error unsubscribing sub_1757798056944_36xg5tv53: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Error unsubscribing sub_1757798056942_p8ymps3qv: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798056942_4blmlc4ev: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:17)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:17)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:17)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:17)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:17)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:17) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:17)

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:17) { noncePrefix: [32m'y1dw40u1'[39m, timestamp: [32m'1757798057267'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:17)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:17)

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:17) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:17) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:17) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:17) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:17) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:17) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057269_w0apra39u'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057269_1e17mfccz'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057272_z7zyv61kk'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057273_gmy6vy3ob'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057273_phnr7dpu0'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757798057273_sa3w1aa7u) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057273_sa3w1aa7u'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Adding subscription to weak subscription manager for pattern: suppliers.order.placed
[EventBus] Subscription added: suppliers.order.placed (sub_1757798057274_75c1u1sw9) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: suppliers.order.confirmed
[EventBus] Subscription added: suppliers.order.confirmed (sub_1757798057274_g2o9nvvyt) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: suppliers.delivery.arrived
[EventBus] Subscription added: suppliers.delivery.arrived (sub_1757798057274_5oagio7mz) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: suppliers.delivery.processed
[EventBus] Subscription added: suppliers.delivery.processed (sub_1757798057274_k9c058bq2) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057274_75c1u1sw9'[39m,
  pattern: [32m'suppliers.order.placed'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057274_g2o9nvvyt'[39m,
  pattern: [32m'suppliers.order.confirmed'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057274_5oagio7mz'[39m,
  pattern: [32m'suppliers.delivery.arrived'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057274_k9c058bq2'[39m,
  pattern: [32m'suppliers.delivery.processed'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event suppliers.order.placed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:17) { noncePrefix: [32m'lbzft151'[39m, timestamp: [32m'1757798057288'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:17)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:17)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:17) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:17) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:17) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:17) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:17) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057289_0sdf9tiyi'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057289_esnvmvoh4'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057291_e8sfew8hn'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057291_whtl012mp'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057291_79n9ymaif'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757798057292_6c81y7keq) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057292_6c81y7keq'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Processing event payment.tip.added: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Processing event payment.tip.distribution.calculated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Processing event payment.tip.allocated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Processing event payment.tip.allocated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Processing event payment.tip.daily_summary: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow 114ms
stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:17) { noncePrefix: [32m'1789k2p2'[39m, timestamp: [32m'1757798057301'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:17)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:17)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:17) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:17) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:17) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:17) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:17) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057303_5bfoyl63l'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057303_n1ccjqb47'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757798057304_aajvcb9i3) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057304_aajvcb9i3'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[EventBus] Processing event staff.time.clock_in: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[EventBus] Processing event staff.time.clock_out: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[EventBus] Processing event staff.time.adjusted: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[EventBus] Processing event staff.payroll.calculated: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow 112ms
 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items 63ms
stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event suppliers.order.confirmed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration 327ms
 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting 112ms
 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking 63ms
stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:17) { noncePrefix: [32m'hzuqkrxk'[39m, timestamp: [32m'1757798057399'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:17)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:17)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:17) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:17) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:17) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:17) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:17) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057400_5q27yanb5'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057400_aket86bjp'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057402_aa66m4t8y'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057402_iklgewih6'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057402_n7dwjfwee'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757798057403_v2yupg81k) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057403_v2yupg81k'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Processing event payment.auto_gratuity.calculated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Processing event payment.auto_gratuity.disclosed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event suppliers.delivery.arrived: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event suppliers.delivery.processed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow 111ms
 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups 63ms
stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:17) { noncePrefix: [32m'aiy2wjwz'[39m, timestamp: [32m'1757798057462'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:17)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:17)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:17) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:17) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:17) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:17) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:17) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
Complete order workflow executed: order-created ‚Üí stock-check ‚Üí stock-reserved ‚Üí stock-check ‚Üí stock-reserved ‚Üí payment-requested ‚Üí payment-processed ‚Üí kitchen-received ‚Üí kitchen-completed ‚Üí order-fulfilled ‚Üí customer-notified

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057464_e91ewggd5'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057464_eyvtp6quf'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057465_d4ty8qvio'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057465_hydriiciq'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057466_4aiol4bnk'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757798057471_reuyix0h5) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057471_reuyix0h5'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Processing event payment.reconciliation.daily: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Error unsubscribing sub_1757798056353_t0h7yrrzj: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798056354_fptcf3vag: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Error unsubscribing sub_1757798056351_kmieoebes: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Error unsubscribing sub_1757798056348_1zbfqpdgj: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798056348_ud8otc63i: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:17)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:17)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:17)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:17)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:17)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:17) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:17)

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:17) { noncePrefix: [32m'b3b0mzh6'[39m, timestamp: [32m'1757798057491'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:17)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:17)

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:17) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:17) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:17) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:17) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:17) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:17) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057493_pjoljw40b'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057493_bsp4532qy'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057495_asth91cxy'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057497_ot10wf9xt'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057497_de5wn84cc'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757798057498_wod11ngy2) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.cancellation.requested
[EventBus] Subscription added: sales.order.cancellation.requested (sub_1757798057498_nhumswhfr) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.released
[EventBus] Subscription added: inventory.stock.released (sub_1757798057498_ss6rjrhwb) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: payments.refund.requested
[EventBus] Subscription added: payments.refund.requested (sub_1757798057498_b5swy3ms8) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.cancelled
[EventBus] Subscription added: sales.order.cancelled (sub_1757798057499_jlykqw57b) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057498_wod11ngy2'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057498_nhumswhfr'[39m,
  pattern: [32m'sales.order.cancellation.requested'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057498_ss6rjrhwb'[39m,
  pattern: [32m'inventory.stock.released'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057498_b5swy3ms8'[39m,
  pattern: [32m'payments.refund.requested'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057499_jlykqw57b'[39m,
  pattern: [32m'sales.order.cancelled'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[TestCustomers] Updated activity for customer CUST-VIP-001

 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report 63ms
 ‚úì src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment 1150ms
stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Processing event sales.order.cancellation.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Processing event inventory.stock.released: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Processing event payments.refund.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Processing event sales.order.cancelled: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Error unsubscribing sub_1757798057273_gmy6vy3ob: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798057273_phnr7dpu0: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Error unsubscribing sub_1757798057272_z7zyv61kk: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Error unsubscribing sub_1757798057269_w0apra39u: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798057269_1e17mfccz: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:17)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:17)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:17)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:17)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:17)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:17) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:17)

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:17) { noncePrefix: [32m'15ddji62'[39m, timestamp: [32m'1757798057691'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:17)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:17)

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:17) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:17) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:17) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:17) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:17) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:17) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057693_qqcq0eloh'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057693_don7odzh0'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057695_iyrtiesd5'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057696_7y7jwsfa3'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057696_rr7idlcp6'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757798057697_qqf6f37vh) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057697_qqf6f37vh'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Adding subscription to weak subscription manager for pattern: suppliers.delivery.arrived
[EventBus] Subscription added: suppliers.delivery.arrived (sub_1757798057698_g43dlv4hx) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: suppliers.delivery.discrepancy
[EventBus] Subscription added: suppliers.delivery.discrepancy (sub_1757798057698_tyl5vi8xq) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: suppliers.discrepancy.reported
[EventBus] Subscription added: suppliers.discrepancy.reported (sub_1757798057698_3rkkw19wz) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057698_g43dlv4hx'[39m,
  pattern: [32m'suppliers.delivery.arrived'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057698_tyl5vi8xq'[39m,
  pattern: [32m'suppliers.delivery.discrepancy'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057698_3rkkw19wz'[39m,
  pattern: [32m'suppliers.discrepancy.reported'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Processing event suppliers.delivery.arrived: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Processing event suppliers.delivery.discrepancy: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Processing event suppliers.discrepancy.reported: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle 424ms
stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Error unsubscribing sub_1757798057696_7y7jwsfa3: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798057696_rr7idlcp6: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Error unsubscribing sub_1757798057695_iyrtiesd5: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Error unsubscribing sub_1757798057693_qqcq0eloh: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798057693_don7odzh0: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:17)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:17)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:17)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:17)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:17)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:17) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:17)

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:17) { noncePrefix: [32m'32p80ohn'[39m, timestamp: [32m'1757798057919'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:17)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:17)

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:17) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:17) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:17) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:17) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:17) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:17) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057921_zj318vbcz'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057921_p87xni1ej'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057922_njsm5wpwo'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057923_xp84qm4ni'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057923_8pbjr60nm'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ÑπÔ∏è [EventBus] Module registered (06:14:17) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757798057924_3dkdss40m) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057924_3dkdss40m'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.item.expired
[EventBus] Subscription added: inventory.item.expired (sub_1757798057925_jyqgoduci) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.item.damaged
[EventBus] Subscription added: inventory.item.damaged (sub_1757798057925_rual8jvl1) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.waste.recorded
[EventBus] Subscription added: inventory.waste.recorded (sub_1757798057925_ekbn7prgt) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.waste.threshold.exceeded
[EventBus] Subscription added: inventory.waste.threshold.exceeded (sub_1757798057925_ol0u41uul) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057925_jyqgoduci'[39m,
  pattern: [32m'inventory.item.expired'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057925_rual8jvl1'[39m,
  pattern: [32m'inventory.item.damaged'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057925_ekbn7prgt'[39m,
  pattern: [32m'inventory.waste.recorded'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:17) {
  subscriptionId: [32m'sub_1757798057925_ol0u41uul'[39m,
  pattern: [32m'inventory.waste.threshold.exceeded'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event inventory.item.expired: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event inventory.waste.recorded: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event inventory.waste.threshold.exceeded: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event inventory.item.damaged: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event inventory.waste.recorded: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event inventory.waste.threshold.exceeded: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies 228ms
stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Error unsubscribing sub_1757798057497_ot10wf9xt: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798057497_de5wn84cc: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Error unsubscribing sub_1757798057495_asth91cxy: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Error unsubscribing sub_1757798057493_pjoljw40b: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798057493_bsp4532qy: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:18)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:18)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:18)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:18)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:18)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:18) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:18)

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:18) { noncePrefix: [32m'vyqy9f0l'[39m, timestamp: [32m'1757798058142'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:18)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:18)

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:18) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:18) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:18) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:18) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:18) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:18) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058143_4gdh6xg8f'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058144_8t2ogl9ac'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ÑπÔ∏è [EventBus] Module registered (06:14:18) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058145_jhgzfcv1d'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ÑπÔ∏è [EventBus] Module registered (06:14:18) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058147_i0rik25ak'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058147_t5z5o7ig1'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ÑπÔ∏è [EventBus] Module registered (06:14:18) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757798058148_tef89jd7b) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.check
[EventBus] Subscription added: inventory.stock.check (sub_1757798058148_90sqctuaw) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.insufficient
[EventBus] Subscription added: inventory.stock.insufficient (sub_1757798058148_593anube9) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.stock.problem
[EventBus] Subscription added: sales.order.stock.problem (sub_1757798058148_0sp4jgpb2) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058148_tef89jd7b'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058148_90sqctuaw'[39m,
  pattern: [32m'inventory.stock.check'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058148_593anube9'[39m,
  pattern: [32m'inventory.stock.insufficient'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058148_0sp4jgpb2'[39m,
  pattern: [32m'sales.order.stock.problem'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[TestCustomers] Updated activity for customer CUST-001

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event inventory.stock.check: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event inventory.stock.insufficient: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event sales.order.stock.problem: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event customers.notification.sent: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event inventory.stock.check: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow 651ms
stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Error unsubscribing sub_1757798057923_xp84qm4ni: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798057923_8pbjr60nm: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Error unsubscribing sub_1757798057922_njsm5wpwo: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Error unsubscribing sub_1757798057921_zj318vbcz: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798057921_p87xni1ej: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:18)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:18)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:18)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:18)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:18)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:18) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:18)

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:18) { noncePrefix: [32m'4mhensa5'[39m, timestamp: [32m'1757798058253'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:18)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:18)

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:18) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:18) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:18) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:18) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:18) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:18) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058254_jue6phgki'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058255_4wl5e9i26'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ÑπÔ∏è [EventBus] Module registered (06:14:18) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058261_092olgy3i'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ÑπÔ∏è [EventBus] Module registered (06:14:18) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058262_t02x0hnzp'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058262_mdzoi4bxi'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ÑπÔ∏è [EventBus] Module registered (06:14:18) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757798058263_7nnqs8z1e) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058263_7nnqs8z1e'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.waste.analysis.requested
[EventBus] Subscription added: inventory.waste.analysis.requested (sub_1757798058263_3zleq9zzz) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.waste.analysis.completed
[EventBus] Subscription added: inventory.waste.analysis.completed (sub_1757798058263_hs3h4dm2a) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058263_3zleq9zzz'[39m,
  pattern: [32m'inventory.waste.analysis.requested'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058263_hs3h4dm2a'[39m,
  pattern: [32m'inventory.waste.analysis.completed'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Processing event inventory.waste.analysis.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Processing event inventory.waste.analysis.completed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste 334ms
stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Error unsubscribing sub_1757798058147_i0rik25ak: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798058147_t5z5o7ig1: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Error unsubscribing sub_1757798058145_jhgzfcv1d: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Error unsubscribing sub_1757798058143_4gdh6xg8f: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798058144_8t2ogl9ac: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:18)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:18)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:18)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:18)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:18)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:18) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:18)

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:18) { noncePrefix: [32m'e61d5isc'[39m, timestamp: [32m'1757798058475'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:18)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:18)

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:18) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:18) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:18) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:18) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:18) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:18) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058477_nx0kxn9yz'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058477_t6t5amflo'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ÑπÔ∏è [EventBus] Module registered (06:14:18) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058479_psj9umv2a'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ÑπÔ∏è [EventBus] Module registered (06:14:18) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058480_7yn2f28cv'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058480_7ew8vrh3h'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ÑπÔ∏è [EventBus] Module registered (06:14:18) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757798058481_umn7gi7ti) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.order.received
[EventBus] Subscription added: kitchen.order.received (sub_1757798058481_db95hnvak) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058481_umn7gi7ti'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058481_db95hnvak'[39m,
  pattern: [32m'kitchen.order.received'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[TestCustomers] Updated activity for customer CUST-REG-002

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Processing event kitchen.order.received: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Error unsubscribing sub_1757798058262_t02x0hnzp: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798058262_mdzoi4bxi: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Error unsubscribing sub_1757798058261_092olgy3i: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Error unsubscribing sub_1757798058254_jue6phgki: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798058255_4wl5e9i26: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:18)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:18)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:18)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:18)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:18)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:18) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:18)

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:18) { noncePrefix: [32m'zrv2vyaq'[39m, timestamp: [32m'1757798058489'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:18)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:18)

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:18) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:18) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:18) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:18) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:18) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:18) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058491_y0dzzr45z'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058491_enoqsez91'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ÑπÔ∏è [EventBus] Module registered (06:14:18) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058492_jisqgqqvx'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ÑπÔ∏è [EventBus] Module registered (06:14:18) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058493_zwea57b2j'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058493_73ynr84q6'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ÑπÔ∏è [EventBus] Module registered (06:14:18) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[TestCustomers] Updated activity for customer CUST-VIP-001

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Processing event kitchen.order.received: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757798058494_1kng0n8ud) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058494_1kng0n8ud'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Adding subscription to weak subscription manager for pattern: sales.item.sold
[EventBus] Subscription added: sales.item.sold (sub_1757798058494_tu279zb2k) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.optimization.analysis.requested
[EventBus] Subscription added: inventory.optimization.analysis.requested (sub_1757798058495_m5s0yjtz8) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.optimization.recommendations.generated
[EventBus] Subscription added: inventory.optimization.recommendations.generated (sub_1757798058495_ieb4lnjgn) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058494_tu279zb2k'[39m,
  pattern: [32m'sales.item.sold'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058495_m5s0yjtz8'[39m,
  pattern: [32m'inventory.optimization.analysis.requested'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058495_ieb4lnjgn'[39m,
  pattern: [32m'inventory.optimization.recommendations.generated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event sales.item.sold: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event sales.item.sold: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event sales.item.sold: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event sales.item.sold: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event sales.item.sold: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event sales.item.sold: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event inventory.optimization.analysis.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event inventory.optimization.recommendations.generated: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios 333ms
 ‚úì src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations 236ms
stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Error unsubscribing sub_1757798058480_7yn2f28cv: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798058480_7ew8vrh3h: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Error unsubscribing sub_1757798058479_psj9umv2a: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Error unsubscribing sub_1757798058477_nx0kxn9yz: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798058477_t6t5amflo: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:18)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:18)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:18)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:18)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:18)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:18) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:18)

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:18) { noncePrefix: [32m'v6hatygo'[39m, timestamp: [32m'1757798058723'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:18)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:18)

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:18) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:18) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:18) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:18) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:18) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:18) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058724_lrf1ybymy'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058724_7z0gak3cp'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ÑπÔ∏è [EventBus] Module registered (06:14:18) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058726_kmmtjukqm'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ÑπÔ∏è [EventBus] Module registered (06:14:18) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058727_3nvob84dm'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058727_atdfexhov'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ÑπÔ∏è [EventBus] Module registered (06:14:18) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757798058728_i2fhag9q8) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.discount.applied
[EventBus] Subscription added: sales.discount.applied (sub_1757798058728_oh2fzp1ny) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058728_i2fhag9q8'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058728_oh2fzp1ny'[39m,
  pattern: [32m'sales.discount.applied'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[TestCustomers] Updated activity for customer CUST-VIP-001

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Processing event sales.discount.applied: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Processing event customers.loyalty.points.awarded: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Error unsubscribing sub_1757798058493_zwea57b2j: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798058493_73ynr84q6: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Error unsubscribing sub_1757798058492_jisqgqqvx: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Error unsubscribing sub_1757798058491_y0dzzr45z: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798058491_enoqsez91: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:18)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:18)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:18)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:18)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:18)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:18) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:18)

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Graceful shutdown completed

 ‚úì src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns 328ms
 ‚úì src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders 248ms
stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Error unsubscribing sub_1757798058727_3nvob84dm: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798058727_atdfexhov: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Error unsubscribing sub_1757798058726_kmmtjukqm: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Error unsubscribing sub_1757798058724_lrf1ybymy: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798058724_7z0gak3cp: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:18)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:18)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:18)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:18)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:18)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:18) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:18)

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:18) { noncePrefix: [32m'8onn6vb0'[39m, timestamp: [32m'1757798058957'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:18)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:18)

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:18) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:18) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:18) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:18) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:18) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:18) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058959_8webqocsn'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058959_3ai5cm5e6'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ÑπÔ∏è [EventBus] Module registered (06:14:18) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058960_50cl0xdfr'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ÑπÔ∏è [EventBus] Module registered (06:14:18) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058961_k2z9mp2te'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058961_ost9lt4xy'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ÑπÔ∏è [EventBus] Module registered (06:14:18) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757798058962_2b98bdstw) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.item.preparation.scheduled
[EventBus] Subscription added: kitchen.item.preparation.scheduled (sub_1757798058963_0rlrp8jog) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.item.preparation.completed
[EventBus] Subscription added: kitchen.item.preparation.completed (sub_1757798058963_plhod9okx) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.order.assembly.ready
[EventBus] Subscription added: kitchen.order.assembly.ready (sub_1757798058963_rnuwd3s2z) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058962_2b98bdstw'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058963_0rlrp8jog'[39m,
  pattern: [32m'kitchen.item.preparation.scheduled'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058963_plhod9okx'[39m,
  pattern: [32m'kitchen.item.preparation.completed'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:18) {
  subscriptionId: [32m'sub_1757798058963_rnuwd3s2z'[39m,
  pattern: [32m'kitchen.order.assembly.ready'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[TestCustomers] Updated activity for customer CUST-001

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event kitchen.item.preparation.scheduled: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event kitchen.item.preparation.scheduled: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event kitchen.item.preparation.scheduled: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event kitchen.item.preparation.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event kitchen.item.preparation.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event kitchen.item.preparation.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event kitchen.order.assembly.ready: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event kitchen.order.completed: Found 0 matching subscriptions

 ‚úì src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits 234ms
stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Error unsubscribing sub_1757798058961_k2z9mp2te: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798058961_ost9lt4xy: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Error unsubscribing sub_1757798058960_50cl0xdfr: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Error unsubscribing sub_1757798058959_8webqocsn: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798058959_3ai5cm5e6: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:19)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:19)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:19)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:19)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:19)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:19) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:19)

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ÑπÔ∏è [Security] New CSP nonce generated (06:14:19) { noncePrefix: [32m'l0irt3kb'[39m, timestamp: [32m'1757798059790'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (06:14:19)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (06:14:19)

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (06:14:19) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (06:14:19) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (06:14:19) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (06:14:19) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (06:14:19) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (06:14:19) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:19) {
  subscriptionId: [32m'sub_1757798059791_lfujqklla'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:19) {
  subscriptionId: [32m'sub_1757798059791_mn1uh8die'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ÑπÔ∏è [EventBus] Module registered (06:14:19) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:19) {
  subscriptionId: [32m'sub_1757798059798_v4z3gxngd'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ÑπÔ∏è [EventBus] Module registered (06:14:19) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:19) {
  subscriptionId: [32m'sub_1757798059799_a7y2iy3q6'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:19) {
  subscriptionId: [32m'sub_1757798059799_6r48ikofn'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ÑπÔ∏è [EventBus] Module registered (06:14:19) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757798059800_epjv480n8) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.order.received
[EventBus] Subscription added: kitchen.order.received (sub_1757798059800_x5womm4y5) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.order.error
[EventBus] Subscription added: kitchen.order.error (sub_1757798059801_jfwrfy4ac) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: operations.error.recovery.initiated
[EventBus] Subscription added: operations.error.recovery.initiated (sub_1757798059801_eh2dxt74o) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: customers.compensation.offered
[EventBus] Subscription added: customers.compensation.offered (sub_1757798059801_tdeab6p47) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:19) {
  subscriptionId: [32m'sub_1757798059800_epjv480n8'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:19) {
  subscriptionId: [32m'sub_1757798059800_x5womm4y5'[39m,
  pattern: [32m'kitchen.order.received'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:19) {
  subscriptionId: [32m'sub_1757798059801_jfwrfy4ac'[39m,
  pattern: [32m'kitchen.order.error'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:19) {
  subscriptionId: [32m'sub_1757798059801_eh2dxt74o'[39m,
  pattern: [32m'operations.error.recovery.initiated'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (06:14:19) {
  subscriptionId: [32m'sub_1757798059801_tdeab6p47'[39m,
  pattern: [32m'customers.compensation.offered'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[TestCustomers] Updated activity for customer CUST-001

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event kitchen.order.received: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements 832ms
stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event kitchen.order.error: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event operations.error.recovery.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event customers.compensation.offered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event sales.order.compensated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Error unsubscribing sub_1757798059799_a7y2iy3q6: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798059799_6r48ikofn: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Error unsubscribing sub_1757798059798_v4z3gxngd: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Error unsubscribing sub_1757798059791_lfujqklla: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757798059791_mn1uh8die: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1188:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:535:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:362:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1192:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (06:14:20)
‚ùå [Security] [SECURITY] RateLimiter destroyed (06:14:20)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (06:14:20)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (06:14:20)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (06:14:20)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (06:14:20) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (06:14:20)

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Graceful shutdown completed

 ‚úì src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation 646ms

 Test Files  4 passed (4)
      Tests  37 passed (37)
   Start at  18:14:13
   Duration  6.89s (transform 654ms, setup 1.30s, collect 1.89s, tests 8.82s, environment 5.60s, prepare 982ms)

