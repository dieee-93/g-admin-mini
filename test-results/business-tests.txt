
 RUN  v3.2.4 I:/Programacion/Proyectos/g-mini

stdout | src/lib/events/__tests__/business/staff-management.test.ts
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:07) { noncePrefix: [32m'cehzxmcj'[39m, timestamp: [32m'1757789347971'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:07)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/__tests__/business/staff-management.test.ts
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:49:07) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:07) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:07) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:07) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:07) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:07) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/business/staff-management.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:49:07) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'93a85786...'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:49:07) { reason: [32m'No valid existing ID found'[39m, newId: [32m'93a85786...'[39m }

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:07) { noncePrefix: [32m'7vbc6a5l'[39m, timestamp: [32m'1757789347998'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:07)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:07)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:07) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:07) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:07) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:07) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:07) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348006_hc6w4ynkz'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348006_xckoef60z'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m, [32m'test-scheduling'[39m ]
[ModuleRegistry] Module 'test-scheduling' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Activating module 'test-scheduling'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Directly activating module 'test-scheduling'...
[TestSchedulingModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Registering 2 subscriptions for module 'test-scheduling'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Module health changed: test-scheduling -> active
[ModuleRegistry] Module 'test-scheduling' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Module 'test-scheduling' activated directly
[EventBus] Module activated: test-scheduling
[EventBus] Auto-registering handlers for module: test-scheduling
[EventBus] Auto-registered handler: test-scheduling.recordShiftAssignment for pattern: staff.shift.assigned
[EventBus] Auto-registered handler: test-scheduling.processShiftSwap for pattern: staff.shift.swapped
[EventBus] Auto-registered 2/2 handlers for module: test-scheduling

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Adding subscription to weak subscription manager for pattern: staff.shift.assigned
[EventBus] Adding subscription to weak subscription manager for pattern: staff.shift.swapped

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348010_hid1l1avi'[39m,
  pattern: [32m'staff.shift.assigned'[39m,
  moduleId: [32m'test-scheduling'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348010_uaobiz1cd'[39m,
  pattern: [32m'staff.shift.swapped'[39m,
  moduleId: [32m'test-scheduling'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-scheduling'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Scheduling Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Adding subscription to weak subscription manager for pattern: **
[EventBus] Subscription added: ** (sub_1757789348012_4jebw5cyz) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348012_4jebw5cyz'[39m,
  pattern: [32m'**'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event staff.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event staff.documents.submitted: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event staff.training.assigned: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:08) { noncePrefix: [32m'1rr1thou'[39m, timestamp: [32m'1757789348014'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:08)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event staff.training.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:08) { noncePrefix: [32m'8yng207l'[39m, timestamp: [32m'1757789348013'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:08)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/__tests__/business/payment-processing.test.ts
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:49:07) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:08) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:08) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:49:07) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:08) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:08) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event staff.training.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:08) { noncePrefix: [32m'3w1ba720'[39m, timestamp: [32m'1757789348014'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:08)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event staff.training.completed: Found 1 matching subscriptions

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:49:07) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (03:49:08) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:08) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event staff.equipment.assigned: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event scheduling.staff.assigned: Found 1 matching subscriptions

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:49:08) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'd493b1a9...'[39m }

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event staff.onboarding.completed: Found 1 matching subscriptions

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:49:08) { reason: [32m'No valid existing ID found'[39m, newId: [32m'd493b1a9...'[39m }

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:49:08) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'b0b64e2e...'[39m }

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:49:08) { reason: [32m'No valid existing ID found'[39m, newId: [32m'b0b64e2e...'[39m }

stderr | src/lib/events/__tests__/business/payment-processing.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (03:49:08) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'789a0e8b...'[39m }

stderr | src/lib/events/__tests__/business/payment-processing.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (03:49:08) { reason: [32m'No valid existing ID found'[39m, newId: [32m'789a0e8b...'[39m }

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:08) { noncePrefix: [32m'pa8x0x5f'[39m, timestamp: [32m'1757789348028'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:08)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:08)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:08) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:08) { noncePrefix: [32m'yad7pr58'[39m, timestamp: [32m'1757789348028'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:08)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:08)

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:08) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:08) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:08) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:08) { noncePrefix: [32m'h7rcdeq2'[39m, timestamp: [32m'1757789348034'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:08)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:08)

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:08) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348035_aawb9gntc'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348035_r76j1i5m3'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348035_nnbkh4biy'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348036_u5vqxr8qn'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:08) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348038_q2pw21zxq'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348039_01lrvcgeo'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348039_of31e1ct4'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348039_6nvgstmwg'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757789348040_oabnu0kwo) [moduleId: anonymous]

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348040_oabnu0kwo'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348040_s8uu0kf4u'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348041_4ti38y8lq'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348041_r3jok8ryz'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348041_3wmksmwus'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Processing event payment.cash.received: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Placeholder: Module test-payment handler test-payment.processCashPayment called for payment.cash.received

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Processing event payment.change.calculated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348044_lyvtxdy26'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Processing event fiscal.receipt.generated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Processing event payment.cash_register.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757789348043_iubysy7vr) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.check
[EventBus] Subscription added: inventory.stock.check (sub_1757789348043_mboa6pb12) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.reserved
[EventBus] Subscription added: inventory.stock.reserved (sub_1757789348043_xyn5enpw3) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: payments.payment.requested
[EventBus] Subscription added: payments.payment.requested (sub_1757789348044_8wlpj3g71) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: payments.payment.processed
[EventBus] Subscription added: payments.payment.processed (sub_1757789348044_tardz3xhu) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.order.received
[EventBus] Subscription added: kitchen.order.received (sub_1757789348044_2f0v14ilt) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.order.completed
[EventBus] Subscription added: kitchen.order.completed (sub_1757789348044_b7gro8uj3) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.fulfilled
[EventBus] Subscription added: sales.order.fulfilled (sub_1757789348045_53invyzyz) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: customers.notification.sent
[EventBus] Subscription added: customers.notification.sent (sub_1757789348045_d8air3on4) [moduleId: anonymous]

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348043_iubysy7vr'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348043_mboa6pb12'[39m,
  pattern: [32m'inventory.stock.check'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348043_xyn5enpw3'[39m,
  pattern: [32m'inventory.stock.reserved'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348044_8wlpj3g71'[39m,
  pattern: [32m'payments.payment.requested'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348044_tardz3xhu'[39m,
  pattern: [32m'payments.payment.processed'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348044_2f0v14ilt'[39m,
  pattern: [32m'kitchen.order.received'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348044_b7gro8uj3'[39m,
  pattern: [32m'kitchen.order.completed'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348045_53invyzyz'[39m,
  pattern: [32m'sales.order.fulfilled'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348045_d8air3on4'[39m,
  pattern: [32m'customers.notification.sent'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348046_f0jikkf36'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348046_ixjbulfpi'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[TestCustomers] Updated activity for customer CUST-VIP-001

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event inventory.stock.check: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757789348047_422hhbx0m) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348047_422hhbx0m'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event inventory.stock.reserved: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event inventory.stock.check: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757789348048_bozbgczfr) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Subscription added: inventory.stock.low (sub_1757789348048_00khzramj) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.reorder.automatic
[EventBus] Subscription added: inventory.reorder.automatic (sub_1757789348049_bx7vz9dbv) [moduleId: anonymous]

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event inventory.stock.reserved: Found 1 matching subscriptions

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348048_bozbgczfr'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348048_00khzramj'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348049_bx7vz9dbv'[39m,
  pattern: [32m'inventory.reorder.automatic'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event payments.payment.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Processing event inventory.stock.updated: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Processing event inventory.stock.low: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[TestSales] Handling low stock for Papas Gourmet

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Processing event inventory.reorder.automatic: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Processing event suppliers.order.placed: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event payments.payment.processed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event kitchen.order.received: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:08) { noncePrefix: [32m'92w4ha9o'[39m, timestamp: [32m'1757789348125'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:08)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:08)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:08) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:08) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348128_kbikn9jce'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348128_jkwyeq86z'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757789348130_y1hq21m92) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348130_y1hq21m92'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[EventBus] Processing event staff.training.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[EventBus] Processing event staff.training.remedial.assigned: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[EventBus] Processing event staff.training.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event kitchen.order.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event sales.order.fulfilled: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event customers.notification.sent: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:08) { noncePrefix: [32m'aukbi07u'[39m, timestamp: [32m'1757789348156'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:08)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:08)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:08) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:08) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348160_abtslbjce'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348160_pb27ihacj'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348163_xemixp9c1'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348163_9yli7ugdf'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348163_a7myx5wjb'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757789348165_5m6w0j5lp) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348165_5m6w0j5lp'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Processing event payment.card.info_captured: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Processing event payment.card.authorization_requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Processing event payment.card.authorized: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Placeholder: Module test-payment handler test-payment.processCardPayment called for payment.card.authorized

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Processing event payment.card.captured: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:08) { noncePrefix: [32m'5h6u4ga3'[39m, timestamp: [32m'1757789348186'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:08)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:08)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:08) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:08) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348189_mup9t5qdo'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348189_9r8iqhkql'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757789348190_1ualwvehz) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348190_1ualwvehz'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[EventBus] Processing event staff.performance.review.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[EventBus] Processing event staff.performance.self_assessment.submitted: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[EventBus] Processing event staff.performance.manager_evaluation.submitted: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[EventBus] Processing event staff.performance.review.completed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process 128ms
 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation 61ms
 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow 129ms
stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:08) { noncePrefix: [32m'phz0djkj'[39m, timestamp: [32m'1757789348280'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:08)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:08)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:08) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:08) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348283_4cv0menwn'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348283_lqh7elf7z'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348285_j2tg0buq3'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348285_mujuxhavd'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348285_j9d3mnjkw'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757789348286_21fjvh1u3) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348286_21fjvh1u3'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Processing event payment.nfc.device_detected: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Processing event payment.nfc.authenticated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Processing event payment.nfc.processed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:08) { noncePrefix: [32m'g6t0qr6o'[39m, timestamp: [32m'1757789348295'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:08)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:08)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:08) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:08) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348298_4n83e0qlf'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348298_51ogmklde'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757789348299_5g5bqj0oy) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348299_5g5bqj0oy'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Processing event staff.performance.concern.identified: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Processing event staff.pip.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Processing event staff.pip.checkin: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Processing event staff.pip.checkin: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Processing event staff.pip.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:08) { noncePrefix: [32m'5shsmfa5'[39m, timestamp: [32m'1757789348344'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:08)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:08)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:08) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:08) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348346_w9dh4ztct'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348346_dwzjiypd0'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348348_oxxgd5a2i'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348348_tu4c68otr'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348348_qc691x1f3'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757789348349_uyfjtf6jp) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348349_uyfjtf6jp'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event payment.split.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event payment.cash.received: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Placeholder: Module test-payment handler test-payment.processCashPayment called for payment.cash.received

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event payment.card.authorized: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Placeholder: Module test-payment handler test-payment.processCardPayment called for payment.card.authorized

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event payment.split.completed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization 124ms
 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow 63ms
stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Error unsubscribing sub_1757789348046_f0jikkf36: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789348046_ixjbulfpi: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Error unsubscribing sub_1757789348044_lyvtxdy26: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[TestCustomersModule] Deactivating...

 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process 110ms
stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:08) { noncePrefix: [32m'72l4olmc'[39m, timestamp: [32m'1757789348407'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:08)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:08)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:08) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:08) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Error unsubscribing sub_1757789348040_s8uu0kf4u: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789348041_4ti38y8lq: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[TestInventoryModule] Deactivating...

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348410_jfne393jq'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348410_ui5dy8dvs'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:49:08)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:49:08)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:49:08)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:08)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:49:08)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:49:08) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:49:08)

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m, [32m'test-scheduling'[39m ]
[ModuleRegistry] Module 'test-scheduling' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Activating module 'test-scheduling'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Directly activating module 'test-scheduling'...
[TestSchedulingModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Registering 2 subscriptions for module 'test-scheduling'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Module health changed: test-scheduling -> active
[ModuleRegistry] Module 'test-scheduling' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Module 'test-scheduling' activated directly
[EventBus] Module activated: test-scheduling
[EventBus] Auto-registering handlers for module: test-scheduling
[EventBus] Auto-registered handler: test-scheduling.recordShiftAssignment for pattern: staff.shift.assigned
[EventBus] Auto-registered handler: test-scheduling.processShiftSwap for pattern: staff.shift.swapped
[EventBus] Auto-registered 2/2 handlers for module: test-scheduling

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Adding subscription to weak subscription manager for pattern: staff.shift.assigned
[EventBus] Adding subscription to weak subscription manager for pattern: staff.shift.swapped

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348413_omwmcpdrg'[39m,
  pattern: [32m'staff.shift.assigned'[39m,
  moduleId: [32m'test-scheduling'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348413_csrctfkuf'[39m,
  pattern: [32m'staff.shift.swapped'[39m,
  moduleId: [32m'test-scheduling'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:08) { noncePrefix: [32m'll8th7uv'[39m, timestamp: [32m'1757789348413'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:08)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:08)

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:49:08) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:08) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-scheduling'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Scheduling Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:08) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757789348414_1ev5aibw2) [moduleId: anonymous]

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348414_1ev5aibw2'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Processing event scheduling.shift_swap.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348415_3ldcos9e6'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348416_3f4ralpw9'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Processing event scheduling.shift_swap.approved: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Processing event scheduling.shift_swap.accepted: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Processing event scheduling.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348418_ttnuutwhu'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348420_25ijfh2na'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348420_71swd8n58'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757789348421_58h6tohxf) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348421_58h6tohxf'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.reservation.requested
[EventBus] Subscription added: inventory.stock.reservation.requested (sub_1757789348422_pwcpw5xti) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.reserved
[EventBus] Subscription added: inventory.stock.reserved (sub_1757789348422_twmb15th3) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.reservation.failed
[EventBus] Subscription added: inventory.stock.reservation.failed (sub_1757789348422_l8agkdxcp) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348422_pwcpw5xti'[39m,
  pattern: [32m'inventory.stock.reservation.requested'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348422_twmb15th3'[39m,
  pattern: [32m'inventory.stock.reserved'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348422_l8agkdxcp'[39m,
  pattern: [32m'inventory.stock.reservation.failed'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Processing event inventory.stock.reservation.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Processing event inventory.stock.reserved: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Processing event inventory.stock.reservation.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Processing event inventory.stock.reservation.failed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:08) { noncePrefix: [32m'tdf6pq0q'[39m, timestamp: [32m'1757789348455'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:08)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:08)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:08) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:08) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348458_6g9bhvg3l'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348458_yogo2muik'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348459_qion0zn1b'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348459_uib3qkg0a'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348460_q9nv9968b'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757789348460_6hpphstzd) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348460_6hpphstzd'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.group_split.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.card.authorized: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Placeholder: Module test-payment handler test-payment.processCardPayment called for payment.card.authorized

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.card.authorized: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Placeholder: Module test-payment handler test-payment.processCardPayment called for payment.card.authorized

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.card.authorized: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Placeholder: Module test-payment handler test-payment.processCardPayment called for payment.card.authorized

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.group_split.completed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP) 111ms
 ‚úì src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering 380ms
stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:08) { noncePrefix: [32m'vnhczok5'[39m, timestamp: [32m'1757789348518'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:08)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:08)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:08) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:08) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348520_a1jjnbc5i'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348520_56glm1dxk'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m, [32m'test-scheduling'[39m ]
[ModuleRegistry] Module 'test-scheduling' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Activating module 'test-scheduling'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Directly activating module 'test-scheduling'...
[TestSchedulingModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-scheduling'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Module health changed: test-scheduling -> active
[ModuleRegistry] Module 'test-scheduling' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Module 'test-scheduling' activated directly
[EventBus] Module activated: test-scheduling
[EventBus] Auto-registering handlers for module: test-scheduling
[EventBus] Auto-registered handler: test-scheduling.recordShiftAssignment for pattern: staff.shift.assigned
[EventBus] Auto-registered handler: test-scheduling.processShiftSwap for pattern: staff.shift.swapped
[EventBus] Auto-registered 2/2 handlers for module: test-scheduling

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Adding subscription to weak subscription manager for pattern: staff.shift.assigned
[EventBus] Adding subscription to weak subscription manager for pattern: staff.shift.swapped

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348522_i6i6kjpeo'[39m,
  pattern: [32m'staff.shift.assigned'[39m,
  moduleId: [32m'test-scheduling'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348522_lxbwbym6p'[39m,
  pattern: [32m'staff.shift.swapped'[39m,
  moduleId: [32m'test-scheduling'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-scheduling'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Scheduling Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757789348523_5fao6wahh) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348523_5fao6wahh'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Processing event staff.timeoff.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Processing event scheduling.coverage.checked: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Processing event scheduling.coverage.arranged: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Processing event staff.timeoff.approved: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order 111ms
stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:08) { noncePrefix: [32m'rmrj16bq'[39m, timestamp: [32m'1757789348569'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:08)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:08)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:08) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:08) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348572_2a1l8xlob'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348572_egbl6p9zn'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348573_a84flqzzc'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348573_hrlai2n2j'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348574_sljh9f4gu'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757789348574_c20wcvgbo) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348574_c20wcvgbo'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Processing event payment.card.declined: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Processing event payment.retry.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Processing event payment.card.authorized: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Placeholder: Module test-payment handler test-payment.processCardPayment called for payment.card.authorized

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests 111ms
stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:08) { noncePrefix: [32m'w38z6g4y'[39m, timestamp: [32m'1757789348625'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:08)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:08)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:08) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:08) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348628_k64xbsy5w'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348628_w9ghsbm5d'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757789348629_eufy6mkxl) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348629_eufy6mkxl'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[EventBus] Processing event staff.skills.assessed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[EventBus] Processing event staff.development.plan_created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[EventBus] Processing event staff.training.enrolled: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[EventBus] Processing event staff.certification.renewed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Error unsubscribing sub_1757789348420_25ijfh2na: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789348420_71swd8n58: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Error unsubscribing sub_1757789348418_ttnuutwhu: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Error unsubscribing sub_1757789348415_3ldcos9e6: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789348416_3f4ralpw9: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:49:08)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:49:08)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:49:08)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:08)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:49:08)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:49:08) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:49:08)

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:08) { noncePrefix: [32m'66jlt1rm'[39m, timestamp: [32m'1757789348653'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:08)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:08)

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:49:08) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:08) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:08) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348655_zdvl7z4nd'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348655_dcp7mnjjv'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348657_bx2mdgnic'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348659_fi1qkv6c8'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348659_fjvdlbw37'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757789348660_5zhtkfduo) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348660_5zhtkfduo'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.reservation.requested
[EventBus] Subscription added: inventory.stock.reservation.requested (sub_1757789348660_qvtn77pzc) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.reserved
[EventBus] Subscription added: inventory.stock.reserved (sub_1757789348661_doukj0me1) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.reservation.expired
[EventBus] Subscription added: inventory.stock.reservation.expired (sub_1757789348661_gi8fmtobs) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.released
[EventBus] Subscription added: inventory.stock.released (sub_1757789348661_ta4x1uc4k) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348660_qvtn77pzc'[39m,
  pattern: [32m'inventory.stock.reservation.requested'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348661_doukj0me1'[39m,
  pattern: [32m'inventory.stock.reserved'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348661_gi8fmtobs'[39m,
  pattern: [32m'inventory.stock.reservation.expired'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348661_ta4x1uc4k'[39m,
  pattern: [32m'inventory.stock.released'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Processing event inventory.stock.reservation.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Processing event inventory.stock.reserved: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting 114ms
stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:08) { noncePrefix: [32m'mobpknwb'[39m, timestamp: [32m'1757789348689'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:08)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:08)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:08) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:08) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348691_6pgf3jds5'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348691_9m1k3brrj'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348692_n23cm5qlq'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348693_tvxrwomry'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348693_hxjb1gel6'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757789348694_fli7127ot) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348694_fli7127ot'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Processing event payment.timeout: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Processing event payment.queued_offline: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Processing event payment.processing_resumed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Processing event payment.card.authorized: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Placeholder: Module test-payment handler test-payment.processCardPayment called for payment.card.authorized

 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow 107ms
stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:08) { noncePrefix: [32m'rm48kojf'[39m, timestamp: [32m'1757789348736'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:08)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:08)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:08) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:08) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348738_85fp55i0s'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348738_wdrjdy133'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m, [32m'test-scheduling'[39m ]
[ModuleRegistry] Module 'test-scheduling' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Activating module 'test-scheduling'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Directly activating module 'test-scheduling'...
[TestSchedulingModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-scheduling'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Module health changed: test-scheduling -> active
[ModuleRegistry] Module 'test-scheduling' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Module 'test-scheduling' activated directly
[EventBus] Module activated: test-scheduling
[EventBus] Auto-registering handlers for module: test-scheduling
[EventBus] Auto-registered handler: test-scheduling.recordShiftAssignment for pattern: staff.shift.assigned
[EventBus] Auto-registered handler: test-scheduling.processShiftSwap for pattern: staff.shift.swapped
[EventBus] Auto-registered 2/2 handlers for module: test-scheduling

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Adding subscription to weak subscription manager for pattern: staff.shift.assigned
[EventBus] Adding subscription to weak subscription manager for pattern: staff.shift.swapped

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348740_o0ceephhs'[39m,
  pattern: [32m'staff.shift.assigned'[39m,
  moduleId: [32m'test-scheduling'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348740_h9vsoc2s6'[39m,
  pattern: [32m'staff.shift.swapped'[39m,
  moduleId: [32m'test-scheduling'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-scheduling'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Scheduling Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757789348741_7ezryk4sb) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348741_7ezryk4sb'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Processing event staff.termination.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Processing event staff.equipment.returned: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Processing event staff.access.revoked: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Processing event scheduling.staff.removed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Processing event staff.termination.completed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders 240ms
stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Processing event inventory.stock.reservation.expired: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Processing event inventory.stock.released: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries 120ms
stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:08) { noncePrefix: [32m'rxsh58fm'[39m, timestamp: [32m'1757789348801'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:08)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:08)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:08) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:08) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348803_iix98rntk'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348803_9btrqo0bj'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348804_80hhlc5f0'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348805_s6xaebd4v'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348805_gei9kvsei'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m, [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348806_5rwfhmqdj'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348806_7ofo1ct3u'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757789348807_s0eaydug8) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348807_s0eaydug8'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event refund.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event refund.approved: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event inventory.returned: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event inventory.returned: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event refund.payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event refund.payment.authorized: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event refund.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event fiscal.credit_note.generated: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking 112ms
stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:08) { noncePrefix: [32m'ktrhuy7c'[39m, timestamp: [32m'1757789348847'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:08)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:08)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:08) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:08) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348849_ov7unkf4n'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348849_f01i8kxuo'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757789348850_g8zidzffx) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348850_g8zidzffx'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[EventBus] Processing event staff.incident.reported: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[EventBus] Processing event staff.incident.first_aid_provided: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[EventBus] Processing event staff.incident.investigated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[EventBus] Processing event staff.incident.action_plan_created: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing 111ms
stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:08) { noncePrefix: [32m'odh0ym50'[39m, timestamp: [32m'1757789348915'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:08)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:08)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:08) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:08) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348917_cnao2ex9h'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348917_di0fvx1b3'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348923_fe6xu81zt'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348924_h84umz9jh'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348924_k6lvztczn'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m, [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348925_p6xaij617'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348925_k7bwxvkxq'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757789348926_hjajps8nh) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348926_hjajps8nh'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Processing event refund.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Processing event inventory.returned: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Processing event refund.payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Processing event refund.completed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow 111ms
stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:08) { noncePrefix: [32m'bnpujpvo'[39m, timestamp: [32m'1757789348962'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:08)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:08)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:08) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:08) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348964_h8kl0k5j5'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348964_hoojsfpjk'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757789348965_qp1oitw7j) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348965_qp1oitw7j'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[EventBus] Processing event staff.time.clock_in: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[EventBus] Processing event staff.time.clock_out: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[EventBus] Processing event staff.time.adjusted: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[EventBus] Processing event staff.payroll.calculated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:08) { noncePrefix: [32m'ujquz7g1'[39m, timestamp: [32m'1757789348978'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:08)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:08)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:08) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:08) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348980_dyvc7yxzl'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348980_93r4de3cm'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348982_skbpkbohu'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348982_7gw9mfp53'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348982_vjqipk1ip'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Error unsubscribing sub_1757789348659_fi1qkv6c8: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789348659_fjvdlbw37: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757789348983_909b9vglx) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348983_909b9vglx'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Processing event payment.tip.added: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Processing event payment.tip.distribution.calculated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Processing event payment.tip.allocated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Processing event payment.tip.allocated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Error unsubscribing sub_1757789348657_bx2mdgnic: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Processing event payment.tip.daily_summary: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Error unsubscribing sub_1757789348655_zdvl7z4nd: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789348655_dcp7mnjjv: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:49:08)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:49:08)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:49:08)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:08)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:49:08)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:49:08) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:49:08)

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:08) { noncePrefix: [32m'selgs7ng'[39m, timestamp: [32m'1757789348991'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:08)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:08)

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:49:08) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:08) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:08) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:08) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:08) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:08) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348993_h00cd30lk'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348993_onps1isz5'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348996_ry5pj3rdq'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348997_nxv6ogtog'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348997_ormx0cjat'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ÑπÔ∏è [EventBus] Module registered (03:49:08) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757789348998_956lszcwv) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348998_956lszcwv'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Adding subscription to weak subscription manager for pattern: suppliers.order.placed
[EventBus] Subscription added: suppliers.order.placed (sub_1757789348999_936t6amh5) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: suppliers.order.confirmed
[EventBus] Subscription added: suppliers.order.confirmed (sub_1757789348999_uq1ft6spi) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: suppliers.delivery.arrived
[EventBus] Subscription added: suppliers.delivery.arrived (sub_1757789348999_g2xgvfu55) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: suppliers.delivery.processed
[EventBus] Subscription added: suppliers.delivery.processed (sub_1757789348999_5un3ly8wq) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348999_936t6amh5'[39m,
  pattern: [32m'suppliers.order.placed'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348999_uq1ft6spi'[39m,
  pattern: [32m'suppliers.order.confirmed'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348999_g2xgvfu55'[39m,
  pattern: [32m'suppliers.delivery.arrived'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:08) {
  subscriptionId: [32m'sub_1757789348999_5un3ly8wq'[39m,
  pattern: [32m'suppliers.delivery.processed'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event suppliers.order.placed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow 115ms
 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items 63ms
 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting 115ms
 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking 63ms
stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event suppliers.order.confirmed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration 338ms
stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:09) { noncePrefix: [32m'pu2qn0pr'[39m, timestamp: [32m'1757789349090'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:09)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:09)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:09) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:09) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:09) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:09) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:09) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349092_3y9919agw'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349092_c0m4gjdx8'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
‚ÑπÔ∏è [EventBus] Module registered (03:49:09) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349094_33i6x2l7y'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349094_s7qjqf45s'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349094_1ndzw7qj4'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
‚ÑπÔ∏è [EventBus] Module registered (03:49:09) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757789349095_8xar8o78b) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349095_8xar8o78b'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Processing event payment.auto_gratuity.calculated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Processing event payment.auto_gratuity.disclosed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow 112ms
 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups 66ms
stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:09) { noncePrefix: [32m't89ng53e'[39m, timestamp: [32m'1757789349157'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:09)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:09)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:09) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:09) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:09) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:09) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:09) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
Complete order workflow executed: order-created ‚Üí stock-check ‚Üí stock-reserved ‚Üí stock-check ‚Üí stock-reserved ‚Üí payment-requested ‚Üí payment-processed ‚Üí kitchen-received ‚Üí kitchen-completed ‚Üí order-fulfilled ‚Üí customer-notified

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349158_h3ba3a5h2'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349158_oilo82vij'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
‚ÑπÔ∏è [EventBus] Module registered (03:49:09) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349160_5r35tqi2v'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349160_7de784bny'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349160_pnig7zgti'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
‚ÑπÔ∏è [EventBus] Module registered (03:49:09) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757789349161_i3z7qd2i7) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349161_i3z7qd2i7'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Processing event payment.reconciliation.daily: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Error unsubscribing sub_1757789348041_r3jok8ryz: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789348041_3wmksmwus: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event suppliers.delivery.arrived: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Error unsubscribing sub_1757789348039_6nvgstmwg: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event suppliers.delivery.processed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Error unsubscribing sub_1757789348035_nnbkh4biy: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789348036_u5vqxr8qn: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:49:09)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:49:09)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:49:09)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:09)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:49:09)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:49:09) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:49:09)

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:09) { noncePrefix: [32m'fc799p2p'[39m, timestamp: [32m'1757789349179'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:09)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:09)

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:49:09) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:09) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:09) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:09) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:09) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:09) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349182_vnxfcks12'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349182_r6v74gryh'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ÑπÔ∏è [EventBus] Module registered (03:49:09) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349184_m3pcrds7z'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ÑπÔ∏è [EventBus] Module registered (03:49:09) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349185_kehxw1gok'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349186_7zjzg4788'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ÑπÔ∏è [EventBus] Module registered (03:49:09) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757789349187_h4iyvy47a) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.cancellation.requested
[EventBus] Subscription added: sales.order.cancellation.requested (sub_1757789349187_1j52gqr0q) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.released
[EventBus] Subscription added: inventory.stock.released (sub_1757789349187_dm9we5ns3) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: payments.refund.requested
[EventBus] Subscription added: payments.refund.requested (sub_1757789349187_kafz1ujt7) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.cancelled
[EventBus] Subscription added: sales.order.cancelled (sub_1757789349188_5vide9sde) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349187_h4iyvy47a'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349187_1j52gqr0q'[39m,
  pattern: [32m'sales.order.cancellation.requested'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349187_dm9we5ns3'[39m,
  pattern: [32m'inventory.stock.released'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349187_kafz1ujt7'[39m,
  pattern: [32m'payments.refund.requested'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349188_5vide9sde'[39m,
  pattern: [32m'sales.order.cancelled'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[TestCustomers] Updated activity for customer CUST-VIP-001

 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report 69ms
 ‚úì src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment 1151ms
stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Processing event sales.order.cancellation.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Processing event inventory.stock.released: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Processing event payments.refund.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Processing event sales.order.cancelled: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Error unsubscribing sub_1757789348997_nxv6ogtog: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789348997_ormx0cjat: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Error unsubscribing sub_1757789348996_ry5pj3rdq: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Error unsubscribing sub_1757789348993_h00cd30lk: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789348993_onps1isz5: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:49:09)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:49:09)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:49:09)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:09)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:49:09)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:49:09) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:49:09)

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:09) { noncePrefix: [32m'l1b41nu6'[39m, timestamp: [32m'1757789349417'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:09)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:09)

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:49:09) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:09) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:09) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:09) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:09) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:09) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349419_egu15avak'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349419_uoamt01zv'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ÑπÔ∏è [EventBus] Module registered (03:49:09) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349420_6y2jxu08o'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ÑπÔ∏è [EventBus] Module registered (03:49:09) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349422_ohr3lobty'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349422_hkv0jvnd0'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ÑπÔ∏è [EventBus] Module registered (03:49:09) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757789349422_3vlceo1xk) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349422_3vlceo1xk'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Adding subscription to weak subscription manager for pattern: suppliers.delivery.arrived
[EventBus] Subscription added: suppliers.delivery.arrived (sub_1757789349423_km178mu9w) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: suppliers.delivery.discrepancy
[EventBus] Subscription added: suppliers.delivery.discrepancy (sub_1757789349423_muw9kblt8) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: suppliers.discrepancy.reported
[EventBus] Subscription added: suppliers.discrepancy.reported (sub_1757789349423_p4xax3t71) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349423_km178mu9w'[39m,
  pattern: [32m'suppliers.delivery.arrived'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349423_muw9kblt8'[39m,
  pattern: [32m'suppliers.delivery.discrepancy'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349423_p4xax3t71'[39m,
  pattern: [32m'suppliers.discrepancy.reported'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Processing event suppliers.delivery.arrived: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Processing event suppliers.delivery.discrepancy: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Processing event suppliers.discrepancy.reported: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle 426ms
stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Error unsubscribing sub_1757789349422_ohr3lobty: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789349422_hkv0jvnd0: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Error unsubscribing sub_1757789349420_6y2jxu08o: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Error unsubscribing sub_1757789349419_egu15avak: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789349419_uoamt01zv: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:49:09)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:49:09)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:49:09)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:09)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:49:09)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:49:09) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:49:09)

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:09) { noncePrefix: [32m'08ml5xx8'[39m, timestamp: [32m'1757789349638'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:09)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:09)

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:49:09) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:09) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:09) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:09) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:09) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:09) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349639_834hglo4i'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349640_yaa6lsuzb'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ÑπÔ∏è [EventBus] Module registered (03:49:09) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349645_i4fm8mf11'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ÑπÔ∏è [EventBus] Module registered (03:49:09) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349646_x6kwzzdtk'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349647_wco3km7d0'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ÑπÔ∏è [EventBus] Module registered (03:49:09) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757789349647_j99e13pna) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349647_j99e13pna'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.item.expired
[EventBus] Subscription added: inventory.item.expired (sub_1757789349648_qpovictkr) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.item.damaged
[EventBus] Subscription added: inventory.item.damaged (sub_1757789349648_tij7drlhi) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.waste.recorded
[EventBus] Subscription added: inventory.waste.recorded (sub_1757789349648_kwx924xnm) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.waste.threshold.exceeded
[EventBus] Subscription added: inventory.waste.threshold.exceeded (sub_1757789349648_3ab5yamj4) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349648_qpovictkr'[39m,
  pattern: [32m'inventory.item.expired'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349648_tij7drlhi'[39m,
  pattern: [32m'inventory.item.damaged'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349648_kwx924xnm'[39m,
  pattern: [32m'inventory.waste.recorded'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349648_3ab5yamj4'[39m,
  pattern: [32m'inventory.waste.threshold.exceeded'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event inventory.item.expired: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event inventory.waste.recorded: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event inventory.waste.threshold.exceeded: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event inventory.item.damaged: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event inventory.waste.recorded: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event inventory.waste.threshold.exceeded: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies 221ms
stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Error unsubscribing sub_1757789349185_kehxw1gok: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789349186_7zjzg4788: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Error unsubscribing sub_1757789349184_m3pcrds7z: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Error unsubscribing sub_1757789349182_vnxfcks12: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789349182_r6v74gryh: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:49:09)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:49:09)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:49:09)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:09)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:49:09)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:49:09) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:49:09)

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:09) { noncePrefix: [32m'alojaht4'[39m, timestamp: [32m'1757789349831'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:09)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:09)

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:49:09) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:09) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:09) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:09) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:09) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:09) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349833_g6v0cf3pm'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349833_9pra4aoaz'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ÑπÔ∏è [EventBus] Module registered (03:49:09) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349835_zj9i6nz6g'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ÑπÔ∏è [EventBus] Module registered (03:49:09) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349836_3k7efauz6'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349836_mbza969d4'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ÑπÔ∏è [EventBus] Module registered (03:49:09) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757789349837_26s8pd5vf) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.check
[EventBus] Subscription added: inventory.stock.check (sub_1757789349837_ajt9n94nk) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.insufficient
[EventBus] Subscription added: inventory.stock.insufficient (sub_1757789349838_n8yf6iqyw) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.stock.problem
[EventBus] Subscription added: sales.order.stock.problem (sub_1757789349838_yna993da0) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349837_26s8pd5vf'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349837_ajt9n94nk'[39m,
  pattern: [32m'inventory.stock.check'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349838_n8yf6iqyw'[39m,
  pattern: [32m'inventory.stock.insufficient'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349838_yna993da0'[39m,
  pattern: [32m'sales.order.stock.problem'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[TestCustomers] Updated activity for customer CUST-001

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event inventory.stock.check: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event inventory.stock.insufficient: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event sales.order.stock.problem: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event customers.notification.sent: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event inventory.stock.check: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow 652ms
stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Error unsubscribing sub_1757789349646_x6kwzzdtk: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789349647_wco3km7d0: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Error unsubscribing sub_1757789349645_i4fm8mf11: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Error unsubscribing sub_1757789349639_834hglo4i: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789349640_yaa6lsuzb: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:49:09)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:49:09)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:49:09)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:09)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:49:09)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:49:09) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:49:09)

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:09) { noncePrefix: [32m'gq8yb4rz'[39m, timestamp: [32m'1757789349974'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:09)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:09)

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:49:09) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:09) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:09) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:09) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:09) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:09) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349975_68az2shqo'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349975_ox71w2dp9'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ÑπÔ∏è [EventBus] Module registered (03:49:09) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349977_pjc1roe40'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ÑπÔ∏è [EventBus] Module registered (03:49:09) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349978_uc3zvu2jb'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349978_a7dyn6kv1'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ÑπÔ∏è [EventBus] Module registered (03:49:09) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757789349979_l8pren2ya) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349979_l8pren2ya'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.waste.analysis.requested
[EventBus] Subscription added: inventory.waste.analysis.requested (sub_1757789349979_xbiwyirpe) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.waste.analysis.completed
[EventBus] Subscription added: inventory.waste.analysis.completed (sub_1757789349980_85sv7f2b0) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349979_xbiwyirpe'[39m,
  pattern: [32m'inventory.waste.analysis.requested'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:09) {
  subscriptionId: [32m'sub_1757789349980_85sv7f2b0'[39m,
  pattern: [32m'inventory.waste.analysis.completed'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Processing event inventory.waste.analysis.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Processing event inventory.waste.analysis.completed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste 336ms
stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Error unsubscribing sub_1757789349836_3k7efauz6: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789349836_mbza969d4: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Error unsubscribing sub_1757789349835_zj9i6nz6g: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Error unsubscribing sub_1757789349833_g6v0cf3pm: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789349833_9pra4aoaz: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:49:10)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:49:10)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:49:10)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:10)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:49:10)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:49:10) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:49:10)

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:10) { noncePrefix: [32m'vj8872zy'[39m, timestamp: [32m'1757789350163'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:10)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:10)

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:49:10) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:10) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:10) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:10) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:10) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:10) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350166_h4b5ja3cz'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350166_3h2vzs778'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ÑπÔ∏è [EventBus] Module registered (03:49:10) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350168_y553zutqa'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ÑπÔ∏è [EventBus] Module registered (03:49:10) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350169_e89vbp9ag'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350169_06008bnqu'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ÑπÔ∏è [EventBus] Module registered (03:49:10) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757789350170_1vur987zh) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.order.received
[EventBus] Subscription added: kitchen.order.received (sub_1757789350170_yqxsum580) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350170_1vur987zh'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350170_yqxsum580'[39m,
  pattern: [32m'kitchen.order.received'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[TestCustomers] Updated activity for customer CUST-REG-002

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Processing event kitchen.order.received: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[TestCustomers] Updated activity for customer CUST-VIP-001

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Processing event kitchen.order.received: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Error unsubscribing sub_1757789349978_uc3zvu2jb: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789349978_a7dyn6kv1: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Error unsubscribing sub_1757789349977_pjc1roe40: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Error unsubscribing sub_1757789349975_68az2shqo: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789349975_ox71w2dp9: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:49:10)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:49:10)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:49:10)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:10)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:49:10)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:49:10) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:49:10)

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:10) { noncePrefix: [32m'8k62uifw'[39m, timestamp: [32m'1757789350203'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:10)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:10)

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:49:10) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:10) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:10) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:10) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:10) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:10) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350205_4nzpih93u'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350205_ocanpmr9d'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ÑπÔ∏è [EventBus] Module registered (03:49:10) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350206_b6ymyc10n'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ÑπÔ∏è [EventBus] Module registered (03:49:10) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350208_uqxak20os'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350208_1vu31cdxh'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ÑπÔ∏è [EventBus] Module registered (03:49:10) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757789350209_pz5q7wbth) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350209_pz5q7wbth'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Adding subscription to weak subscription manager for pattern: sales.item.sold
[EventBus] Subscription added: sales.item.sold (sub_1757789350209_qa5792xy5) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.optimization.analysis.requested
[EventBus] Subscription added: inventory.optimization.analysis.requested (sub_1757789350209_ygnedvaau) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.optimization.recommendations.generated
[EventBus] Subscription added: inventory.optimization.recommendations.generated (sub_1757789350210_2t73zkj48) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350209_qa5792xy5'[39m,
  pattern: [32m'sales.item.sold'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350209_ygnedvaau'[39m,
  pattern: [32m'inventory.optimization.analysis.requested'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350210_2t73zkj48'[39m,
  pattern: [32m'inventory.optimization.recommendations.generated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event sales.item.sold: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event sales.item.sold: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event sales.item.sold: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event sales.item.sold: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event sales.item.sold: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event sales.item.sold: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event inventory.optimization.analysis.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event inventory.optimization.recommendations.generated: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios 332ms
 ‚úì src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations 230ms
stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Error unsubscribing sub_1757789350169_e89vbp9ag: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789350169_06008bnqu: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Error unsubscribing sub_1757789350168_y553zutqa: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Error unsubscribing sub_1757789350166_h4b5ja3cz: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789350166_3h2vzs778: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:49:10)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:49:10)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:49:10)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:10)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:49:10)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:49:10) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:49:10)

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:10) { noncePrefix: [32m'y8k7nu7i'[39m, timestamp: [32m'1757789350426'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:10)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:10)

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:49:10) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:10) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:10) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:10) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:10) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:10) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350427_eo593pcew'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350428_084teqt5a'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ÑπÔ∏è [EventBus] Module registered (03:49:10) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350429_v3zb8t25z'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ÑπÔ∏è [EventBus] Module registered (03:49:10) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350430_bupsj1xj2'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350430_s7t7ldqyv'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ÑπÔ∏è [EventBus] Module registered (03:49:10) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757789350431_5swipbdec) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.discount.applied
[EventBus] Subscription added: sales.discount.applied (sub_1757789350431_kby1j5nil) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350431_5swipbdec'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350431_kby1j5nil'[39m,
  pattern: [32m'sales.discount.applied'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[TestCustomers] Updated activity for customer CUST-VIP-001

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Processing event sales.discount.applied: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Processing event customers.loyalty.points.awarded: Found 0 matching subscriptions

 ‚úì src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders 262ms
stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Error unsubscribing sub_1757789350208_uqxak20os: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789350208_1vu31cdxh: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Error unsubscribing sub_1757789350206_b6ymyc10n: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Error unsubscribing sub_1757789350205_4nzpih93u: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789350205_ocanpmr9d: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:49:10)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:49:10)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:49:10)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:10)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:49:10)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:49:10) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:49:10)

 ‚úì src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns 335ms
stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Error unsubscribing sub_1757789350430_bupsj1xj2: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789350430_s7t7ldqyv: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Error unsubscribing sub_1757789350429_v3zb8t25z: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Error unsubscribing sub_1757789350427_eo593pcew: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789350428_084teqt5a: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:49:10)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:49:10)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:49:10)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:10)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:49:10)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:49:10) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:49:10)

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:10) { noncePrefix: [32m'ycnglo53'[39m, timestamp: [32m'1757789350665'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:10)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:10)

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:49:10) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:10) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:10) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:10) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:10) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:10) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350667_3gvgcf6s6'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350667_0l7jswnzt'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ÑπÔ∏è [EventBus] Module registered (03:49:10) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350668_z952n2g5n'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ÑπÔ∏è [EventBus] Module registered (03:49:10) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350669_9154zlfzv'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350670_8fc3u4lkq'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ÑπÔ∏è [EventBus] Module registered (03:49:10) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757789350671_o4ijljrp0) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.item.preparation.scheduled
[EventBus] Subscription added: kitchen.item.preparation.scheduled (sub_1757789350671_v59ectk4j) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.item.preparation.completed
[EventBus] Subscription added: kitchen.item.preparation.completed (sub_1757789350671_1xy9df1ch) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.order.assembly.ready
[EventBus] Subscription added: kitchen.order.assembly.ready (sub_1757789350671_oznernf56) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350671_o4ijljrp0'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350671_v59ectk4j'[39m,
  pattern: [32m'kitchen.item.preparation.scheduled'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350671_1xy9df1ch'[39m,
  pattern: [32m'kitchen.item.preparation.completed'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:10) {
  subscriptionId: [32m'sub_1757789350671_oznernf56'[39m,
  pattern: [32m'kitchen.order.assembly.ready'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[TestCustomers] Updated activity for customer CUST-001

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event kitchen.item.preparation.scheduled: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event kitchen.item.preparation.scheduled: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event kitchen.item.preparation.scheduled: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event kitchen.item.preparation.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event kitchen.item.preparation.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event kitchen.item.preparation.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event kitchen.order.assembly.ready: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event kitchen.order.completed: Found 0 matching subscriptions

 ‚úì src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits 239ms
stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Error unsubscribing sub_1757789350669_9154zlfzv: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789350670_8fc3u4lkq: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Error unsubscribing sub_1757789350668_z952n2g5n: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Error unsubscribing sub_1757789350667_3gvgcf6s6: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789350667_0l7jswnzt: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:49:11)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:49:11)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:49:11)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:11)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:49:11)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:49:11) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:49:11)

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ÑπÔ∏è [Security] New CSP nonce generated (03:49:11) { noncePrefix: [32m'phur689e'[39m, timestamp: [32m'1757789351503'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (03:49:11)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (03:49:11)

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (03:49:11) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (03:49:11) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (03:49:11) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (03:49:11) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (03:49:11) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (03:49:11) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:11) {
  subscriptionId: [32m'sub_1757789351504_7a1ctn7yi'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:11) {
  subscriptionId: [32m'sub_1757789351505_wemkik9rm'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ÑπÔ∏è [EventBus] Module registered (03:49:11) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:11) {
  subscriptionId: [32m'sub_1757789351506_oevkvqc35'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ÑπÔ∏è [EventBus] Module registered (03:49:11) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:11) {
  subscriptionId: [32m'sub_1757789351507_2x1pq2vk3'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:11) {
  subscriptionId: [32m'sub_1757789351507_xolrbliwd'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ÑπÔ∏è [EventBus] Module registered (03:49:11) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757789351508_jcxfggtzo) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.order.received
[EventBus] Subscription added: kitchen.order.received (sub_1757789351508_01dcjw5u3) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.order.error
[EventBus] Subscription added: kitchen.order.error (sub_1757789351509_87ym3z14f) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: operations.error.recovery.initiated
[EventBus] Subscription added: operations.error.recovery.initiated (sub_1757789351509_lrds9990r) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: customers.compensation.offered
[EventBus] Subscription added: customers.compensation.offered (sub_1757789351509_vqlya6l3g) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:11) {
  subscriptionId: [32m'sub_1757789351508_jcxfggtzo'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:11) {
  subscriptionId: [32m'sub_1757789351508_01dcjw5u3'[39m,
  pattern: [32m'kitchen.order.received'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:11) {
  subscriptionId: [32m'sub_1757789351509_87ym3z14f'[39m,
  pattern: [32m'kitchen.order.error'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:11) {
  subscriptionId: [32m'sub_1757789351509_lrds9990r'[39m,
  pattern: [32m'operations.error.recovery.initiated'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (03:49:11) {
  subscriptionId: [32m'sub_1757789351509_vqlya6l3g'[39m,
  pattern: [32m'customers.compensation.offered'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[TestCustomers] Updated activity for customer CUST-001

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event kitchen.order.received: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements 838ms
stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event kitchen.order.error: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event operations.error.recovery.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event customers.compensation.offered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event sales.order.compensated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Error unsubscribing sub_1757789351507_2x1pq2vk3: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789351507_xolrbliwd: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Error unsubscribing sub_1757789351506_oevkvqc35: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Error unsubscribing sub_1757789351504_7a1ctn7yi: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757789351505_wemkik9rm: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:33[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (03:49:12)
‚ùå [Security] [SECURITY] RateLimiter destroyed (03:49:12)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (03:49:12)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (03:49:12)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (03:49:12)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (03:49:12) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (03:49:12)

 ‚úì src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation 632ms

 Test Files  4 passed (4)
      Tests  37 passed (37)
   Start at  15:49:05
   Duration  6.93s (transform 737ms, setup 1.29s, collect 1.89s, tests 8.84s, environment 5.68s, prepare 883ms)

