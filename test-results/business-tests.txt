
 RUN  v3.2.4 I:/Programacion/Proyectos/g-mini

stdout | src/lib/events/__tests__/business/staff-management.test.ts
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:56) { noncePrefix: [32m'0oekqnq1'[39m, timestamp: [32m'1757793716246'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:56)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/__tests__/business/staff-management.test.ts
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:56) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/business/staff-management.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'ee37857d...'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'ee37857d...'[39m }

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:56) { noncePrefix: [32m'kbbkpza7'[39m, timestamp: [32m'1757793716273'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:56)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:56) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716280_b2ropq3ki'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716280_jp8ld7029'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m, [32m'test-scheduling'[39m ]
[ModuleRegistry] Module 'test-scheduling' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Activating module 'test-scheduling'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Directly activating module 'test-scheduling'...
[TestSchedulingModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Registering 2 subscriptions for module 'test-scheduling'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Module health changed: test-scheduling -> active
[ModuleRegistry] Module 'test-scheduling' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[ModuleRegistry] Module 'test-scheduling' activated directly
[EventBus] Module activated: test-scheduling
[EventBus] Auto-registering handlers for module: test-scheduling
[EventBus] Auto-registered handler: test-scheduling.recordShiftAssignment for pattern: staff.shift.assigned
[EventBus] Auto-registered handler: test-scheduling.processShiftSwap for pattern: staff.shift.swapped
[EventBus] Auto-registered 2/2 handlers for module: test-scheduling

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Adding subscription to weak subscription manager for pattern: staff.shift.assigned
[EventBus] Adding subscription to weak subscription manager for pattern: staff.shift.swapped

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716283_5hh4aykdt'[39m,
  pattern: [32m'staff.shift.assigned'[39m,
  moduleId: [32m'test-scheduling'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716284_bdut45iu6'[39m,
  pattern: [32m'staff.shift.swapped'[39m,
  moduleId: [32m'test-scheduling'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-scheduling'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Scheduling Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Adding subscription to weak subscription manager for pattern: **
[EventBus] Subscription added: ** (sub_1757793716285_omm1l6q3m) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716285_omm1l6q3m'[39m,
  pattern: [32m'**'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event staff.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event staff.documents.submitted: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event staff.training.assigned: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:56) { noncePrefix: [32m'3uxdyo7s'[39m, timestamp: [32m'1757793716286'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:56)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event staff.training.completed: Found 1 matching subscriptions

stderr | src/lib/events/__tests__/business/payment-processing.test.ts
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:56) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event staff.training.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event staff.training.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event staff.equipment.assigned: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event scheduling.staff.assigned: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process
[EventBus] Processing event staff.onboarding.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:56) { noncePrefix: [32m'gvla34dx'[39m, timestamp: [32m'1757793716286'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:56)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:56) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:56) { noncePrefix: [32m'1qynv8k0'[39m, timestamp: [32m'1757793716281'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:56)
[EventStore] Starting init... (dbName: g-admin-eventbus-v2)
[EventStore] Starting new initialization...
[EventStore] Opening IndexedDB: g-admin-eventbus-v2 v1

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] ANOMALY: SecureRandomGenerator initialized (05:01:56) { cryptoSupport: [32m'true'[39m, entropyPoolSize: [32m'1024'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:56) {
  xssProtection: [32m'true'[39m,
  sqlProtection: [32m'true'[39m,
  htmlSanitization: [32m'true'[39m
}

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'21041dab...'[39m }

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'21041dab...'[39m }

stderr | src/lib/events/__tests__/business/payment-processing.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'e6a47140...'[39m }

stderr | src/lib/events/__tests__/business/payment-processing.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'e6a47140...'[39m }

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts
‚ùå [Security] [SECURITY] ANOMALY: Client ID stored securely (05:01:56) { storageType: [32m'sessionStorage'[39m, clientIdPrefix: [32m'e0b29b83...'[39m }

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts
‚ùå [Security] [SECURITY] ANOMALY: New client ID generated (05:01:56) { reason: [32m'No valid existing ID found'[39m, newId: [32m'e0b29b83...'[39m }

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:56) { noncePrefix: [32m'l11q4gvp'[39m, timestamp: [32m'1757793716298'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:56)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:56) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:56) { noncePrefix: [32m'o0j7mrjd'[39m, timestamp: [32m'1757793716300'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:56)

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[ModuleRegistry] Activating module 'test-fiscal'...

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716305_l5x4wjg2c'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716305_ry99zgibr'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:56) { noncePrefix: [32m'ph7pdy09'[39m, timestamp: [32m'1757793716295'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:56)

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:56) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716308_rk3w4fqbq'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716308_9t9tuh5z0'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716308_atdu3kxse'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:56) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716306_y74hhxzox'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716307_jbhlibjg8'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757793716310_jqt69k1fu) [moduleId: anonymous]

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716310_jqt69k1fu'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Processing event payment.cash.received: Found 2 matching subscriptions

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716301_55ggv7cfh'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716301_vn7570taz'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Placeholder: Module test-payment handler test-payment.processCashPayment called for payment.cash.received

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Processing event payment.change.calculated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716310_4baj8nxjl'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Processing event fiscal.receipt.generated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow
[EventBus] Processing event payment.cash_register.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716304_f69coyd1t'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716312_0yrmmak7z'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716312_05op33006'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716307_cgv5j3rvh'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716307_6zx4tkczm'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757793716308_aocxdboe1) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716308_aocxdboe1'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757793716314_rkjpma0ig) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.check
[EventBus] Subscription added: inventory.stock.check (sub_1757793716314_grstspqn6) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.reserved
[EventBus] Subscription added: inventory.stock.reserved (sub_1757793716314_0c5j4z6jz) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: payments.payment.requested
[EventBus] Subscription added: payments.payment.requested (sub_1757793716314_xlh707u5u) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: payments.payment.processed
[EventBus] Subscription added: payments.payment.processed (sub_1757793716315_t909j214h) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.order.received
[EventBus] Subscription added: kitchen.order.received (sub_1757793716315_fnon3s9p0) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.order.completed
[EventBus] Subscription added: kitchen.order.completed (sub_1757793716315_2wbp6hxep) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.fulfilled
[EventBus] Subscription added: sales.order.fulfilled (sub_1757793716315_mdz5o8daz) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: customers.notification.sent
[EventBus] Subscription added: customers.notification.sent (sub_1757793716316_aj7nul48v) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716314_rkjpma0ig'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716314_grstspqn6'[39m,
  pattern: [32m'inventory.stock.check'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716314_0c5j4z6jz'[39m,
  pattern: [32m'inventory.stock.reserved'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716314_xlh707u5u'[39m,
  pattern: [32m'payments.payment.requested'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716315_t909j214h'[39m,
  pattern: [32m'payments.payment.processed'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716315_fnon3s9p0'[39m,
  pattern: [32m'kitchen.order.received'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716315_2wbp6hxep'[39m,
  pattern: [32m'kitchen.order.completed'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716315_mdz5o8daz'[39m,
  pattern: [32m'sales.order.fulfilled'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716316_aj7nul48v'[39m,
  pattern: [32m'customers.notification.sent'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757793716309_jt9s6k0v4) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Subscription added: inventory.stock.low (sub_1757793716309_qk7gjif79) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.reorder.automatic
[EventBus] Subscription added: inventory.reorder.automatic (sub_1757793716310_kvlje6kjt) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716309_jt9s6k0v4'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716309_qk7gjif79'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716310_kvlje6kjt'[39m,
  pattern: [32m'inventory.reorder.automatic'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[TestCustomers] Updated activity for customer CUST-VIP-001

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Processing event inventory.stock.updated: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event inventory.stock.check: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event inventory.stock.reserved: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Processing event inventory.stock.low: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[TestSales] Handling low stock for Papas Gourmet

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Processing event inventory.reorder.automatic: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event inventory.stock.check: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Processing event suppliers.order.placed: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event inventory.stock.reserved: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event payments.payment.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event payments.payment.processed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event kitchen.order.received: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:56) { noncePrefix: [32m'2dl7oqb6'[39m, timestamp: [32m'1757793716398'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:56)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:56) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716400_vvbnu1b6b'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716400_yh19srvii'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757793716402_o34qadrht) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716402_o34qadrht'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[EventBus] Processing event staff.training.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[EventBus] Processing event staff.training.remedial.assigned: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation
[EventBus] Processing event staff.training.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event kitchen.order.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event sales.order.fulfilled: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Processing event customers.notification.sent: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:56) { noncePrefix: [32m'yc1f51km'[39m, timestamp: [32m'1757793716428'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:56)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:56) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716430_o71zi63mu'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716430_nrif37o9x'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716432_rcvoqz3vk'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716432_in4bj4h9j'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716433_2qzadxdjv'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757793716434_p93u2z3xw) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716434_p93u2z3xw'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Processing event payment.card.info_captured: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Processing event payment.card.authorization_requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Processing event payment.card.authorized: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Placeholder: Module test-payment handler test-payment.processCardPayment called for payment.card.authorized

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Processing event payment.card.captured: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:56) { noncePrefix: [32m'6dvy6hn1'[39m, timestamp: [32m'1757793716468'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:56)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:56) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716471_mrg4ifi4n'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716471_l9mw03hbu'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757793716472_jai7mn2hu) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716472_jai7mn2hu'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[EventBus] Processing event staff.performance.review.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[EventBus] Processing event staff.performance.self_assessment.submitted: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[EventBus] Processing event staff.performance.manager_evaluation.submitted: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process
[EventBus] Processing event staff.performance.review.completed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle complete staff onboarding process 125ms
 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Onboarding Workflow > should handle training failure and remediation 71ms
 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle complete cash payment workflow 130ms
stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:56) { noncePrefix: [32m'xb29epk1'[39m, timestamp: [32m'1757793716547'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:56)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:56) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716550_mpz0dmewn'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716550_16qz8zmnu'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716552_qdd9u3rtz'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716552_rar5efbqp'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716552_lel79ury1'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757793716553_qffrkwtiw) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716553_qffrkwtiw'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Processing event payment.nfc.device_detected: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Processing event payment.nfc.authenticated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Processing event payment.nfc.processed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:56) { noncePrefix: [32m'ffzrwi8d'[39m, timestamp: [32m'1757793716583'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:56)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:56) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716585_y7p0uawmn'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716586_jvj3tssdm'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757793716587_ro6gsw98l) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716587_ro6gsw98l'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Processing event staff.performance.concern.identified: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Processing event staff.pip.created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Processing event staff.pip.checkin: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Processing event staff.pip.checkin: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP)
[EventBus] Processing event staff.pip.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:56) { noncePrefix: [32m'00avg9wb'[39m, timestamp: [32m'1757793716619'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:56)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:56) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716622_ivsxxyzr8'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716622_gxciasvwd'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716624_31z1vuylm'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716624_mqhk995yg'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716624_so0uz6zmp'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757793716625_7fsi5h6a2) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716625_7fsi5h6a2'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event payment.split.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event payment.cash.received: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Placeholder: Module test-payment handler test-payment.processCashPayment called for payment.cash.received

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event payment.card.authorized: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Placeholder: Module test-payment handler test-payment.processCardPayment called for payment.card.authorized

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order
[EventBus] Processing event payment.split.completed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle credit card payment with authorization 120ms
 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Standard Payment Processing > should handle mobile payment (contactless) workflow 71ms
stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Error unsubscribing sub_1757793716307_cgv5j3rvh: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793716307_6zx4tkczm: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Error unsubscribing sub_1757793716304_f69coyd1t: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Error unsubscribing sub_1757793716301_55ggv7cfh: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793716301_vn7570taz: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:56)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:56)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:56)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:56)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:56)

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:56) { noncePrefix: [32m'fksvflm7'[39m, timestamp: [32m'1757793716666'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:56)

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:56) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716669_fxq1wd31z'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716669_lwmciya0w'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716672_8072nq36j'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance review process 115ms
stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716673_bsk8dfxwr'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716674_avotrvpm1'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757793716675_xjnry05go) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716675_xjnry05go'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.reservation.requested
[EventBus] Subscription added: inventory.stock.reservation.requested (sub_1757793716676_za11u5mxj) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.reserved
[EventBus] Subscription added: inventory.stock.reserved (sub_1757793716676_ie9nwd01e) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.reservation.failed
[EventBus] Subscription added: inventory.stock.reservation.failed (sub_1757793716676_6peut4o4x) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716676_za11u5mxj'[39m,
  pattern: [32m'inventory.stock.reservation.requested'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716676_ie9nwd01e'[39m,
  pattern: [32m'inventory.stock.reserved'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716676_6peut4o4x'[39m,
  pattern: [32m'inventory.stock.reservation.failed'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Processing event inventory.stock.reservation.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Processing event inventory.stock.reserved: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Processing event inventory.stock.reservation.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Processing event inventory.stock.reservation.failed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:56) { noncePrefix: [32m'rtn9yj40'[39m, timestamp: [32m'1757793716691'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:56)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:56) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716693_ehbgvpf5v'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716694_36dpj24os'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m, [32m'test-scheduling'[39m ]
[ModuleRegistry] Module 'test-scheduling' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Activating module 'test-scheduling'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Directly activating module 'test-scheduling'...
[TestSchedulingModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Registering 2 subscriptions for module 'test-scheduling'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Module health changed: test-scheduling -> active
[ModuleRegistry] Module 'test-scheduling' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[ModuleRegistry] Module 'test-scheduling' activated directly
[EventBus] Module activated: test-scheduling
[EventBus] Auto-registering handlers for module: test-scheduling
[EventBus] Auto-registered handler: test-scheduling.recordShiftAssignment for pattern: staff.shift.assigned
[EventBus] Auto-registered handler: test-scheduling.processShiftSwap for pattern: staff.shift.swapped
[EventBus] Auto-registered 2/2 handlers for module: test-scheduling

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Adding subscription to weak subscription manager for pattern: staff.shift.assigned
[EventBus] Adding subscription to weak subscription manager for pattern: staff.shift.swapped

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716695_2omm3yrxo'[39m,
  pattern: [32m'staff.shift.assigned'[39m,
  moduleId: [32m'test-scheduling'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716696_vj4zy4qmp'[39m,
  pattern: [32m'staff.shift.swapped'[39m,
  moduleId: [32m'test-scheduling'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-scheduling'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Scheduling Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757793716697_vvyopvbvk) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716697_vvyopvbvk'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Processing event scheduling.shift_swap.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Processing event scheduling.shift_swap.approved: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Processing event scheduling.shift_swap.accepted: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests
[EventBus] Processing event scheduling.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:56) { noncePrefix: [32m'dlwyy2no'[39m, timestamp: [32m'1757793716735'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:56)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:56) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716738_r3r7t5n5l'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716738_kcfmnghcn'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716740_50vm9pnv0'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716740_gxkadscza'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716740_jlad9ha7b'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757793716741_50cbtmdwp) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716741_50cbtmdwp'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.group_split.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.card.authorized: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Placeholder: Module test-payment handler test-payment.processCardPayment called for payment.card.authorized

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.card.authorized: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Placeholder: Module test-payment handler test-payment.processCardPayment called for payment.card.authorized

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.card.authorized: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Placeholder: Module test-payment handler test-payment.processCardPayment called for payment.card.authorized

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting
[EventBus] Processing event payment.group_split.completed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should trigger low stock alerts and automatic reordering 371ms
 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Performance Management Workflow > should handle performance improvement plan (PIP) 107ms
stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:56) { noncePrefix: [32m'p02eqww3'[39m, timestamp: [32m'1757793716801'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:56)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:56) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716803_kqkgzqmkz'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716803_10jyb0wik'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m, [32m'test-scheduling'[39m ]
[ModuleRegistry] Module 'test-scheduling' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Activating module 'test-scheduling'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Directly activating module 'test-scheduling'...
[TestSchedulingModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-scheduling'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Module health changed: test-scheduling -> active
[ModuleRegistry] Module 'test-scheduling' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[ModuleRegistry] Module 'test-scheduling' activated directly
[EventBus] Module activated: test-scheduling
[EventBus] Auto-registering handlers for module: test-scheduling
[EventBus] Auto-registered handler: test-scheduling.recordShiftAssignment for pattern: staff.shift.assigned
[EventBus] Auto-registered handler: test-scheduling.processShiftSwap for pattern: staff.shift.swapped
[EventBus] Auto-registered 2/2 handlers for module: test-scheduling

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Adding subscription to weak subscription manager for pattern: staff.shift.assigned
[EventBus] Adding subscription to weak subscription manager for pattern: staff.shift.swapped

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716805_7fu4dapqq'[39m,
  pattern: [32m'staff.shift.assigned'[39m,
  moduleId: [32m'test-scheduling'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716805_f18k4yqez'[39m,
  pattern: [32m'staff.shift.swapped'[39m,
  moduleId: [32m'test-scheduling'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-scheduling'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Scheduling Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757793716806_2mj17mfc7) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716806_2mj17mfc7'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Processing event staff.timeoff.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Processing event scheduling.coverage.checked: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Processing event scheduling.coverage.arranged: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow
[EventBus] Processing event staff.timeoff.approved: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle multiple payment methods for single order 117ms
stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:56) { noncePrefix: [32m'fos54kwo'[39m, timestamp: [32m'1757793716853'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:56)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:56) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716856_e33xcmptj'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716856_85kgdf9po'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716857_z6ng2q4q8'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716858_cyh1wrdzf'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716858_4ridhzhbx'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757793716859_x0d1hvjd8) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716859_x0d1hvjd8'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Processing event payment.card.declined: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Processing event payment.retry.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Processing event payment.card.authorized: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Placeholder: Module test-payment handler test-payment.processCardPayment called for payment.card.authorized

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle shift swap requests 110ms
stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Error unsubscribing sub_1757793716673_bsk8dfxwr: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793716674_avotrvpm1: RangeError: Maximum call stack size exceeded
    at Map.get (<anonymous>)
    at WeakSubscriptionManager.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\utils\WeakSubscriptionManager.ts:202:45[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:34[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Error unsubscribing sub_1757793716672_8072nq36j: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Error unsubscribing sub_1757793716669_fxq1wd31z: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793716669_lwmciya0w: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:56)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:56)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:56)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:56)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:56)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:56) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:56)

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:56) { noncePrefix: [32m'zrqr1296'[39m, timestamp: [32m'1757793716901'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:56)

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:56) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:56) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716903_3rm2io7pi'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716904_mwa17cd6e'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716905_sqzr4z3wp'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716907_7ainv4p32'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716907_4me1tktlx'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757793716908_ga4f0jj99) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716908_ga4f0jj99'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:56) { noncePrefix: [32m'p4akdidd'[39m, timestamp: [32m'1757793716917'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:56)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:56) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.reservation.requested
[EventBus] Subscription added: inventory.stock.reservation.requested (sub_1757793716909_qwdi6ynhu) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.reserved
[EventBus] Subscription added: inventory.stock.reserved (sub_1757793716909_kor1qplf6) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.reservation.expired
[EventBus] Subscription added: inventory.stock.reservation.expired (sub_1757793716909_37f4vrjsd) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.released
[EventBus] Subscription added: inventory.stock.released (sub_1757793716910_5bnng730i) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716909_qwdi6ynhu'[39m,
  pattern: [32m'inventory.stock.reservation.requested'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716909_kor1qplf6'[39m,
  pattern: [32m'inventory.stock.reserved'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716909_37f4vrjsd'[39m,
  pattern: [32m'inventory.stock.reservation.expired'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716910_5bnng730i'[39m,
  pattern: [32m'inventory.stock.released'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Processing event inventory.stock.reservation.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Processing event inventory.stock.reserved: Found 1 matching subscriptions

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716921_vxrdcdo64'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716921_ccw4y6tdd'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757793716922_713yptc59) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716922_713yptc59'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[EventBus] Processing event staff.skills.assessed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[EventBus] Processing event staff.development.plan_created: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[EventBus] Processing event staff.training.enrolled: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking
[EventBus] Processing event staff.certification.renewed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Split Payment Processing > should handle group payment splitting 117ms
stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:56) { noncePrefix: [32m'8k2b5ys8'[39m, timestamp: [32m'1757793716967'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:56)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:56)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:56) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:56) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:56) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:56) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:56) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716969_u9v9hxfua'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716970_rre72f40l'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716971_mm489w2li'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716971_tb7jvm6l8'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716971_vyq0b68vp'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
‚ÑπÔ∏è [EventBus] Module registered (05:01:56) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757793716972_geti5l2fm) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:56) {
  subscriptionId: [32m'sub_1757793716972_geti5l2fm'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Processing event payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Processing event payment.timeout: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Processing event payment.queued_offline: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Processing event payment.processing_resumed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Processing event payment.card.authorized: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing
[EventBus] Placeholder: Module test-payment handler test-payment.processCardPayment called for payment.card.authorized

 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Scheduling and Shift Management > should handle time-off requests and approval workflow 116ms
 ‚úì src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservations for pending orders 236ms
stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Processing event inventory.stock.reservation.expired: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Processing event inventory.stock.released: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:57) { noncePrefix: [32m'zzl9kmlp'[39m, timestamp: [32m'1757793717033'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:57)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:57) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717035_xu1zkd4as'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717036_k27588h0g'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m, [32m'test-scheduling'[39m ]
[ModuleRegistry] Module 'test-scheduling' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Activating module 'test-scheduling'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Directly activating module 'test-scheduling'...
[TestSchedulingModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-scheduling'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Module health changed: test-scheduling -> active
[ModuleRegistry] Module 'test-scheduling' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[ModuleRegistry] Module 'test-scheduling' activated directly
[EventBus] Module activated: test-scheduling
[EventBus] Auto-registering handlers for module: test-scheduling
[EventBus] Auto-registered handler: test-scheduling.recordShiftAssignment for pattern: staff.shift.assigned
[EventBus] Auto-registered handler: test-scheduling.processShiftSwap for pattern: staff.shift.swapped
[EventBus] Auto-registered 2/2 handlers for module: test-scheduling

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Adding subscription to weak subscription manager for pattern: staff.shift.assigned
[EventBus] Adding subscription to weak subscription manager for pattern: staff.shift.swapped

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717037_9a8vw77gy'[39m,
  pattern: [32m'staff.shift.assigned'[39m,
  moduleId: [32m'test-scheduling'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717037_2lqqgqhzp'[39m,
  pattern: [32m'staff.shift.swapped'[39m,
  moduleId: [32m'test-scheduling'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-scheduling'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Scheduling Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757793717038_j8mhqeesu) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717038_j8mhqeesu'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Processing event staff.termination.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Processing event staff.equipment.returned: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Processing event staff.access.revoked: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Processing event scheduling.staff.removed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow
[EventBus] Processing event staff.termination.completed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle card payment failures and retries 115ms
stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:57) { noncePrefix: [32m'oopbse56'[39m, timestamp: [32m'1757793717085'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:57)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:57) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717087_htu3o55f0'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717087_1b2y8enhq'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717089_n8c10wflo'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717089_cwueo4w6u'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717089_780nid8ul'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m, [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717090_x4trrgu62'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717091_406ykdjuf'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757793717091_if2wotbne) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717091_if2wotbne'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event refund.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event refund.approved: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event inventory.returned: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event inventory.returned: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event refund.payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event refund.payment.authorized: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event refund.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow
[EventBus] Processing event fiscal.credit_note.generated: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Staff Development and Training > should handle continuous learning and certification tracking 116ms
stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:57) { noncePrefix: [32m'vnwf09y6'[39m, timestamp: [32m'1757793717150'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:57)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:57) { isInitialized: [32m'true'[39m }

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717152_sm171x3ti'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717153_y0hs6da7x'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757793717154_67gvj2ixq) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717154_67gvj2ixq'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[EventBus] Processing event staff.incident.reported: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[EventBus] Processing event staff.incident.first_aid_provided: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[EventBus] Processing event staff.incident.investigated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting
[EventBus] Processing event staff.incident.action_plan_created: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Payment Error Handling > should handle network timeouts and offline payment queuing 117ms
stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:57) { noncePrefix: [32m'hxfo6rew'[39m, timestamp: [32m'1757793717201'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:57)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:57) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717203_r4wojam0p'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717203_nc6s6vy10'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717204_a65g5dsiy'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717205_jqzlf5tie'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717205_1u70snwmy'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m, [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717206_sn5r0l9t6'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717206_8dx6xbpss'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757793717207_fimsz6pmq) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717207_fimsz6pmq'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Processing event refund.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Processing event inventory.returned: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Processing event refund.payment.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items
[EventBus] Processing event refund.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Error unsubscribing sub_1757793716907_7ainv4p32: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793716907_4me1tktlx: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Error unsubscribing sub_1757793716905_sqzr4z3wp: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Error unsubscribing sub_1757793716903_3rm2io7pi: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793716904_mwa17cd6e: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:57)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:57)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:57)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:57)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:57)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:57) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:57)

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:57) { noncePrefix: [32m'09hcb6ut'[39m, timestamp: [32m'1757793717232'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:57)

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:57) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717234_35v5jbn85'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717234_7su6uazoz'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717237_zr8rubt93'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717238_p12pqmtl7'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717238_uopcnwxyp'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757793717239_3elp30orr) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717239_3elp30orr'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Adding subscription to weak subscription manager for pattern: suppliers.order.placed
[EventBus] Subscription added: suppliers.order.placed (sub_1757793717239_lul133bjf) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: suppliers.order.confirmed
[EventBus] Subscription added: suppliers.order.confirmed (sub_1757793717240_k1wgy9won) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: suppliers.delivery.arrived
[EventBus] Subscription added: suppliers.delivery.arrived (sub_1757793717240_lsn0kg2ta) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: suppliers.delivery.processed
[EventBus] Subscription added: suppliers.delivery.processed (sub_1757793717240_z5q6ejmb5) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717239_lul133bjf'[39m,
  pattern: [32m'suppliers.order.placed'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717240_k1wgy9won'[39m,
  pattern: [32m'suppliers.order.confirmed'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717240_lsn0kg2ta'[39m,
  pattern: [32m'suppliers.delivery.arrived'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717240_z5q6ejmb5'[39m,
  pattern: [32m'suppliers.delivery.processed'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event suppliers.order.placed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle staff termination workflow 117ms
stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:57) { noncePrefix: [32m'mnegwiyd'[39m, timestamp: [32m'1757793717262'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:57)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:57) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:57) { noncePrefix: [32m't1l4o1hk'[39m, timestamp: [32m'1757793717262'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:57)
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:57) { isInitialized: [32m'true'[39m }

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[ModuleRegistry] Activation order calculated: [ [32m'test-staff'[39m ]
[ModuleRegistry] Module 'test-staff' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[ModuleRegistry] Activating module 'test-staff'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[ModuleRegistry] Directly activating module 'test-staff'...
[TestStaffModule] Activating...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[ModuleRegistry] Registering 2 subscriptions for module 'test-staff'

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[EventBus] Module health changed: test-staff -> active
[ModuleRegistry] Module 'test-staff' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[ModuleRegistry] Module 'test-staff' activated directly
[EventBus] Module activated: test-staff
[EventBus] Auto-registering handlers for module: test-staff
[EventBus] Auto-registered handler: test-staff.recordClockIn for pattern: staff.clock.in
[EventBus] Auto-registered handler: test-staff.recordClockOut for pattern: staff.clock.out
[EventBus] Auto-registered 2/2 handlers for module: test-staff

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717263_ij357yq0a'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717264_4dj8ktg2c'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.in
[EventBus] Adding subscription to weak subscription manager for pattern: staff.clock.out

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717264_owjdbsfra'[39m,
  pattern: [32m'staff.clock.in'[39m,
  moduleId: [32m'test-staff'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717264_aog0e7h8f'[39m,
  pattern: [32m'staff.clock.out'[39m,
  moduleId: [32m'test-staff'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-staff'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Staff Module'[39m
}

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757793717265_euhik7ryk) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717265_euhik7ryk'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[EventBus] Processing event staff.time.clock_in: Found 1 matching subscriptions

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717265_sl8nby37b'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717265_x5el2w3gq'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717265_q9ln5onn9'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[EventBus] Processing event staff.time.clock_out: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[EventBus] Processing event staff.time.adjusted: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757793717266_wsybqkato) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717266_wsybqkato'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking
[EventBus] Processing event staff.payroll.calculated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Processing event payment.tip.added: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Processing event payment.tip.distribution.calculated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Processing event payment.tip.allocated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Processing event payment.tip.allocated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow
[EventBus] Processing event payment.tip.daily_summary: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle full refund workflow 116ms
 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Refund Processing > should handle partial refund for specific items 61ms
stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event suppliers.order.confirmed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Error Handling and Edge Cases > should handle emergency contact and incident reporting 112ms
 ‚úì src/lib/events/__tests__/business/staff-management.test.ts > EventBus - Staff Management Business Logic > Integration with Other Systems > should integrate with payroll system for labor cost tracking 55ms
 ‚úì src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Stock Level Management > should handle stock reservation expiration 330ms
stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:57) { noncePrefix: [32m'xjihbnta'[39m, timestamp: [32m'1757793717384'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:57)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:57) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717386_nqyr542an'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717386_1ejjjw0d3'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717387_0hgtuz4z5'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717388_gbeb0x7gr'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717388_498pyv0tn'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757793717388_kvyr8x3eb) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717388_kvyr8x3eb'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Processing event payment.auto_gratuity.calculated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Processing event payment.auto_gratuity.disclosed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups
[EventBus] Processing event payment.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event suppliers.delivery.arrived: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Processing event suppliers.delivery.processed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
Complete order workflow executed: order-created ‚Üí stock-check ‚Üí stock-reserved ‚Üí stock-check ‚Üí stock-reserved ‚Üí payment-requested ‚Üí payment-processed ‚Üí kitchen-received ‚Üí kitchen-completed ‚Üí order-fulfilled ‚Üí customer-notified

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle tip distribution workflow 123ms
 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Tip and Gratuity Processing > should handle automatic gratuity for large groups 56ms
stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:57) { noncePrefix: [32m'43fo4qjo'[39m, timestamp: [32m'1757793717441'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:57)

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:57) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m ]
[ModuleRegistry] Module 'test-fiscal' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[ModuleRegistry] Activating module 'test-fiscal'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[ModuleRegistry] Directly activating module 'test-fiscal'...
[ModuleRegistry] Registering 2 subscriptions for module 'test-fiscal'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Module health changed: test-fiscal -> healthy
[ModuleRegistry] Module 'test-fiscal' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[ModuleRegistry] Module 'test-fiscal' activated directly
[EventBus] Module activated: test-fiscal
[EventBus] Auto-registering handlers for module: test-fiscal
[EventBus] Auto-registered 0/2 handlers for module: test-fiscal

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Available handler not found: test-fiscal.test-fiscal.generateReceipt
[EventBus] Available handler not found: test-fiscal.test-fiscal.processReceiptRequest

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Adding subscription to weak subscription manager for pattern: payment.processed
[EventBus] Adding subscription to weak subscription manager for pattern: fiscal.receipt.required

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Handler 'test-fiscal.generateReceipt' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717443_xh37zylzo'[39m,
  pattern: [32m'payment.processed'[39m,
  moduleId: [32m'test-fiscal'[39m
}
[EventBus] Handler 'test-fiscal.processReceiptRequest' not found in registry for module test-fiscal
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717443_xcax4xl4l'[39m,
  pattern: [32m'fiscal.receipt.required'[39m,
  moduleId: [32m'test-fiscal'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-fiscal'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Fiscal Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[ModuleRegistry] Activation order calculated: [ [32m'test-fiscal'[39m, [32m'test-payment'[39m ]
[ModuleRegistry] Module 'test-payment' registered successfully

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[ModuleRegistry] Activating module 'test-payment'...

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[ModuleRegistry] Directly activating module 'test-payment'...
[ModuleRegistry] Registering 3 subscriptions for module 'test-payment'

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Module health changed: test-payment -> healthy
[ModuleRegistry] Module 'test-payment' health changed: inactive -> healthy

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[ModuleRegistry] Module 'test-payment' activated directly
[EventBus] Module activated: test-payment
[EventBus] Auto-registering handlers for module: test-payment
[EventBus] Auto-registered 0/3 handlers for module: test-payment

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Available handler not found: test-payment.test-payment.processCashPayment
[EventBus] Available handler not found: test-payment.test-payment.processCardPayment
[EventBus] Available handler not found: test-payment.test-payment.processMobilePayment

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Adding subscription to weak subscription manager for pattern: payment.cash.received
[EventBus] Adding subscription to weak subscription manager for pattern: payment.card.authorized
[EventBus] Adding subscription to weak subscription manager for pattern: payment.mobile.scanned

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Handler 'test-payment.processCashPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717445_aujdpn485'[39m,
  pattern: [32m'payment.cash.received'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processCardPayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717445_dpwwpvl5l'[39m,
  pattern: [32m'payment.card.authorized'[39m,
  moduleId: [32m'test-payment'[39m
}
[EventBus] Handler 'test-payment.processMobilePayment' not found in registry for module test-payment
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717445_6rd6le5jv'[39m,
  pattern: [32m'payment.mobile.scanned'[39m,
  moduleId: [32m'test-payment'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-payment'[39m,
  subscriptionCount: [32m'3'[39m,
  moduleName: [32m'Test Payment Module'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Adding subscription to weak subscription manager for pattern: *
[EventBus] Subscription added: * (sub_1757793717446_gcchfsveo) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717446_gcchfsveo'[39m,
  pattern: [32m'*'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report
[EventBus] Processing event payment.reconciliation.daily: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Error unsubscribing sub_1757793716312_0yrmmak7z: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793716312_05op33006: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Error unsubscribing sub_1757793716310_4baj8nxjl: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Error unsubscribing sub_1757793716306_y74hhxzox: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793716307_jbhlibjg8: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:57)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:57)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:57)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:57)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:57)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:57) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:57)

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:57) { noncePrefix: [32m'qsqq6p7i'[39m, timestamp: [32m'1757793717457'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:57)

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:57) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717459_4pezwozco'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717459_p0hk2h004'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717461_q94ginpna'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717463_poktn653b'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717463_b6k66prkz'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757793717464_e9643q6y1) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.cancellation.requested
[EventBus] Subscription added: sales.order.cancellation.requested (sub_1757793717465_hutjqv2oa) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.released
[EventBus] Subscription added: inventory.stock.released (sub_1757793717465_taa54t72v) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: payments.refund.requested
[EventBus] Subscription added: payments.refund.requested (sub_1757793717465_5a3f1ifea) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.cancelled
[EventBus] Subscription added: sales.order.cancelled (sub_1757793717465_brfg686fs) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717464_e9643q6y1'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717465_hutjqv2oa'[39m,
  pattern: [32m'sales.order.cancellation.requested'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717465_taa54t72v'[39m,
  pattern: [32m'inventory.stock.released'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717465_5a3f1ifea'[39m,
  pattern: [32m'payments.refund.requested'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717465_brfg686fs'[39m,
  pattern: [32m'sales.order.cancelled'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[TestCustomers] Updated activity for customer CUST-VIP-001

 ‚úì src/lib/events/__tests__/business/payment-processing.test.ts > EventBus - Payment Processing Business Logic > Integration and Reporting > should generate daily payment reconciliation report 60ms
 ‚úì src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should process a successful order from creation to fulfillment 1158ms
stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Processing event sales.order.cancellation.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Processing event inventory.stock.released: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Processing event payments.refund.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Processing event sales.order.cancelled: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Error unsubscribing sub_1757793717238_p12pqmtl7: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793717238_uopcnwxyp: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Error unsubscribing sub_1757793717237_zr8rubt93: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Error unsubscribing sub_1757793717234_35v5jbn85: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793717234_7su6uazoz: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:57)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:57)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:57)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:57)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:57)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:57) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:57)

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:57) { noncePrefix: [32m'3b8nxe7d'[39m, timestamp: [32m'1757793717654'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:57)

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:57) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717656_u3rka83a7'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717656_tk5jty9c0'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717658_brchc1z74'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717660_0c0zublz0'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717660_47ma9v6mj'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757793717661_fnkoa9jds) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717661_fnkoa9jds'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Adding subscription to weak subscription manager for pattern: suppliers.delivery.arrived
[EventBus] Subscription added: suppliers.delivery.arrived (sub_1757793717661_tr15uqr0v) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: suppliers.delivery.discrepancy
[EventBus] Subscription added: suppliers.delivery.discrepancy (sub_1757793717662_uyv0tdnj9) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: suppliers.discrepancy.reported
[EventBus] Subscription added: suppliers.discrepancy.reported (sub_1757793717662_e8uhgwx3a) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717661_tr15uqr0v'[39m,
  pattern: [32m'suppliers.delivery.arrived'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717662_uyv0tdnj9'[39m,
  pattern: [32m'suppliers.delivery.discrepancy'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717662_e8uhgwx3a'[39m,
  pattern: [32m'suppliers.discrepancy.reported'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Processing event suppliers.delivery.arrived: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Processing event suppliers.delivery.discrepancy: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Processing event suppliers.discrepancy.reported: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier order lifecycle 423ms
stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Error unsubscribing sub_1757793717660_0c0zublz0: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793717660_47ma9v6mj: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Error unsubscribing sub_1757793717658_brchc1z74: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Error unsubscribing sub_1757793717656_u3rka83a7: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793717656_tk5jty9c0: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:57)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:57)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:57)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:57)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:57)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:57) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:57)

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:57) { noncePrefix: [32m'krysiz9g'[39m, timestamp: [32m'1757793717885'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:57)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:57)

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:57) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:57) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:57) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:57) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:57) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:57) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717886_oiyoe3o45'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717886_eptxdru1u'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717892_5ekqzggr7'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717894_o8kv7son9'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717894_5spe7i7bw'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ÑπÔ∏è [EventBus] Module registered (05:01:57) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757793717894_c873544ft) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717894_c873544ft'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.item.expired
[EventBus] Subscription added: inventory.item.expired (sub_1757793717895_y0b6a4kc1) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.item.damaged
[EventBus] Subscription added: inventory.item.damaged (sub_1757793717895_eng5on8pg) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.waste.recorded
[EventBus] Subscription added: inventory.waste.recorded (sub_1757793717895_a67xtj32c) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.waste.threshold.exceeded
[EventBus] Subscription added: inventory.waste.threshold.exceeded (sub_1757793717896_ncl3d8e7t) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717895_y0b6a4kc1'[39m,
  pattern: [32m'inventory.item.expired'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717895_eng5on8pg'[39m,
  pattern: [32m'inventory.item.damaged'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717895_a67xtj32c'[39m,
  pattern: [32m'inventory.waste.recorded'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:57) {
  subscriptionId: [32m'sub_1757793717896_ncl3d8e7t'[39m,
  pattern: [32m'inventory.waste.threshold.exceeded'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event inventory.item.expired: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event inventory.waste.recorded: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event inventory.waste.threshold.exceeded: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event inventory.item.damaged: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event inventory.waste.recorded: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event inventory.stock.updated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Processing event inventory.waste.threshold.exceeded: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Supplier Management and Ordering > should handle supplier delivery discrepancies 230ms
stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Error unsubscribing sub_1757793717463_poktn653b: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793717463_b6k66prkz: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Error unsubscribing sub_1757793717461_q94ginpna: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Error unsubscribing sub_1757793717459_4pezwozco: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793717459_p0hk2h004: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:58)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:58)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:58)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:58)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:58)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:58) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:58)

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:58) { noncePrefix: [32m'19lneoaw'[39m, timestamp: [32m'1757793718110'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:58)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:58)

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:58) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718112_rr6a5d2sd'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718112_sk2zlut3p'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ÑπÔ∏è [EventBus] Module registered (05:01:58) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718113_61gkz0ewn'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ÑπÔ∏è [EventBus] Module registered (05:01:58) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718115_7fxotije6'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718115_4bi7cdcr4'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ÑπÔ∏è [EventBus] Module registered (05:01:58) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757793718116_79bxa3vwx) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.check
[EventBus] Subscription added: inventory.stock.check (sub_1757793718116_mlr4x70g5) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.insufficient
[EventBus] Subscription added: inventory.stock.insufficient (sub_1757793718117_0yqr3tllw) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.stock.problem
[EventBus] Subscription added: sales.order.stock.problem (sub_1757793718117_cgskcprp2) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718116_79bxa3vwx'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718116_mlr4x70g5'[39m,
  pattern: [32m'inventory.stock.check'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718117_0yqr3tllw'[39m,
  pattern: [32m'inventory.stock.insufficient'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718117_cgskcprp2'[39m,
  pattern: [32m'sales.order.stock.problem'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[TestCustomers] Updated activity for customer CUST-001

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event inventory.stock.check: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event inventory.stock.insufficient: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event sales.order.stock.problem: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event customers.notification.sent: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Processing event inventory.stock.check: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle order cancellation workflow 653ms
stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Error unsubscribing sub_1757793717894_o8kv7son9: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793717894_5spe7i7bw: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Error unsubscribing sub_1757793717892_5ekqzggr7: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Error unsubscribing sub_1757793717886_oiyoe3o45: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793717886_eptxdru1u: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:58)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:58)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:58)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:58)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:58)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:58) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:58)

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:58) { noncePrefix: [32m'sqlu4opy'[39m, timestamp: [32m'1757793718223'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:58)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:58)

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:58) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718225_658k0h7wv'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718225_xjztpgmtw'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ÑπÔ∏è [EventBus] Module registered (05:01:58) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718228_tkiumursu'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ÑπÔ∏è [EventBus] Module registered (05:01:58) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718230_yhbwsr42q'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718230_wqrz0b8ja'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ÑπÔ∏è [EventBus] Module registered (05:01:58) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757793718231_41ze3c4op) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718231_41ze3c4op'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.waste.analysis.requested
[EventBus] Subscription added: inventory.waste.analysis.requested (sub_1757793718232_e2uh6p4ly) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.waste.analysis.completed
[EventBus] Subscription added: inventory.waste.analysis.completed (sub_1757793718232_jxv326d51) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718232_e2uh6p4ly'[39m,
  pattern: [32m'inventory.waste.analysis.requested'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718232_jxv326d51'[39m,
  pattern: [32m'inventory.waste.analysis.completed'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Processing event inventory.waste.analysis.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Processing event inventory.waste.analysis.completed: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should track and report inventory waste 338ms
stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Error unsubscribing sub_1757793718115_7fxotije6: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793718115_4bi7cdcr4: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Error unsubscribing sub_1757793718230_yhbwsr42q: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793718230_wqrz0b8ja: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Error unsubscribing sub_1757793718113_61gkz0ewn: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[TestCustomersModule] Deactivating...

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Error unsubscribing sub_1757793718228_tkiumursu: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Error unsubscribing sub_1757793718112_rr6a5d2sd: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793718112_sk2zlut3p: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Error unsubscribing sub_1757793718225_658k0h7wv: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793718225_xjztpgmtw: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
[EventBus] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:58)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:58)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:58)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:58)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:58)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:58) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:58)

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:58)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:58)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:58)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:58)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:58)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:58) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:58)

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:58) { noncePrefix: [32m'aft5due4'[39m, timestamp: [32m'1757793718458'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:58)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:58)

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:58) { noncePrefix: [32m'an7qhsye'[39m, timestamp: [32m'1757793718451'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:58)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:58)

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:58) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:58) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718453_3n5txy0v2'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718453_33xu3jnso'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ÑπÔ∏è [EventBus] Module registered (05:01:58) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718460_2e4vckstk'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718461_qpmqhcmgu'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718454_4f1n7hgsj'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ÑπÔ∏è [EventBus] Module registered (05:01:58) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ÑπÔ∏è [EventBus] Module registered (05:01:58) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718462_7wovj9n1e'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718456_s1wtzmp4w'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718456_25fptl6f1'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ÑπÔ∏è [EventBus] Module registered (05:01:58) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ÑπÔ∏è [EventBus] Module registered (05:01:58) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.updated
[EventBus] Subscription added: inventory.stock.updated (sub_1757793718457_p85h82ce4) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718457_p85h82ce4'[39m,
  pattern: [32m'inventory.stock.updated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718464_sen0h9jzs'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718464_rjee6dzat'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ÑπÔ∏è [EventBus] Module registered (05:01:58) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Adding subscription to weak subscription manager for pattern: sales.item.sold
[EventBus] Subscription added: sales.item.sold (sub_1757793718457_m7o7q1ox6) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.optimization.analysis.requested
[EventBus] Subscription added: inventory.optimization.analysis.requested (sub_1757793718457_ng0vaa5x4) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.optimization.recommendations.generated
[EventBus] Subscription added: inventory.optimization.recommendations.generated (sub_1757793718458_rim8dsdx7) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718457_m7o7q1ox6'[39m,
  pattern: [32m'sales.item.sold'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718457_ng0vaa5x4'[39m,
  pattern: [32m'inventory.optimization.analysis.requested'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718458_rim8dsdx7'[39m,
  pattern: [32m'inventory.optimization.recommendations.generated'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event sales.item.sold: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757793718465_lqfkufn6n) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.order.received
[EventBus] Subscription added: kitchen.order.received (sub_1757793718465_bmq3czgwx) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718465_lqfkufn6n'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718465_bmq3czgwx'[39m,
  pattern: [32m'kitchen.order.received'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[TestCustomers] Updated activity for customer CUST-REG-002

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event sales.item.sold: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Processing event kitchen.order.received: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event sales.item.sold: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event sales.item.sold: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event sales.item.sold: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event sales.item.sold: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event inventory.optimization.analysis.requested: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Processing event inventory.optimization.recommendations.generated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[TestCustomers] Updated activity for customer CUST-VIP-001

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Processing event kitchen.order.received: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Complete Order Processing Flow > should handle insufficient stock scenarios 348ms
 ‚úì src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Waste Tracking and Management > should generate waste analytics and recommendations 228ms
stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Error unsubscribing sub_1757793718464_sen0h9jzs: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793718464_rjee6dzat: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Error unsubscribing sub_1757793718462_7wovj9n1e: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Error unsubscribing sub_1757793718460_2e4vckstk: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793718461_qpmqhcmgu: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:58)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:58)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:58)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:58)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:58)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:58) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:58)

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:58) { noncePrefix: [32m'4whemlvs'[39m, timestamp: [32m'1757793718710'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:58)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:58)

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:58) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718712_hi9pf4nli'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718712_oon6s7j3b'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ÑπÔ∏è [EventBus] Module registered (05:01:58) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718713_4xa8eqf7i'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ÑπÔ∏è [EventBus] Module registered (05:01:58) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718715_lymeyt46c'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718715_eeir5rcg9'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ÑπÔ∏è [EventBus] Module registered (05:01:58) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757793718716_2e49sr6fa) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: sales.discount.applied
[EventBus] Subscription added: sales.discount.applied (sub_1757793718716_s9fou3c4l) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718716_2e49sr6fa'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718716_s9fou3c4l'[39m,
  pattern: [32m'sales.discount.applied'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[TestCustomers] Updated activity for customer CUST-VIP-001

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Processing event sales.discount.applied: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Processing event customers.loyalty.points.awarded: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Error unsubscribing sub_1757793718456_s1wtzmp4w: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793718456_25fptl6f1: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Error unsubscribing sub_1757793718454_4f1n7hgsj: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Error unsubscribing sub_1757793718453_3n5txy0v2: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793718453_33xu3jnso: RangeError: Maximum call stack size exceeded
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:350:25[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:58)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:58)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:58)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:58)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:58)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:58) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:58)

stdout | src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns
[EventBus] Graceful shutdown completed

 ‚úì src/lib/events/__tests__/business/inventory-flow.test.ts > EventBus - Inventory Management Business Logic > Inventory Optimization > should optimize stock levels based on sales patterns 331ms
 ‚úì src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should prioritize VIP customer orders 252ms
stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Error unsubscribing sub_1757793718715_lymeyt46c: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793718715_eeir5rcg9: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Error unsubscribing sub_1757793718713_4xa8eqf7i: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Error unsubscribing sub_1757793718712_hi9pf4nli: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793718712_oon6s7j3b: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:58)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:58)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:58)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:58)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:58)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:58) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:58)

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:58) { noncePrefix: [32m'p4ywt8j6'[39m, timestamp: [32m'1757793718955'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:58)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:58)

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:58) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:58) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:58) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:58) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:58) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:58) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718957_ambp96n8s'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718957_h5iltqtmk'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ÑπÔ∏è [EventBus] Module registered (05:01:58) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718963_784p0fcjv'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ÑπÔ∏è [EventBus] Module registered (05:01:58) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718964_ekt8knt8u'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718965_lkx66xcds'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ÑπÔ∏è [EventBus] Module registered (05:01:58) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757793718966_pferbp4ff) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.item.preparation.scheduled
[EventBus] Subscription added: kitchen.item.preparation.scheduled (sub_1757793718966_c9g34icrb) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.item.preparation.completed
[EventBus] Subscription added: kitchen.item.preparation.completed (sub_1757793718966_39ytejgx8) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.order.assembly.ready
[EventBus] Subscription added: kitchen.order.assembly.ready (sub_1757793718966_n0mkqorvd) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718966_pferbp4ff'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718966_c9g34icrb'[39m,
  pattern: [32m'kitchen.item.preparation.scheduled'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718966_39ytejgx8'[39m,
  pattern: [32m'kitchen.item.preparation.completed'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:58) {
  subscriptionId: [32m'sub_1757793718966_n0mkqorvd'[39m,
  pattern: [32m'kitchen.order.assembly.ready'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[TestCustomers] Updated activity for customer CUST-001

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event kitchen.item.preparation.scheduled: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event kitchen.item.preparation.scheduled: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event kitchen.item.preparation.scheduled: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event kitchen.item.preparation.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event kitchen.item.preparation.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event kitchen.item.preparation.completed: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event kitchen.order.assembly.ready: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Processing event kitchen.order.completed: Found 0 matching subscriptions

 ‚úì src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > VIP Customer Workflows > should apply VIP discounts and benefits 245ms
stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Error unsubscribing sub_1757793718964_ekt8knt8u: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793718965_lkx66xcds: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Error unsubscribing sub_1757793718963_784p0fcjv: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Error unsubscribing sub_1757793718957_ambp96n8s: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793718957_h5iltqtmk: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[ModuleRegistry] Graceful shutdown completed

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
[EventBus] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:01:59)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:01:59)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:01:59)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:01:59)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:01:59)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:01:59) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:01:59)

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ÑπÔ∏è [Security] New CSP nonce generated (05:01:59) { noncePrefix: [32m'sica6upq'[39m, timestamp: [32m'1757793719794'[39m }
‚ÑπÔ∏è [EventBus] Initializing enterprise event bus... (05:01:59)
‚ÑπÔ∏è [Security] Encryption disabled - skipping initialization (05:01:59)

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ùå [Security] [SECURITY] ANOMALY: PatternCache initialized (05:01:59) { maxSize: [32m'1000'[39m, ttlMs: [32m'300000'[39m }
‚ùå [Security] [SECURITY] RateLimiter initialized (05:01:59) {
  globalLimit: [32m'10000'[39m,
  ipLimit: [32m'100'[39m,
  ddosProtection: [32m'500'[39m,
  adaptiveLimiting: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ContentSecurityPolicy initialized (05:01:59) {
  enforceMode: [32m'true'[39m,
  nonceEnabled: [32m'true'[39m,
  trustedTypesEnabled: [32m'true'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor configured (05:01:59) { defaultTimeoutMs: [32m'5000'[39m, circuitBreakerEnabled: [32m'true'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PayloadValidator configured (05:01:59) {
  xssProtection: [32m'false'[39m,
  sqlProtection: [32m'false'[39m,
  htmlSanitization: [32m'false'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Test handler 'test-sales.handleLowStock' loaded for auto-registration
[EventBus] Test handler 'test-sales.handleCustomerUpdate' loaded for auto-registration
[EventBus] Test handler 'test-inventory.updateStock' loaded for auto-registration
[EventBus] Test handler 'test-inventory.processRestock' loaded for auto-registration
[EventBus] Test handler 'test-customers.updateCustomerActivity' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockIn' loaded for auto-registration
[EventBus] Test handler 'test-staff.recordClockOut' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCashPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processCardPayment' loaded for auto-registration
[EventBus] Test handler 'test-payment.processMobilePayment' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.generateReceipt' loaded for auto-registration
[EventBus] Test handler 'test-fiscal.processReceiptRequest' loaded for auto-registration
[EventBus] Test handler 'test-kitchen-failing.processOrder' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.recordShiftAssignment' loaded for auto-registration
[EventBus] Test handler 'test-scheduling.processShiftSwap' loaded for auto-registration
[EventBus] Loaded 15 test handlers for auto-registration
[EventBus] Test mode enabled
‚ÑπÔ∏è [EventBus] Enterprise event bus initialized successfully (05:01:59) { isInitialized: [32m'true'[39m }
[EventBus] Handler 'test-sales.handleLowStock' registered in global registry
[EventBus] Handler 'test-sales.handleCustomerUpdate' registered in global registry
[EventBus] Handler 'test-inventory.updateStock' registered in global registry
[EventBus] Handler 'test-inventory.processRestock' registered in global registry
[EventBus] Handler 'test-customers.updateCustomerActivity' registered in global registry
[EventBus] Handler 'test-staff.recordClockIn' registered in global registry
[EventBus] Handler 'test-staff.recordClockOut' registered in global registry
[EventBus] Handler 'test-payment.processCashPayment' registered in global registry
[EventBus] Handler 'test-payment.processCardPayment' registered in global registry
[EventBus] Handler 'test-payment.processMobilePayment' registered in global registry
[EventBus] Handler 'test-fiscal.generateReceipt' registered in global registry
[EventBus] Handler 'test-fiscal.processReceiptRequest' registered in global registry
[EventBus] Handler 'test-kitchen-failing.processOrder' registered in global registry
[EventBus] Handler 'test-scheduling.recordShiftAssignment' registered in global registry
[EventBus] Handler 'test-scheduling.processShiftSwap' registered in global registry

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m ]
[ModuleRegistry] Module 'test-inventory' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Activating module 'test-inventory'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Directly activating module 'test-inventory'...
[TestInventoryModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Registering 2 subscriptions for module 'test-inventory'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Module health changed: test-inventory -> active
[ModuleRegistry] Module 'test-inventory' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Module 'test-inventory' activated directly
[EventBus] Module activated: test-inventory
[EventBus] Auto-registering handlers for module: test-inventory
[EventBus] Auto-registered handler: test-inventory.updateStock for pattern: sales.order.completed
[EventBus] Auto-registered handler: test-inventory.processRestock for pattern: inventory.restock.requested
[EventBus] Auto-registered 2/2 handlers for module: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.completed
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.restock.requested

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:59) {
  subscriptionId: [32m'sub_1757793719796_h24ingnkv'[39m,
  pattern: [32m'sales.order.completed'[39m,
  moduleId: [32m'test-inventory'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:59) {
  subscriptionId: [32m'sub_1757793719796_13yhi5luo'[39m,
  pattern: [32m'inventory.restock.requested'[39m,
  moduleId: [32m'test-inventory'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event global.eventbus.initialized: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ÑπÔ∏è [EventBus] Module registered (05:01:59) {
  moduleId: [32m'test-inventory'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Inventory Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m ]
[ModuleRegistry] Module 'test-customers' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Activating module 'test-customers'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Directly activating module 'test-customers'...
[TestCustomersModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Registering 1 subscriptions for module 'test-customers'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Module health changed: test-customers -> active
[ModuleRegistry] Module 'test-customers' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Module 'test-customers' activated directly
[EventBus] Module activated: test-customers
[EventBus] Auto-registering handlers for module: test-customers
[EventBus] Auto-registered handler: test-customers.updateCustomerActivity for pattern: sales.order.created
[EventBus] Auto-registered 1/1 handlers for module: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:59) {
  subscriptionId: [32m'sub_1757793719798_xhqx9vogy'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'test-customers'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ÑπÔ∏è [EventBus] Module registered (05:01:59) {
  moduleId: [32m'test-customers'[39m,
  subscriptionCount: [32m'1'[39m,
  moduleName: [32m'Test Customers Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Activation order calculated: [ [32m'test-inventory'[39m, [32m'test-customers'[39m, [32m'test-sales'[39m ]
[ModuleRegistry] Module 'test-sales' registered successfully

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Activating module 'test-sales'...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Directly activating module 'test-sales'...
[TestSalesModule] Activating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Registering 2 subscriptions for module 'test-sales'

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Module health changed: test-sales -> active
[ModuleRegistry] Module 'test-sales' health changed: inactive -> active

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Module 'test-sales' activated directly
[EventBus] Module activated: test-sales
[EventBus] Auto-registering handlers for module: test-sales
[EventBus] Auto-registered handler: test-sales.handleLowStock for pattern: inventory.stock.low
[EventBus] Auto-registered handler: test-sales.handleCustomerUpdate for pattern: customers.profile.updated
[EventBus] Auto-registered 2/2 handlers for module: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Adding subscription to weak subscription manager for pattern: inventory.stock.low
[EventBus] Adding subscription to weak subscription manager for pattern: customers.profile.updated

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:59) {
  subscriptionId: [32m'sub_1757793719799_ae7fr909i'[39m,
  pattern: [32m'inventory.stock.low'[39m,
  moduleId: [32m'test-sales'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:59) {
  subscriptionId: [32m'sub_1757793719799_4ky1b10km'[39m,
  pattern: [32m'customers.profile.updated'[39m,
  moduleId: [32m'test-sales'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event global.eventbus.module-registered: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ÑπÔ∏è [EventBus] Module registered (05:01:59) {
  moduleId: [32m'test-sales'[39m,
  subscriptionCount: [32m'2'[39m,
  moduleName: [32m'Test Sales Module'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Adding subscription to weak subscription manager for pattern: sales.order.created
[EventBus] Subscription added: sales.order.created (sub_1757793719800_v8iacdd4k) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.order.received
[EventBus] Subscription added: kitchen.order.received (sub_1757793719800_gz6nvvnvl) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: kitchen.order.error
[EventBus] Subscription added: kitchen.order.error (sub_1757793719800_8qigylnya) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: operations.error.recovery.initiated
[EventBus] Subscription added: operations.error.recovery.initiated (sub_1757793719801_bhymufe7y) [moduleId: anonymous]
[EventBus] Adding subscription to weak subscription manager for pattern: customers.compensation.offered
[EventBus] Subscription added: customers.compensation.offered (sub_1757793719801_pnogu9fb2) [moduleId: anonymous]

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:59) {
  subscriptionId: [32m'sub_1757793719800_v8iacdd4k'[39m,
  pattern: [32m'sales.order.created'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:59) {
  subscriptionId: [32m'sub_1757793719800_gz6nvvnvl'[39m,
  pattern: [32m'kitchen.order.received'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:59) {
  subscriptionId: [32m'sub_1757793719800_8qigylnya'[39m,
  pattern: [32m'kitchen.order.error'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:59) {
  subscriptionId: [32m'sub_1757793719801_bhymufe7y'[39m,
  pattern: [32m'operations.error.recovery.initiated'[39m,
  moduleId: [32m'anonymous'[39m
}
‚ùå [Security] [SECURITY] ANOMALY: Weak subscription added (05:01:59) {
  subscriptionId: [32m'sub_1757793719801_pnogu9fb2'[39m,
  pattern: [32m'customers.compensation.offered'[39m,
  moduleId: [32m'anonymous'[39m
}

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event sales.order.created: Found 2 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[TestCustomers] Updated activity for customer CUST-001

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event kitchen.order.received: Found 1 matching subscriptions

 ‚úì src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Multi-item Order Complexity > should handle complex orders with multiple items and special requirements 839ms
stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event kitchen.order.error: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event operations.error.recovery.initiated: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event customers.compensation.offered: Found 1 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Processing event sales.order.compensated: Found 0 matching subscriptions

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Starting graceful shutdown...
[ModuleRegistry] Starting graceful shutdown...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Deactivating module 'test-sales'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-sales'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Error unsubscribing sub_1757793719799_ae7fr909i: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793719799_4ky1b10km: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[TestSalesModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Module 'test-sales' deactivated successfully
[EventBus] Module deactivated: test-sales

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Deactivating module 'test-customers'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-customers'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Error unsubscribing sub_1757793719798_xhqx9vogy: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[TestCustomersModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Module 'test-customers' deactivated successfully
[EventBus] Module deactivated: test-customers

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Deactivating module 'test-inventory'...
[ModuleRegistry] Unregistered all subscriptions for module 'test-inventory'

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Error unsubscribing sub_1757793719796_h24ingnkv: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
[ModuleRegistry] Error unsubscribing sub_1757793719796_13yhi5luo: RangeError: Maximum call stack size exceeded
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1172:10[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m
    at unsubscribeFn [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:534:40[90m)[39m
    at ModuleRegistry.removeModuleSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\ModuleRegistry.ts:356:7[90m)[39m
    at EventBus.removeSubscription [90m(I:\Programacion\Proyectos\g-mini\[39msrc\lib\events\EventBus.ts:1176:27[90m)[39m

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[TestInventoryModule] Deactivating...

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Module 'test-inventory' deactivated successfully
[EventBus] Module deactivated: test-inventory

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[ModuleRegistry] Graceful shutdown completed

stderr | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
‚ùå [Security] [SECURITY] EncryptedEventStore destroyed (05:02:00)
‚ùå [Security] [SECURITY] RateLimiter destroyed (05:02:00)
‚ùå [Security] [SECURITY] ContentSecurityPolicy destroyed (05:02:00)
‚ùå [Security] [SECURITY] ANOMALY: SecureEventProcessor destroyed - all resources cleaned up (05:02:00)
‚ùå [Security] [SECURITY] ANOMALY: WeakSubscriptionManager destroyed - all subscriptions cleaned up (05:02:00)
‚ùå [Security] [SECURITY] ANOMALY: PatternCache cleared (05:02:00) { clearedEntries: [32m'0'[39m }
‚ùå [Security] [SECURITY] ANOMALY: PatternCache destroyed (05:02:00)

stdout | src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation
[EventBus] Graceful shutdown completed

 ‚úì src/lib/events/__tests__/business/order-lifecycle.test.ts > EventBus - Order Lifecycle Business Logic > Error Recovery and Compensation > should handle kitchen errors and provide compensation 631ms

 Test Files  4 passed (4)
      Tests  37 passed (37)
   Start at  17:01:53
   Duration  6.95s (transform 662ms, setup 1.53s, collect 1.78s, tests 8.87s, environment 5.71s, prepare 849ms)

