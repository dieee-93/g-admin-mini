// Procurement Intelligence - Smart Reordering & Supplier Management
// Advanced purchasing optimization and automated procurement system

import { useState, useEffect, useMemo, useCallback } from 'react';
import {
  Box,
  VStack,
  HStack,
  Text,
  Button,
  Badge,
  Card,
  SimpleGrid,
  Table,
  Alert,
  Tabs,
  Select,
  createListCollection,
  IconButton,
  Spinner,
  Progress,
  Dialog,
  Input,
  NumberInput,
  Separator
} from '@chakra-ui/react';
import {
  ShoppingCartIcon,
  TruckIcon,
  CurrencyDollarIcon,
  ClockIcon,
  ExclamationTriangleIcon,
  CheckCircleIcon,
  ArrowPathIcon,
  PlusIcon,
  EyeIcon,
  DocumentDuplicateIcon,
  BellIcon,
  ChartBarIcon
} from '@heroicons/react/24/outline';
import { EventBus } from '@/lib/events/EventBus';
import { RestaurantEvents } from '@/lib/events/RestaurantEvents';

// ============================================================================
// TYPES AND INTERFACES
// ============================================================================

export interface ProcurementOrder {
  id: string;
  orderNumber: string;
  supplierId: string;
  supplierName: string;
  status: 'draft' | 'pending' | 'sent' | 'confirmed' | 'partial' | 'delivered' | 'cancelled';
  priority: 'low' | 'normal' | 'high' | 'urgent';
  
  // Order details
  items: ProcurementItem[];
  totalItems: number;
  totalCost: number;
  estimatedDelivery: string;
  
  // Dates
  createdAt: string;
  updatedAt: string;
  sentAt?: string;
  expectedDelivery?: string;
  actualDelivery?: string;
  
  // Intelligence data
  autoGenerated: boolean;
  optimizationScore: number;
  consolidationOpportunity?: string;
  notes?: string;
}

export interface ProcurementItem {
  id: string;
  materialId: string;
  materialName: string;
  category: string;
  unit: string;
  
  // Quantities
  requestedQuantity: number;
  confirmedQuantity?: number;
  deliveredQuantity?: number;
  
  // Pricing
  unitPrice: number;
  totalPrice: number;
  discountPercentage?: number;
  finalPrice: number;
  
  // Intelligence
  reorderReason: 'stock_low' | 'stock_critical' | 'forecasted_demand' | 'bulk_optimization' | 'manual';
  urgencyLevel: number; // 1-5 scale
  alternativeSuppliers?: string[];
}

export interface SupplierPerformance {
  id: string;
  name: string;
  category: string[];
  
  // Performance metrics
  deliveryReliability: number; // 0-1
  qualityScore: number; // 0-1
  priceCompetitiveness: number; // 0-1
  communicationRating: number; // 0-1
  overallScore: number; // 0-1
  
  // Statistics
  totalOrders: number;
  onTimeDeliveries: number;
  avgDeliveryTime: number; // days
  defectRate: number; // percentage
  
  // Financial
  totalSpend: number;
  avgOrderValue: number;
  paymentTerms: string;
  
  // Status
  isActive: boolean;
  lastOrderDate?: string;
  contractExpiration?: string;
}

export interface ProcurementRecommendation {
  id: string;
  type: 'reorder' | 'consolidate' | 'switch_supplier' | 'bulk_buy' | 'contract_renewal';
  priority: 'low' | 'medium' | 'high' | 'urgent';
  
  title: string;
  description: string;
  materialIds: string[];
  supplierIds?: string[];
  
  // Financial impact
  estimatedSavings: number;
  costAvoidance: number;
  roi: number; // percentage
  
  // Implementation
  actionRequired: string;
  dueDate: string;
  implementationTime: string; // "immediate", "1 week", etc.
  
  // Data
  confidence: number; // 0-1
  dataPoints: number;
  lastCalculated: string;
}

// ============================================================================
// MOCK DATA GENERATION
// ============================================================================

const generateMockOrders = (): ProcurementOrder[] => {
  const suppliers = [
    { id: 'sup-1', name: 'Distribuidora Central' },
    { id: 'sup-2', name: 'Mercado Fresco SA' },
    { id: 'sup-3', name: 'Agrosuministros Del Sur' },
    { id: 'sup-4', name: 'Lácteos Premium' },
    { id: 'sup-5', name: 'Carnes Selectas' }
  ];

  const statuses: ProcurementOrder['status'][] = ['draft', 'pending', 'sent', 'confirmed', 'partial', 'delivered'];
  const priorities: ProcurementOrder['priority'][] = ['low', 'normal', 'high', 'urgent'];

  return Array.from({ length: 15 }, (_, index) => {
    const supplier = suppliers[Math.floor(Math.random() * suppliers.length)];
    const itemCount = Math.floor(Math.random() * 8) + 2;
    const totalCost = Math.random() * 50000 + 5000;
    
    return {
      id: `order-${index + 1}`,
      orderNumber: `PO-${(index + 1).toString().padStart(4, '0')}`,
      supplierId: supplier.id,
      supplierName: supplier.name,
      status: statuses[Math.floor(Math.random() * statuses.length)],
      priority: priorities[Math.floor(Math.random() * priorities.length)],
      
      items: [], // Would be populated with actual items
      totalItems: itemCount,
      totalCost,
      estimatedDelivery: new Date(Date.now() + Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString(),
      
      createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),
      updatedAt: new Date().toISOString(),
      sentAt: Math.random() > 0.3 ? new Date(Date.now() - Math.random() * 5 * 24 * 60 * 60 * 1000).toISOString() : undefined,
      expectedDelivery: new Date(Date.now() + Math.random() * 10 * 24 * 60 * 60 * 1000).toISOString(),
      
      autoGenerated: Math.random() > 0.4,
      optimizationScore: Math.random() * 0.4 + 0.6,
      consolidationOpportunity: Math.random() > 0.7 ? `Consolidar con PO-${Math.floor(Math.random() * 100)}` : undefined,
      notes: Math.random() > 0.6 ? 'Pedido urgente para fin de semana' : undefined
    };
  });
};

const generateMockRecommendations = (): ProcurementRecommendation[] => {
  const types: ProcurementRecommendation['type'][] = ['reorder', 'consolidate', 'switch_supplier', 'bulk_buy', 'contract_renewal'];
  const priorities: ProcurementRecommendation['priority'][] = ['low', 'medium', 'high', 'urgent'];

  return Array.from({ length: 12 }, (_, index) => {
    const type = types[Math.floor(Math.random() * types.length)];
    const priority = priorities[Math.floor(Math.random() * priorities.length)];
    
    const titles = {
      reorder: 'Reabastecer stock crítico',
      consolidate: 'Consolidar pedidos del proveedor',
      switch_supplier: 'Cambiar proveedor por mejor precio',
      bulk_buy: 'Compra en volumen con descuento',
      contract_renewal: 'Renovar contrato con términos mejorados'
    };

    const savings = Math.random() * 15000 + 2000;
    
    return {
      id: `rec-${index + 1}`,
      type,
      priority,
      
      title: titles[type],
      description: `Oportunidad de optimización detectada para mejorar eficiencia de compras`,
      materialIds: [`mat-${Math.floor(Math.random() * 20) + 1}`],
      supplierIds: [`sup-${Math.floor(Math.random() * 5) + 1}`],
      
      estimatedSavings: savings,
      costAvoidance: savings * 0.3,
      roi: Math.random() * 25 + 10,
      
      actionRequired: 'Revisar recomendación y confirmar implementación',
      dueDate: new Date(Date.now() + Math.random() * 14 * 24 * 60 * 60 * 1000).toISOString(),
      implementationTime: ['immediate', '1 week', '2 weeks', '1 month'][Math.floor(Math.random() * 4)],
      
      confidence: Math.random() * 0.3 + 0.7,
      dataPoints: Math.floor(Math.random() * 100) + 30,
      lastCalculated: new Date().toISOString()
    };
  });
};

// ============================================================================
// PROCUREMENT INTELLIGENCE COMPONENT
// ============================================================================

const orderStatusOptions = createListCollection({
  items: [
    { value: 'all', label: 'Todos los Estados' },
    { value: 'draft', label: 'Borradores' },
    { value: 'pending', label: 'Pendientes' },
    { value: 'sent', label: 'Enviados' },
    { value: 'confirmed', label: 'Confirmados' },
    { value: 'delivered', label: 'Entregados' }
  ]
});

export function ProcurementIntelligence() {
  // State management
  const [orders, setOrders] = useState<ProcurementOrder[]>([]);
  const [recommendations, setRecommendations] = useState<ProcurementRecommendation[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isGeneratingOrders, setIsGeneratingOrders] = useState(false);
  const [activeTab, setActiveTab] = useState<'dashboard' | 'orders' | 'recommendations' | 'automation'>('dashboard');
  const [statusFilter, setStatusFilter] = useState('all');
  const [showNewOrderDialog, setShowNewOrderDialog] = useState(false);

  // Load data
  useEffect(() => {
    loadProcurementData();
  }, []);

  const loadProcurementData = async () => {
    try {
      setIsLoading(true);
      // Simulate API calls
      await new Promise(resolve => setTimeout(resolve, 1200));
      
      const mockOrders = generateMockOrders();
      const mockRecommendations = generateMockRecommendations();
      
      setOrders(mockOrders);
      setRecommendations(mockRecommendations);
      
    } catch (error) {
      console.error('Error loading procurement data:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // Generate smart orders based on current inventory and ABC analysis
  const generateSmartOrders = useCallback(async () => {
    try {
      setIsGeneratingOrders(true);
      
      // Simulate AI-powered order generation
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // Create 2-3 new optimized orders
      const newOrdersCount = Math.floor(Math.random() * 2) + 2;
      const newOrders: ProcurementOrder[] = [];
      
      for (let i = 0; i < newOrdersCount; i++) {
        const supplier = ['Distribuidora Central', 'Mercado Fresco SA', 'Agrosuministros Del Sur'][i];
        newOrders.push({
          id: `smart-order-${Date.now()}-${i}`,
          orderNumber: `AI-PO-${Date.now().toString().slice(-4)}`,
          supplierId: `sup-${i + 1}`,
          supplierName: supplier,
          status: 'draft',
          priority: i === 0 ? 'high' : 'normal',
          
          items: [],
          totalItems: Math.floor(Math.random() * 5) + 3,
          totalCost: Math.random() * 25000 + 10000,
          estimatedDelivery: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),
          
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
          expectedDelivery: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),
          
          autoGenerated: true,
          optimizationScore: Math.random() * 0.2 + 0.8, // High optimization scores
          notes: 'Pedido generado automáticamente por IA basado en análisis ABC y demanda'
        });
      }
      
      setOrders(prev => [...newOrders, ...prev]);
      
      // Emit event for smart order generation
      await EventBus.emit(
        RestaurantEvents.DATA_SYNCED,
        {
          type: 'smart_orders_generated',
          count: newOrdersCount,
          totalValue: newOrders.reduce((sum, order) => sum + order.totalCost, 0)
        },
        'ProcurementIntelligence'
      );
      
      // Show success message
      // Note: In a real implementation, you'd use a notification system
      
    } catch (error) {
      console.error('Error generating smart orders:', error);
    } finally {
      setIsGeneratingOrders(false);
    }
  }, []);

  // Filter orders by status
  const filteredOrders = useMemo(() => {
    if (statusFilter === 'all') return orders;
    return orders.filter(order => order.status === statusFilter);
  }, [orders, statusFilter]);

  // Calculate dashboard metrics
  const dashboardMetrics = useMemo(() => {
    const totalOrders = orders.length;
    const pendingOrders = orders.filter(o => ['draft', 'pending', 'sent'].includes(o.status)).length;
    const urgentOrders = orders.filter(o => o.priority === 'urgent').length;
    const autoGeneratedOrders = orders.filter(o => o.autoGenerated).length;
    const totalValue = orders.reduce((sum, order) => sum + order.totalCost, 0);
    
    const criticalRecommendations = recommendations.filter(r => r.priority === 'urgent').length;
    const potentialSavings = recommendations.reduce((sum, rec) => sum + rec.estimatedSavings, 0);
    
    const avgOptimizationScore = orders.length > 0 
      ? orders.reduce((sum, order) => sum + order.optimizationScore, 0) / orders.length
      : 0;

    return {
      totalOrders,
      pendingOrders,
      urgentOrders,
      autoGeneratedOrders,
      totalValue,
      criticalRecommendations,
      potentialSavings,
      avgOptimizationScore
    };
  }, [orders, recommendations]);

  if (isLoading) {
    return (
      <Box p="6" textAlign="center">
        <VStack gap="4">
          <Spinner size="xl" colorPalette="blue" />
          <Text>Cargando sistema de compras inteligente...</Text>
          <Text fontSize="sm" color="gray.600">Analizando pedidos y optimizaciones</Text>
        </VStack>
      </Box>
    );
  }

  return (
    <VStack gap="6" align="stretch">
      {/* Header with Controls */}
      <Card.Root>
        <Card.Body>
          <VStack gap="4" align="stretch">
            <HStack justify="space-between" align="start">
              <VStack align="start" gap="1">
                <HStack gap="2">
                  <ShoppingCartIcon className="w-6 h-6 text-blue-600" />
                  <Text fontSize="xl" fontWeight="bold">Procurement Intelligence</Text>
                  <Badge colorPalette="blue" size="sm">AI-Powered</Badge>
                </HStack>
                <Text color="gray.600" fontSize="sm">
                  Sistema inteligente de compras con reordenamiento automático y optimización de proveedores
                </Text>
              </VStack>

              <HStack gap="2">
                <Button
                  variant="outline"
                  leftIcon={<ArrowPathIcon className="w-4 h-4" />}
                  onClick={loadProcurementData}
                  size="sm"
                >
                  Actualizar
                </Button>
                
                <Button
                  colorPalette="green"
                  leftIcon={<TruckIcon className="w-4 h-4" />}
                  onClick={generateSmartOrders}
                  loading={isGeneratingOrders}
                  loadingText="Generando..."
                  size="sm"
                >
                  Generar Pedidos IA
                </Button>
                
                <Button
                  colorPalette="blue"
                  leftIcon={<PlusIcon className="w-4 h-4" />}
                  onClick={() => setShowNewOrderDialog(true)}
                  size="sm"
                >
                  Nuevo Pedido
                </Button>
              </HStack>
            </HStack>

            {/* Key Metrics Cards */}
            <SimpleGrid columns={{ base: 2, md: 4 }} gap="4">
              <Card.Root variant="subtle" bg="blue.50">
                <Card.Body p="4" textAlign="center">
                  <VStack gap="1">
                    <Text fontSize="2xl" fontWeight="bold" color="blue.600">
                      {dashboardMetrics.totalOrders}
                    </Text>
                    <Text fontSize="sm" color="gray.600">Pedidos Totales</Text>
                    <Text fontSize="xs" color="blue.600">
                      ${(dashboardMetrics.totalValue / 1000).toFixed(0)}K valor
                    </Text>
                  </VStack>
                </Card.Body>
              </Card.Root>

              <Card.Root variant="subtle" bg="yellow.50">
                <Card.Body p="4" textAlign="center">
                  <VStack gap="1">
                    <Text fontSize="2xl" fontWeight="bold" color="yellow.600">
                      {dashboardMetrics.pendingOrders}
                    </Text>
                    <Text fontSize="sm" color="gray.600">Pendientes</Text>
                    <Text fontSize="xs" color="yellow.600">
                      {dashboardMetrics.urgentOrders} urgentes
                    </Text>
                  </VStack>
                </Card.Body>
              </Card.Root>

              <Card.Root variant="subtle" bg="green.50">
                <Card.Body p="4" textAlign="center">
                  <VStack gap="1">
                    <Text fontSize="2xl" fontWeight="bold" color="green.600">
                      {dashboardMetrics.autoGeneratedOrders}
                    </Text>
                    <Text fontSize="sm" color="gray.600">Auto-generados</Text>
                    <Text fontSize="xs" color="green.600">
                      {((dashboardMetrics.autoGeneratedOrders / dashboardMetrics.totalOrders) * 100).toFixed(0)}% del total
                    </Text>
                  </VStack>
                </Card.Body>
              </Card.Root>

              <Card.Root variant="subtle" bg="purple.50">
                <Card.Body p="4" textAlign="center">
                  <VStack gap="1">
                    <Text fontSize="2xl" fontWeight="bold" color="purple.600">
                      ${(dashboardMetrics.potentialSavings / 1000).toFixed(0)}K
                    </Text>
                    <Text fontSize="sm" color="gray.600">Ahorro Potencial</Text>
                    <Text fontSize="xs" color="purple.600">
                      {dashboardMetrics.criticalRecommendations} críticas
                    </Text>
                  </VStack>
                </Card.Body>
              </Card.Root>
            </SimpleGrid>
          </VStack>
        </Card.Body>
      </Card.Root>

      {/* Optimization Score Alert */}
      {dashboardMetrics.avgOptimizationScore < 0.7 && (
        <Alert.Root status="warning" variant="subtle">
          <ExclamationTriangleIcon className="w-5 h-5" />
          <Alert.Title>Oportunidades de optimización detectadas</Alert.Title>
          <Alert.Description>
            Score promedio de optimización: {(dashboardMetrics.avgOptimizationScore * 100).toFixed(0)}%. 
            Considera usar el generador de pedidos IA para mejorar eficiencia.
          </Alert.Description>
        </Alert.Root>
      )}

      {/* Main Content Tabs */}
      <Tabs.Root value={activeTab} onValueChange={(details) => setActiveTab(details.value as any)}>
        <Tabs.List>
          <Tabs.Trigger value="dashboard">
            <HStack gap={2}>
              <ChartBarIcon className="w-4 h-4" />
              <Text>Dashboard</Text>
            </HStack>
          </Tabs.Trigger>
          
          <Tabs.Trigger value="orders">
            <HStack gap={2}>
              <ShoppingCartIcon className="w-4 h-4" />
              <Text>Pedidos</Text>
              <Badge colorPalette="blue" size="sm">{orders.length}</Badge>
            </HStack>
          </Tabs.Trigger>
          
          <Tabs.Trigger value="recommendations">
            <HStack gap={2}>
              <BellIcon className="w-4 h-4" />
              <Text>Recomendaciones</Text>
              {dashboardMetrics.criticalRecommendations > 0 && (
                <Badge colorPalette="red" size="sm">{dashboardMetrics.criticalRecommendations}</Badge>
              )}
            </HStack>
          </Tabs.Trigger>
          
          <Tabs.Trigger value="automation">
            <HStack gap={2}>
              <TruckIcon className="w-4 h-4" />
              <Text>Automatización</Text>
              <Badge colorPalette="green" size="sm">IA</Badge>
            </HStack>
          </Tabs.Trigger>
        </Tabs.List>

        <Box mt="6">
          {/* Dashboard Tab */}
          <Tabs.Content value="dashboard">
            <VStack gap="6" align="stretch">
              {/* Optimization Score Progress */}
              <Card.Root>
                <Card.Header>
                  <HStack justify="space-between">
                    <Text fontWeight="bold">Score de Optimización del Sistema</Text>
                    <Badge 
                      colorPalette={dashboardMetrics.avgOptimizationScore > 0.8 ? "green" : 
                                  dashboardMetrics.avgOptimizationScore > 0.6 ? "yellow" : "red"} 
                      size="sm"
                    >
                      {(dashboardMetrics.avgOptimizationScore * 100).toFixed(0)}%
                    </Badge>
                  </HStack>
                </Card.Header>
                <Card.Body>
                  <VStack gap="4" align="stretch">
                    <Progress.Root 
                      value={dashboardMetrics.avgOptimizationScore * 100} 
                      colorPalette={dashboardMetrics.avgOptimizationScore > 0.8 ? "green" : 
                                   dashboardMetrics.avgOptimizationScore > 0.6 ? "yellow" : "red"}
                      size="lg"
                    >
                      <Progress.Track>
                        <Progress.Range />
                      </Progress.Track>
                    </Progress.Root>
                    <Text fontSize="sm" color="gray.600">
                      Basado en consolidación de pedidos, selección de proveedores, y timing de órdenes
                    </Text>
                  </VStack>
                </Card.Body>
              </Card.Root>

              {/* Recent Activity */}
              <SimpleGrid columns={{ base: 1, lg: 2 }} gap="6">
                <Card.Root>
                  <Card.Header>
                    <Text fontWeight="bold">Pedidos Recientes</Text>
                  </Card.Header>
                  <Card.Body>
                    <VStack gap="3" align="stretch">
                      {orders.slice(0, 5).map(order => (
                        <HStack key={order.id} justify="space-between" p="3" bg="gray.50" borderRadius="md">
                          <VStack align="start" gap="1">
                            <Text fontSize="sm" fontWeight="medium">{order.orderNumber}</Text>
                            <Text fontSize="xs" color="gray.600">{order.supplierName}</Text>
                          </VStack>
                          <VStack align="end" gap="1">
                            <Badge colorPalette={getStatusColor(order.status)} size="sm">
                              {getStatusLabel(order.status)}
                            </Badge>
                            <Text fontSize="xs" color="gray.600">
                              ${order.totalCost.toLocaleString()}
                            </Text>
                          </VStack>
                        </HStack>
                      ))}
                    </VStack>
                  </Card.Body>
                </Card.Root>

                <Card.Root>
                  <Card.Header>
                    <Text fontWeight="bold">Recomendaciones Críticas</Text>
                  </Card.Header>
                  <Card.Body>
                    <VStack gap="3" align="stretch">
                      {recommendations.filter(r => r.priority === 'urgent' || r.priority === 'high').slice(0, 5).map(rec => (
                        <HStack key={rec.id} justify="space-between" p="3" bg="red.50" borderRadius="md">
                          <VStack align="start" gap="1">
                            <Text fontSize="sm" fontWeight="medium">{rec.title}</Text>
                            <Text fontSize="xs" color="gray.600">{rec.description}</Text>
                          </VStack>
                          <VStack align="end" gap="1">
                            <Badge colorPalette="red" size="sm">
                              {rec.priority === 'urgent' ? 'Urgente' : 'Alta'}
                            </Badge>
                            <Text fontSize="xs" color="green.600">
                              ${rec.estimatedSavings.toLocaleString()}
                            </Text>
                          </VStack>
                        </HStack>
                      ))}
                    </VStack>
                  </Card.Body>
                </Card.Root>
              </SimpleGrid>
            </VStack>
          </Tabs.Content>

          {/* Orders Tab */}
          <Tabs.Content value="orders">
            <VStack gap="4" align="stretch">
              {/* Orders Filter */}
              <HStack justify="space-between">
                <Select.Root
                  collection={orderStatusOptions}
                  value={[statusFilter]}
                  onValueChange={(e) => setStatusFilter(e.value[0])}
                  width="200px"
                  size="sm"
                >
                  <Select.Trigger>
                    <Select.ValueText />
                  </Select.Trigger>
                  <Select.Content>
                    {orderStatusOptions.items.map(item => (
                      <Select.Item key={item.value} item={item}>
                        {item.label}
                      </Select.Item>
                    ))}
                  </Select.Content>
                </Select.Root>
                
                <Text fontSize="sm" color="gray.600">
                  {filteredOrders.length} de {orders.length} pedidos
                </Text>
              </HStack>

              {/* Orders Table */}
              <ProcurementOrdersTable orders={filteredOrders} />
            </VStack>
          </Tabs.Content>

          {/* Recommendations Tab */}
          <Tabs.Content value="recommendations">
            <ProcurementRecommendationsTable recommendations={recommendations} />
          </Tabs.Content>

          {/* Automation Tab */}
          <Tabs.Content value="automation">
            <VStack gap="6" align="stretch">
              <Card.Root>
                <Card.Header>
                  <Text fontWeight="bold">Configuración de Automatización</Text>
                </Card.Header>
                <Card.Body>
                  <VStack gap="4" align="stretch">
                    <Alert.Root status="info">
                      <Alert.Indicator />
                      <Alert.Title>Sistema de IA Activo</Alert.Title>
                      <Alert.Description>
                        El sistema está monitoreando constantemente el inventario y generando recomendaciones automáticas.
                      </Alert.Description>
                    </Alert.Root>
                    
                    <SimpleGrid columns={{ base: 1, md: 2 }} gap="4">
                      <Card.Root variant="outline">
                        <Card.Body p="4">
                          <VStack gap="3">
                            <HStack justify="center">
                              <TruckIcon className="w-8 h-8 text-blue-600" />
                            </HStack>
                            <Text textAlign="center" fontWeight="medium">Reordenamiento Automático</Text>
                            <Text fontSize="sm" color="gray.600" textAlign="center">
                              Genera pedidos automáticamente cuando el stock alcanza el punto de reorden
                            </Text>
                            <Badge colorPalette="green" size="sm">Activo</Badge>
                          </VStack>
                        </Card.Body>
                      </Card.Root>
                      
                      <Card.Root variant="outline">
                        <Card.Body p="4">
                          <VStack gap="3">
                            <HStack justify="center">
                              <ChartBarIcon className="w-8 h-8 text-purple-600" />
                            </HStack>
                            <Text textAlign="center" fontWeight="medium">Optimización de Proveedores</Text>
                            <Text fontSize="sm" color="gray.600" textAlign="center">
                              Selecciona automáticamente el mejor proveedor basado en precio, calidad y tiempo
                            </Text>
                            <Badge colorPalette="green" size="sm">Activo</Badge>
                          </VStack>
                        </Card.Body>
                      </Card.Root>
                    </SimpleGrid>
                  </VStack>
                </Card.Body>
              </Card.Root>
            </VStack>
          </Tabs.Content>
        </Box>
      </Tabs.Root>

      {/* New Order Dialog */}
      <Dialog.Root open={showNewOrderDialog} onOpenChange={({ open }) => setShowNewOrderDialog(open)}>
        <Dialog.Backdrop />
        <Dialog.Positioner>
          <Dialog.Content>
            <Dialog.Header>
              <Dialog.Title>Crear Nuevo Pedido</Dialog.Title>
              <Dialog.CloseTrigger />
            </Dialog.Header>
            <Dialog.Body>
              <Text color="gray.600">
                Funcionalidad de creación manual de pedidos estará disponible próximamente.
                Por ahora, usa el generador de pedidos IA para crear pedidos optimizados automáticamente.
              </Text>
            </Dialog.Body>
            <Dialog.Footer>
              <Button onClick={() => setShowNewOrderDialog(false)}>
                Cerrar
              </Button>
            </Dialog.Footer>
          </Dialog.Content>
        </Dialog.Positioner>
      </Dialog.Root>
    </VStack>
  );
}

// ============================================================================
// HELPER COMPONENTS
// ============================================================================

interface ProcurementOrdersTableProps {
  orders: ProcurementOrder[];
}

function ProcurementOrdersTable({ orders }: ProcurementOrdersTableProps) {
  if (orders.length === 0) {
    return (
      <Card.Root>
        <Card.Body p="8" textAlign="center">
          <VStack gap="2">
            <ShoppingCartIcon className="w-8 h-8 text-gray-400" />
            <Text color="gray.500">No hay pedidos que mostrar</Text>
          </VStack>
        </Card.Body>
      </Card.Root>
    );
  }

  return (
    <Card.Root>
      <Card.Body>
        <Table.Root size="sm">
          <Table.Header>
            <Table.Row>
              <Table.ColumnHeader>Pedido</Table.ColumnHeader>
              <Table.ColumnHeader>Proveedor</Table.ColumnHeader>
              <Table.ColumnHeader>Estado</Table.ColumnHeader>
              <Table.ColumnHeader>Items</Table.ColumnHeader>
              <Table.ColumnHeader>Valor</Table.ColumnHeader>
              <Table.ColumnHeader>Entrega Est.</Table.ColumnHeader>
              <Table.ColumnHeader>Score</Table.ColumnHeader>
              <Table.ColumnHeader>Acciones</Table.ColumnHeader>
            </Table.Row>
          </Table.Header>
          <Table.Body>
            {orders.slice(0, 15).map((order) => (
              <Table.Row key={order.id}>
                <Table.Cell>
                  <VStack align="start" gap="1">
                    <Text fontWeight="medium">{order.orderNumber}</Text>
                    {order.autoGenerated && (
                      <Badge colorPalette="blue" size="xs">Auto</Badge>
                    )}
                  </VStack>
                </Table.Cell>
                <Table.Cell>
                  <Text fontSize="sm">{order.supplierName}</Text>
                </Table.Cell>
                <Table.Cell>
                  <Badge colorPalette={getStatusColor(order.status)} size="sm">
                    {getStatusLabel(order.status)}
                  </Badge>
                </Table.Cell>
                <Table.Cell>
                  <Text fontSize="sm">{order.totalItems} items</Text>
                </Table.Cell>
                <Table.Cell>
                  <Text fontSize="sm" fontWeight="medium">
                    ${order.totalCost.toLocaleString()}
                  </Text>
                </Table.Cell>
                <Table.Cell>
                  <Text fontSize="sm">
                    {new Date(order.estimatedDelivery).toLocaleDateString()}
                  </Text>
                </Table.Cell>
                <Table.Cell>
                  <Badge 
                    colorPalette={order.optimizationScore > 0.8 ? "green" : 
                                 order.optimizationScore > 0.6 ? "yellow" : "red"} 
                    size="sm"
                  >
                    {(order.optimizationScore * 100).toFixed(0)}%
                  </Badge>
                </Table.Cell>
                <Table.Cell>
                  <IconButton
                    size="xs"
                    variant="ghost"
                    aria-label="Ver detalles"
                  >
                    <EyeIcon className="w-3 h-3" />
                  </IconButton>
                </Table.Cell>
              </Table.Row>
            ))}
          </Table.Body>
        </Table.Root>
      </Card.Body>
    </Card.Root>
  );
}

interface ProcurementRecommendationsTableProps {
  recommendations: ProcurementRecommendation[];
}

function ProcurementRecommendationsTable({ recommendations }: ProcurementRecommendationsTableProps) {
  if (recommendations.length === 0) {
    return (
      <Card.Root>
        <Card.Body p="8" textAlign="center">
          <VStack gap="2">
            <CheckCircleIcon className="w-8 h-8 text-green-500" />
            <Text color="green.600" fontWeight="medium">¡Todo optimizado!</Text>
            <Text color="gray.500">No hay recomendaciones en este momento.</Text>
          </VStack>
        </Card.Body>
      </Card.Root>
    );
  }

  return (
    <Card.Root>
      <Card.Header>
        <Text fontWeight="bold">Recomendaciones de Optimización - {recommendations.length} oportunidades</Text>
      </Card.Header>
      <Card.Body>
        <Table.Root size="sm">
          <Table.Header>
            <Table.Row>
              <Table.ColumnHeader>Prioridad</Table.ColumnHeader>
              <Table.ColumnHeader>Tipo</Table.ColumnHeader>
              <Table.ColumnHeader>Descripción</Table.ColumnHeader>
              <Table.ColumnHeader>Ahorro Est.</Table.ColumnHeader>
              <Table.ColumnHeader>ROI</Table.ColumnHeader>
              <Table.ColumnHeader>Confianza</Table.ColumnHeader>
              <Table.ColumnHeader>Vencimiento</Table.ColumnHeader>
            </Table.Row>
          </Table.Header>
          <Table.Body>
            {recommendations.slice(0, 12).map((rec) => (
              <Table.Row key={rec.id}>
                <Table.Cell>
                  <Badge colorPalette={getPriorityColor(rec.priority)} size="sm">
                    {getPriorityLabel(rec.priority)}
                  </Badge>
                </Table.Cell>
                <Table.Cell>
                  <Text fontSize="sm" fontWeight="medium">{getTypeLabel(rec.type)}</Text>
                </Table.Cell>
                <Table.Cell>
                  <VStack align="start" gap="1">
                    <Text fontSize="sm" fontWeight="medium">{rec.title}</Text>
                    <Text fontSize="xs" color="gray.600">{rec.description}</Text>
                  </VStack>
                </Table.Cell>
                <Table.Cell>
                  <Text fontSize="sm" color="green.600" fontWeight="medium">
                    ${rec.estimatedSavings.toLocaleString()}
                  </Text>
                </Table.Cell>
                <Table.Cell>
                  <Text fontSize="sm">{rec.roi.toFixed(1)}%</Text>
                </Table.Cell>
                <Table.Cell>
                  <Progress.Root 
                    value={rec.confidence * 100} 
                    size="sm" 
                    colorPalette="blue"
                    width="60px"
                  >
                    <Progress.Track>
                      <Progress.Range />
                    </Progress.Track>
                  </Progress.Root>
                </Table.Cell>
                <Table.Cell>
                  <Text fontSize="sm">
                    {new Date(rec.dueDate).toLocaleDateString()}
                  </Text>
                </Table.Cell>
              </Table.Row>
            ))}
          </Table.Body>
        </Table.Root>
      </Card.Body>
    </Card.Root>
  );
}

// Helper functions
function getStatusColor(status: string) {
  switch (status) {
    case 'draft': return 'gray';
    case 'pending': return 'yellow';
    case 'sent': return 'blue';
    case 'confirmed': return 'green';
    case 'partial': return 'orange';
    case 'delivered': return 'green';
    case 'cancelled': return 'red';
    default: return 'gray';
  }
}

function getStatusLabel(status: string) {
  switch (status) {
    case 'draft': return 'Borrador';
    case 'pending': return 'Pendiente';
    case 'sent': return 'Enviado';
    case 'confirmed': return 'Confirmado';
    case 'partial': return 'Parcial';
    case 'delivered': return 'Entregado';
    case 'cancelled': return 'Cancelado';
    default: return status;
  }
}

function getPriorityColor(priority: string) {
  switch (priority) {
    case 'urgent': return 'red';
    case 'high': return 'orange';
    case 'medium': return 'yellow';
    default: return 'gray';
  }
}

function getPriorityLabel(priority: string) {
  switch (priority) {
    case 'urgent': return 'Urgente';
    case 'high': return 'Alta';
    case 'medium': return 'Media';
    default: return 'Baja';
  }
}

function getTypeLabel(type: string) {
  switch (type) {
    case 'reorder': return 'Reabastecimiento';
    case 'consolidate': return 'Consolidación';
    case 'switch_supplier': return 'Cambio Proveedor';
    case 'bulk_buy': return 'Compra Volumen';
    case 'contract_renewal': return 'Renovación Contrato';
    default: return type;
  }
}

export default ProcurementIntelligence;